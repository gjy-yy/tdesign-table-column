import { MenuValue } from './type';
declare const _default: import("vue").DefineComponent<{
    expanded: {
        type: import("vue").PropType<MenuValue[]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<MenuValue[]>;
        default: any[];
    };
    expandType: {
        type: import("vue").PropType<"normal" | "popup">;
        default: "normal" | "popup";
        validator(val: "normal" | "popup"): boolean;
    };
    logo: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    operations: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    value: {
        type: import("vue").PropType<MenuValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<MenuValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<MenuValue>;
    };
    onChange: import("vue").PropType<(value: MenuValue) => void>;
    onExpand: import("vue").PropType<(value: MenuValue[]) => void>;
}, {
    classPrefix: import("vue").ComputedRef<string>;
    mode: import("vue").Ref<"normal" | "popup">;
    menuClass: import("vue").ComputedRef<string[]>;
    expandValues: import("vue").Ref<MenuValue[]>;
    activeValue: import("vue").Ref<MenuValue>;
    activeValues: import("vue").Ref<any[]>;
    submenu: any[];
    handleTabChange: (value: MenuValue) => void;
}, unknown, {}, {
    renderNormalSubmenu(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expanded: {
        type: import("vue").PropType<MenuValue[]>;
        default: any;
    };
    defaultExpanded: {
        type: import("vue").PropType<MenuValue[]>;
        default: any[];
    };
    expandType: {
        type: import("vue").PropType<"normal" | "popup">;
        default: "normal" | "popup";
        validator(val: "normal" | "popup"): boolean;
    };
    logo: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    operations: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    value: {
        type: import("vue").PropType<MenuValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<MenuValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<MenuValue>;
    };
    onChange: import("vue").PropType<(value: MenuValue) => void>;
    onExpand: import("vue").PropType<(value: MenuValue[]) => void>;
}>>, {
    value: MenuValue;
    expanded: MenuValue[];
    modelValue: MenuValue;
    theme: "dark" | "light";
    defaultExpanded: MenuValue[];
    expandType: "normal" | "popup";
}>;
export default _default;
