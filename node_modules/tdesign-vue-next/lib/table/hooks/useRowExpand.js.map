{"version":3,"file":"useRowExpand.js","sources":["../../../src/table/hooks/useRowExpand.tsx"],"sourcesContent":["import { computed, SetupContext, toRefs, h } from 'vue';\nimport { ChevronRightCircleIcon as TdChevronRightCircleIcon } from 'tdesign-icons-vue-next';\nimport get from 'lodash/get';\n\nimport {\n  TdPrimaryTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  PrimaryTableCellParams,\n  TableExpandedRowParams,\n  RowEventContext,\n} from '../type';\nimport useClassName from './useClassName';\nimport { useTNodeJSX } from '../../hooks/tnode';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\n\nexport default function useRowExpand(props: TdPrimaryTableProps, context: SetupContext) {\n  const { expandedRowKeys } = toRefs(props);\n  const renderTNode = useTNodeJSX();\n  const { t, globalConfig } = useConfig('table');\n  const { ChevronRightCircleIcon } = useGlobalIcon({ ChevronRightCircleIcon: TdChevronRightCircleIcon });\n  const { tableExpandClasses, positiveRotate90, tableFullRowClasses } = useClassName();\n  // controlled and uncontrolled\n  const [tExpandedRowKeys, setTExpandedRowKeys] = useDefaultValue(\n    expandedRowKeys,\n    props.defaultExpandedRowKeys || [],\n    props.onExpandChange,\n    'expandedRowKeys',\n  );\n\n  const showExpandedRow = computed(() =>\n    Boolean(props.expandedRow || context.slots.expandedRow || context.slots['expanded-row']),\n  );\n\n  const showExpandIconColumn = computed(() => props.expandIcon !== false && showExpandedRow.value);\n\n  const isFirstColumnFixed = computed(() => props.columns?.[0]?.fixed === 'left');\n\n  const onToggleExpand = (e: MouseEvent, row: TableRowData) => {\n    props.expandOnRowClick && e.stopPropagation();\n    const currentId = get(row, props.rowKey || 'id');\n    const index = tExpandedRowKeys.value.indexOf(currentId);\n    const newKeys = [...tExpandedRowKeys.value];\n    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);\n    setTExpandedRowKeys(newKeys, {\n      expandedRowData: props.data.filter((t) => newKeys.includes(get(t, props.rowKey || 'id'))),\n      currentRowData: row,\n    });\n  };\n\n  const renderExpandIcon = (_: typeof h, p: PrimaryTableCellParams<TableRowData>) => {\n    const { row, rowIndex } = p;\n    const currentId = get(row, props.rowKey || 'id');\n    const expanded = tExpandedRowKeys.value.includes(currentId);\n    const icon = renderTNode('expandIcon', {\n      defaultNode: t(globalConfig.value.expandIcon) || <ChevronRightCircleIcon />,\n      params: { row, index: rowIndex },\n    });\n    if (!icon) return null;\n    const classes = [\n      tableExpandClasses.iconBox,\n      tableExpandClasses[expanded ? 'expanded' : 'collapsed'],\n      { [positiveRotate90]: expanded },\n    ];\n    return (\n      <span class={classes} onClick={(e: MouseEvent) => onToggleExpand(e, row)}>\n        {icon}\n      </span>\n    );\n  };\n\n  const getExpandColumn = () => {\n    const expandCol: PrimaryTableCol<TableRowData> = {\n      colKey: '__EXPAND_ROW_ICON_COLUMN__',\n      width: 64,\n      className: tableExpandClasses.iconCell,\n      fixed: isFirstColumnFixed.value ? 'left' : undefined,\n      cell: renderExpandIcon,\n    };\n    return expandCol;\n  };\n\n  const renderExpandedRow = (\n    p: TableExpandedRowParams<TableRowData> & { tableWidth: number; isWidthOverflow: boolean },\n  ) => {\n    const rowId = get(p.row, props.rowKey || 'id');\n    if (!tExpandedRowKeys.value.includes(rowId)) return null;\n    const isFixedLeft = p.isWidthOverflow && props.columns.find((item) => item.fixed === 'left');\n    return (\n      <tr key={`expand_${rowId}`} class={[tableExpandClasses.row, { [tableFullRowClasses.base]: isFixedLeft }]}>\n        <td colspan={p.columns.length}>\n          <div\n            class={[tableExpandClasses.rowInner, { [tableFullRowClasses.innerFullRow]: isFixedLeft }]}\n            style={isFixedLeft ? { width: `${p.tableWidth}px` } : {}}\n          >\n            <div class={tableFullRowClasses.innerFullElement}>{renderTNode('expandedRow', { params: p })}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onInnerExpandRowClick = (p: RowEventContext<TableRowData>) => {\n    onToggleExpand(p.e, p.row);\n  };\n\n  return {\n    showExpandedRow,\n    showExpandIconColumn,\n    getExpandColumn,\n    renderExpandedRow,\n    onInnerExpandRowClick,\n  };\n}\n"],"names":["useRowExpand","props","context","toRefs","expandedRowKeys","renderTNode","useTNodeJSX","useConfig","t","globalConfig","useGlobalIcon","ChevronRightCircleIcon","TdChevronRightCircleIcon","useClassName","tableExpandClasses","positiveRotate90","tableFullRowClasses","useDefaultValue","defaultExpandedRowKeys","onExpandChange","tExpandedRowKeys","setTExpandedRowKeys","showExpandedRow","computed","Boolean","expandedRow","slots","showExpandIconColumn","expandIcon","value","isFirstColumnFixed","columns","fixed","onToggleExpand","e","row","expandOnRowClick","stopPropagation","currentId","get","rowKey","index","indexOf","newKeys","splice","push","expandedRowData","data","filter","includes","currentRowData","renderExpandIcon","_","p","rowIndex","expanded","icon","defaultNode","_createVNode","params","classes","iconBox","getExpandColumn","expandCol","colKey","width","className","iconCell","cell","renderExpandedRow","rowId","isFixedLeft","isWidthOverflow","find","item","base","length","rowInner","innerFullRow","tableWidth","innerFullElement","onInnerExpandRowClick"],"mappings":"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"}