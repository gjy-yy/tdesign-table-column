import { TdUploadProps, UploadFile } from './type';
import { SuccessContext, InnerProgressContext, UploadCtxType } from './interface';
export declare const useUploadProgress: (props: TdUploadProps, uploadCtx: UploadCtxType) => {
    handleProgress: ({ event, file, files, percent, type }: InnerProgressContext) => void;
    handleMockProgress: (files: UploadFile[]) => void;
    handleSuccess: ({ event, file, files, response }: SuccessContext) => void;
    onError: (options: {
        event?: ProgressEvent;
        file: UploadFile;
        files: UploadFile[];
        response?: any;
        resFormatted?: boolean;
    }) => void;
};
export declare const useUpload: (props: TdUploadProps, uploadCtx: UploadCtxType) => {
    uploadFiles: (files: FileList) => void;
    upload: (currentFiles: UploadFile | UploadFile[]) => Promise<void>;
    xhrReq: import("vue").Ref<{
        onreadystatechange: (this: XMLHttpRequest, ev: Event) => any;
        readonly readyState: number;
        readonly response: any;
        readonly responseText: string;
        responseType: XMLHttpRequestResponseType;
        readonly responseURL: string;
        readonly responseXML: Document;
        readonly status: number;
        readonly statusText: string;
        timeout: number;
        readonly upload: {
            addEventListener: {
                <K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
                (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            };
            removeEventListener: {
                <K_1 extends keyof XMLHttpRequestEventTargetEventMap>(type: K_1, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
                (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            };
            onabort: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            onerror: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            onload: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            onloadend: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            onloadstart: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            onprogress: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            ontimeout: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
            dispatchEvent: (event: Event) => boolean;
        };
        withCredentials: boolean;
        abort: () => void;
        getAllResponseHeaders: () => string;
        getResponseHeader: (name: string) => string;
        open: {
            (method: string, url: string | URL): void;
            (method: string, url: string | URL, async: boolean, username?: string, password?: string): void;
        };
        overrideMimeType: (mime: string) => void;
        send: (body?: Document | XMLHttpRequestBodyInit) => void;
        setRequestHeader: (name: string, value: string) => void;
        readonly DONE: number;
        readonly HEADERS_RECEIVED: number;
        readonly LOADING: number;
        readonly OPENED: number;
        readonly UNSENT: number;
        addEventListener: {
            <K_2 extends keyof XMLHttpRequestEventMap>(type: K_2, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K_2]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        };
        removeEventListener: {
            <K_3 extends keyof XMLHttpRequestEventMap>(type: K_3, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K_3]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        };
        onabort: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        onerror: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        onload: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        onloadend: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        onloadstart: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        onprogress: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        ontimeout: (this: XMLHttpRequest, ev: ProgressEvent<EventTarget>) => any;
        dispatchEvent: (event: Event) => boolean;
    }>;
};
