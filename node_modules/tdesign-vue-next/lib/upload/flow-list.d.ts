import { PropType } from 'vue';
import { UploadFile } from './type';
import { FlowRemoveContext } from './interface';
import { UploadConfig } from '../config-provider/type';
declare const _default: import("vue").DefineComponent<{
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    theme: {
        type: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
    };
    batchUpload: BooleanConstructor;
    files: {
        type: PropType<UploadFile[]>;
        default: any;
    };
    toUploadFiles: PropType<UploadFile[]>;
    onRemove: PropType<(ctx: FlowRemoveContext) => void>;
    onUpload: PropType<(files: Array<UploadFile>, e: MouseEvent) => void>;
    onCancel: PropType<(e: MouseEvent) => void>;
    onChange: PropType<(files: FileList) => void>;
    onDragleave: PropType<(e: DragEvent) => void>;
    onDragenter: PropType<(e: DragEvent) => void>;
    onImgPreview: PropType<(options: MouseEvent, file: UploadFile) => void>;
    locale: {
        type: PropType<UploadConfig>;
        default: () => UploadConfig;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    theme: {
        type: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
    };
    batchUpload: BooleanConstructor;
    files: {
        type: PropType<UploadFile[]>;
        default: any;
    };
    toUploadFiles: PropType<UploadFile[]>;
    onRemove: PropType<(ctx: FlowRemoveContext) => void>;
    onUpload: PropType<(files: Array<UploadFile>, e: MouseEvent) => void>;
    onCancel: PropType<(e: MouseEvent) => void>;
    onChange: PropType<(files: FileList) => void>;
    onDragleave: PropType<(e: DragEvent) => void>;
    onDragenter: PropType<(e: DragEvent) => void>;
    onImgPreview: PropType<(options: MouseEvent, file: UploadFile) => void>;
    locale: {
        type: PropType<UploadConfig>;
        default: () => UploadConfig;
    };
}>>, {
    disabled: boolean;
    placeholder: string;
    theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
    locale: UploadConfig;
    files: UploadFile[];
    autoUpload: boolean;
    showUploadProgress: boolean;
    allowUploadDuplicateFile: boolean;
    batchUpload: boolean;
}>;
export default _default;
