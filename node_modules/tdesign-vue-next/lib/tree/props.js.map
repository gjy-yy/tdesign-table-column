{"version":3,"file":"props.js","sources":["../../src/tree/props.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { TdTreeProps } from './type';\nimport { PropType } from 'vue';\n\nexport default {\n  /** 节点是否可高亮 */\n  activable: Boolean,\n  /** 高亮的节点值 */\n  actived: {\n    type: Array as PropType<TdTreeProps['actived']>,\n    default: undefined,\n  },\n  /** 高亮的节点值，非受控属性 */\n  defaultActived: {\n    type: Array as PropType<TdTreeProps['defaultActived']>,\n  },\n  /** 是否允许多个节点同时高亮 */\n  activeMultiple: Boolean,\n  /** 是否允许在过滤时节点折叠节点 */\n  allowFoldNodeOnFilter: Boolean,\n  /** 隐藏节点复选框 */\n  checkable: Boolean,\n  /** 透传属性到 checkbox 组件。参考 checkbox 组件 API */\n  checkProps: {\n    type: Object as PropType<TdTreeProps['checkProps']>,\n  },\n  /** 父子节点选中状态不再关联，可各自选中或取消 */\n  checkStrictly: Boolean,\n  /** 树数据，泛型 `T` 表示树节点 TS 类型 */\n  data: {\n    type: Array as PropType<TdTreeProps['data']>,\n    default: (): TdTreeProps['data'] => [],\n  },\n  /** 禁用复选框，可支持禁用不同的行 */\n  disableCheck: {\n    type: [Boolean, Function] as PropType<TdTreeProps['disableCheck']>,\n    default: false,\n  },\n  /** 是否禁用树操作 */\n  disabled: Boolean,\n  /** 是否禁用树操作 */\n  draggable: {\n    type: Boolean,\n    default: false,\n  },\n  /** 数据为空时展示的文本 */\n  empty: {\n    type: [String, Function] as PropType<TdTreeProps['empty']>,\n    default: '',\n  },\n  /** 是否展开全部节点 */\n  expandAll: Boolean,\n  /** 展开的节点值 */\n  expanded: {\n    type: Array as PropType<TdTreeProps['expanded']>,\n    default: undefined,\n  },\n  /** 展开的节点值，非受控属性 */\n  defaultExpanded: {\n    type: Array as PropType<TdTreeProps['defaultExpanded']>,\n    default: (): TdTreeProps['defaultExpanded'] => [],\n  },\n  /** 默认展开的级别，第一层为 0 */\n  expandLevel: {\n    type: Number,\n    default: 0,\n  },\n  /** 同级别展开互斥，手风琴效果 */\n  expandMutex: Boolean,\n  /** 是否支持点击节点也能展开收起 */\n  expandOnClickNode: Boolean,\n  /** 展开子节点时是否自动展开父节点 */\n  expandParent: Boolean,\n  /** 节点过滤方法，只呈现返回值为 true 的节点，泛型 `T` 表示树节点 TS 类型 */\n  filter: {\n    type: Function as PropType<TdTreeProps['filter']>,\n  },\n  /** 节点是否有悬浮状态 */\n  hover: Boolean,\n  /** 节点图标，可自定义 */\n  icon: {\n    type: [Boolean, Function] as PropType<TdTreeProps['icon']>,\n    default: true,\n  },\n  /** 用来定义 value / label / children 在 `options` 中对应的字段别名 */\n  keys: {\n    type: Object as PropType<TdTreeProps['keys']>,\n  },\n  /** 自定义节点内容，值为 false 不显示，值为 true 显示默认 label，值为字符串直接输出该字符串。泛型 `T` 表示树节点 TS 类型 */\n  label: {\n    type: [String, Boolean, Function] as PropType<TdTreeProps['label']>,\n    default: true,\n  },\n  /** 延迟加载 children 为 true 的节点的子节点数据，即使 expandAll 被设置为 true，也同样延迟加载 */\n  lazy: {\n    type: Boolean,\n    default: true,\n  },\n  /** 连接线。值为 false 不显示连接线；值为 true 显示默认连接线；值类型为 Function 表示自定义连接线 */\n  line: {\n    type: [Boolean, Function] as PropType<TdTreeProps['line']>,\n    default: false,\n  },\n  /** 加载子数据的方法，在展开节点时调用（仅当节点 children 为 true 时生效），泛型 `T` 表示树节点 TS 类型 */\n  load: {\n    type: Function as PropType<TdTreeProps['load']>,\n  },\n  /** 自定义节点操作项，泛型 `T` 表示树节点 TS 类型 */\n  operations: {\n    type: Function as PropType<TdTreeProps['operations']>,\n  },\n  /** 节点展开折叠时是否使用过渡动画 */\n  transition: {\n    type: Boolean,\n    default: true,\n  },\n  /** 选中值（组件为可选状态时） */\n  value: {\n    type: Array as PropType<TdTreeProps['value']>,\n    default: undefined,\n  },\n  modelValue: {\n    type: Array as PropType<TdTreeProps['value']>,\n    default: undefined,\n  },\n  /** 选中值（组件为可选状态时），非受控属性 */\n  defaultValue: {\n    type: Array as PropType<TdTreeProps['defaultValue']>,\n    default: (): TdTreeProps['defaultValue'] => [],\n  },\n  /** 选中值模式。all 表示父节点和子节点全部会出现在选中值里面；parentFirst 表示当子节点全部选中时，仅父节点在选中值里面；onlyLeaft 表示无论什么情况，选中值仅呈现叶子节点 */\n  valueMode: {\n    type: String as PropType<TdTreeProps['valueMode']>,\n    default: 'onlyLeaf' as TdTreeProps['valueMode'],\n    validator(val: TdTreeProps['valueMode']): boolean {\n      if (!val) return true;\n      return ['onlyLeaf', 'parentFirst', 'all'].includes(val);\n    },\n  },\n  /** 节点激活时触发，泛型 `T` 表示树节点 TS 类型 */\n  onActive: Function as PropType<TdTreeProps['onActive']>,\n  /** 节点选中状态变化时触发，context.node 表示当前变化的选项，泛型 `T` 表示树节点 TS 类型 */\n  onChange: Function as PropType<TdTreeProps['onChange']>,\n  /** 节点点击时触发，泛型 `T` 表示树节点 TS 类型 */\n  onClick: Function as PropType<TdTreeProps['onClick']>,\n  /** 节点展开或收起时触发，泛型 `T` 表示树节点 TS 类型 */\n  onExpand: Function as PropType<TdTreeProps['onExpand']>,\n  /** 异步加载后触发，泛型 `T` 表示树节点 TS 类型 */\n  onLoad: Function as PropType<TdTreeProps['onLoad']>,\n};\n"],"names":["activable","Boolean","actived","type","Array","defaultActived","activeMultiple","allowFoldNodeOnFilter","checkable","checkProps","Object","checkStrictly","data","disableCheck","Function","disabled","draggable","empty","String","expandAll","expanded","defaultExpanded","expandLevel","Number","expandMutex","expandOnClickNode","expandParent","filter","hover","icon","keys","label","lazy","line","load","operations","transition","value","modelValue","defaultValue","valueMode","validator","val","includes","onActive","onChange","onClick","onExpand","onLoad"],"mappings":"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"}