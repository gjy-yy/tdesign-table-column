{"version":3,"file":"xhr.js","sources":["../../../../src/_common/js/upload/xhr.ts"],"sourcesContent":["import { UploadFile, XhrOptions } from './types';\n\nexport default function xhr({\n  method = 'POST',\n  action,\n  withCredentials = false,\n  headers = {},\n  data = {},\n  file,\n  files,\n  name = 'file',\n  onError,\n  onProgress,\n  onSuccess,\n}: XhrOptions) {\n  // support files\n  const innerFiles: UploadFile[] = files || [];\n\n  // eslint-disable-next-line no-shadow\n  const xhr = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  // set send data\n  const formData = new FormData();\n  const sendData = typeof data === 'function' ? data(file) : data;\n  Object.keys(sendData).forEach((key) => {\n    formData.append(key, sendData[key]);\n  });\n\n  // support one request upload multiple files\n  innerFiles.forEach((f) => {\n    formData.append(name, f && f.raw as any);\n  });\n\n  xhr.open(method, action, true);\n\n  // custom request headers\n  Object.keys(headers).forEach((key) => {\n    xhr.setRequestHeader(key, headers[key]);\n  });\n\n  xhr.onerror = (event: ProgressEvent) => onError({ event, file, files: innerFiles });\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      let percent = 0;\n      if (event.total > 0) {\n        percent = Math.round((event.loaded / event.total) * 100);\n      }\n\n      onProgress({\n        event, percent, file, files: innerFiles\n      });\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  xhr.onload = (event: ProgressEvent) => {\n    let response;\n    const isFail = xhr.status < 200 || xhr.status >= 300;\n    if (isFail) {\n      return onError({\n        event, file, files: innerFiles, response\n      });\n    }\n    const text = xhr.responseText || xhr.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n    }\n    onSuccess({\n      event, file, files: innerFiles, response\n    });\n  };\n\n  xhr.send(formData);\n\n  return xhr;\n}\n"],"names":["xhr","method","action","withCredentials","headers","data","file","files","name","onError","onProgress","onSuccess","innerFiles","XMLHttpRequest","formData","FormData","sendData","Object","keys","forEach","key","append","f","raw","open","setRequestHeader","onerror","event","upload","onprogress","percent","total","Math","round","loaded","onload","response","isFail","status","text","responseText","JSON","parse","e","send"],"mappings":"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"}