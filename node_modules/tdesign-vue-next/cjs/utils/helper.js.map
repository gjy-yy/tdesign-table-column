{"version":3,"file":"helper.js","sources":["../../src/utils/helper.ts"],"sourcesContent":["import camelCase from 'lodash/camelCase';\n\nexport function omit(obj: object, fields: string[]): object {\n  const shallowCopy = {\n    ...obj,\n  };\n  for (let i = 0; i < fields.length; i++) {\n    const key = fields[i];\n    delete shallowCopy[key];\n  }\n  return shallowCopy;\n}\n\nexport function removeEmptyAttrs<T>(obj: T): Partial<T> {\n  const newObj = {};\n\n  Object.keys(obj).forEach((key) => {\n    if (typeof obj[key] !== 'undefined' || obj[key] === null) {\n      newObj[key] = obj[key];\n    }\n  });\n\n  return newObj;\n}\n\nexport function getTabElementByValue(tabs: [] = [], value: string): object {\n  const [result] = tabs.filter((item) => {\n    const { id } = item;\n    return `${id}` === `${value}`;\n  });\n  return result || null;\n}\n\nexport function firstUpperCase(str: string): string {\n  return str.toLowerCase().replace(/( |^)[a-z]/g, (char: string) => char.toUpperCase());\n}\n\nexport type Gradients = { [percent: string]: string };\nexport type FromTo = { from: string; to: string };\nexport type LinearGradient = { direction?: string } & (Gradients | FromTo);\nexport function getBackgroundColor(color: string | string[] | LinearGradient): string {\n  if (typeof color === 'string') {\n    return color;\n  }\n  if (Array.isArray(color)) {\n    if (color[0] && color[0][0] === '#') {\n      color.unshift('90deg');\n    }\n    return `linear-gradient( ${color.join(',')} )`;\n  }\n  const { from, to, direction = 'to right', ...rest } = color;\n  let keys = Object.keys(rest);\n  if (keys.length) {\n    keys = keys.sort((a, b) => parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1)));\n    const tempArr = keys.map((key: any) => `${rest[key]} ${key}`);\n    return `linear-gradient(${direction}, ${tempArr.join(',')})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n}\n\n// keyboard-event => onKeyboardEvent\nexport function getPropsApiByEvent(eventName: string) {\n  return camelCase(`on-${eventName}`);\n}\n\n/**\n * 计算字符串字符的长度并可以截取字符串。\n * @param str 传入字符串\n * @param maxCharacter 规定最大字符串长度\n * @returns 当没有传入maxCharacter时返回字符串字符长度，当传入maxCharacter时返回截取之后的字符串和长度。\n */\nexport function getCharacterLength(str: string, maxCharacter?: number) {\n  const hasMaxCharacter = typeof maxCharacter === 'number';\n  if (!str || str.length === 0) {\n    if (hasMaxCharacter) {\n      return {\n        length: 0,\n        characters: str,\n      };\n    }\n    return 0;\n  }\n  let len = 0;\n  for (let i = 0; i < str.length; i++) {\n    let currentStringLength = 0;\n    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {\n      currentStringLength = 2;\n    } else {\n      currentStringLength = 1;\n    }\n    if (hasMaxCharacter && len + currentStringLength > maxCharacter) {\n      return {\n        length: len,\n        characters: str.slice(0, i),\n      };\n    }\n    len += currentStringLength;\n  }\n  if (hasMaxCharacter) {\n    return {\n      length: len,\n      characters: str,\n    };\n  }\n  return len;\n}\n\n/**\n * 兼容样式中支持number/string类型的传值 得出最后的结果。\n * @param param number或string类型的可用于样式上的值\n * @returns 可使用的样式值。\n */\nexport function pxCompat(param: string | number) {\n  return typeof param === 'number' ? `${param}px` : param;\n}\n"],"names":["omit","obj","fields","shallowCopy","i","length","key","removeEmptyAttrs","newObj","Object","keys","forEach","getTabElementByValue","tabs","value","filter","item","id","_slicedToArray","result","firstUpperCase","str","toLowerCase","replace","char","toUpperCase","getBackgroundColor","color","Array","isArray","unshift","join","from","to","direction","rest","sort","a","b","parseFloat","substr","tempArr","map","getPropsApiByEvent","eventName","camelCase","getCharacterLength","maxCharacter","hasMaxCharacter","characters","len","currentStringLength","charCodeAt","slice","pxCompat","param"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAEgB,SAAAA,IAAA,CAAKC,GAAL,EAAkBC,MAAlB,EAA4C;EAC1D,IAAMC,WAAc,GACfF,aAAAA,CAAAA,EAAAA,EAAAA,GADe,CAApB,CAAA;;AAGA,EAAA,KAAA,IAASG,CAAI,GAAA,CAAb,EAAgBA,CAAI,GAAAF,MAAA,CAAOG,MAA3B,EAAmCD,CAAK,EAAxC,EAAwC;AACtC,IAAA,IAAME,MAAMJ,MAAO,CAAAE,CAAA,CAAnB,CAAA;IACA,OAAOD,WAAY,CAAAG,GAAA,CAAnB,CAAA;AACF,GAAA;;AACO,EAAA,OAAAH,WAAA,CAAA;AACT,CAAA;AAEO,SAASI,gBAAT,CAA6BN,GAA7B,EAAiD;EACtD,IAAMO,SAAS,EAAf,CAAA;EAEAC,MAAA,CAAOC,IAAP,CAAYT,GAAZ,EAAiBU,OAAjB,CAAyB,UAACL,GAAD,EAAS;AAChC,IAAA,IAAI,OAAOL,GAAI,CAAAK,GAAA,CAAX,KAAoB,WAApB,IAAmCL,GAAA,CAAIK,GAAJ,CAAA,KAAa,IAApD,EAA0D;AACxDE,MAAAA,MAAA,CAAOF,GAAP,CAAA,GAAcL,GAAI,CAAAK,GAAA,CAAlB,CAAA;AACF,KAAA;GAHF,CAAA,CAAA;AAMO,EAAA,OAAAE,MAAA,CAAA;AACT,CAAA;AAEO,SAASI,oBAAT,GAAoE;EAAA,IAAtCC,IAAsC,uEAA3B,EAA2B,CAAA;AAAA,EAAA,IAAvBC,KAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA;;AACzE,EAAA,IAAA,YAAA,GAAiBD,IAAK,CAAAE,MAAL,CAAY,UAACC,IAAD,EAAU;AAC/B,IAAA,IAAEC,EAAF,GAASD,IAAT,CAAEC,EAAF,CAAA;AACC,IAAA,OAAA,EAAGA,CAAAA,MAAAA,CAAAA,EAAH,CAAeH,KAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAf,CAAA,CAAA;AACR,GAHgB,CAAjB;AAAA,MAAA,aAAA,GAAAI,kCAAA,CAAA,YAAA,EAAA,CAAA,CAAA;AAAA,MAAOC,MAAP,GAAA,aAAA,CAAA,CAAA,CAAA,CAAA;;EAIA,OAAOA,MAAU,IAAA,IAAjB,CAAA;AACF,CAAA;AAEO,SAASC,cAAT,CAAwBC,GAAxB,EAA6C;EAC3C,OAAAA,GAAA,CAAIC,WAAJ,EAAA,CAAkBC,OAAlB,CAA0B,aAA1B,EAAyC,UAACC,KAAD,EAAA;IAAA,OAAkBA,KAAK,CAAAC,WAAL,EAAlB,CAAA;AAAA,GAAzC,CAAA,CAAA;AACT,CAAA;AAKO,SAASC,kBAAT,CAA4BC,KAA5B,EAA+E;AAChF,EAAA,IAAA,OAAOA,KAAP,KAAiB,QAAjB,EAA2B;AACtB,IAAA,OAAAA,KAAA,CAAA;AACT,GAAA;;AACI,EAAA,IAAAC,KAAA,CAAMC,OAAN,CAAcF,KAAd,CAAA,EAAsB;AACxB,IAAA,IAAIA,KAAM,CAAA,CAAA,CAAN,IAAYA,KAAM,CAAA,CAAA,CAAN,CAAS,CAAT,CAAA,KAAgB,GAAhC,EAAqC;MACnCA,KAAA,CAAMG,OAAN,CAAc,OAAd,CAAA,CAAA;AACF,KAAA;;AACO,IAAA,OAAA,mBAAA,CAAA,MAAA,CAAoBH,KAAM,CAAAI,IAAN,CAAW,GAAX,CAApB,EAAA,IAAA,CAAA,CAAA;AACT,GAAA;;AACA,EAAA,IAAQC,IAAR,GAAsDL,KAAtD,CAAQK,IAAR;AAAA,MAAcC,EAAd,GAAsDN,KAAtD,CAAcM,EAAd;MAAsDN,gBAAAA,GAAAA,KAAtD,CAAkBO,SAAlB;MAAkBA,SAAlB,iCAA8B,UAA9B,GAAA,gBAAA;MAA6CC,IAA7C,gDAAsDR,KAAtD,EAAA,SAAA,CAAA,CAAA;;AACI,EAAA,IAAAjB,IAAA,GAAOD,MAAO,CAAAC,IAAP,CAAYyB,IAAZ,CAAP,CAAA;;EACJ,IAAIzB,KAAKL,MAAT,EAAiB;IACRK,IAAA,GAAAA,IAAA,CAAK0B,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ,EAAA;AAAA,MAAA,OAAUC,UAAW,CAAAF,CAAA,CAAEG,MAAF,CAAS,CAAT,EAAYH,CAAE,CAAAhC,MAAF,GAAW,CAAvB,CAAA,CAAX,GAAwCkC,WAAWD,CAAE,CAAAE,MAAF,CAAS,CAAT,EAAYF,CAAE,CAAAjC,MAAF,GAAW,CAAvB,EAA7D,CAAA;AAAA,KAAV,CAAA,CAAA;AACD,IAAA,IAAAoC,OAAA,GAAU/B,KAAKgC,GAAL,CAAS,UAACpC,GAAD,EAAA;AAAA,MAAA,OAAA,EAAA,CAAA,MAAA,CAAiB6B,IAAA,CAAK7B,GAAL,CAAjB,cAA8BA,GAA9B,CAAA,CAAA;AAAA,KAAT,CAAV,CAAA;AACN,IAAA,OAAA,kBAAA,CAAA,MAAA,CAA0B4B,SAA1B,EAAwCO,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,OAAQ,CAAAV,IAAR,CAAa,GAAb,CAAxC,EAAA,GAAA,CAAA,CAAA;AACF,GAAA;;AACO,EAAA,OAAA,kBAAA,CAAA,MAAA,CAAmBG,SAAnB,EAAA,IAAA,CAAA,CAAA,MAAA,CAAiCF,IAAjC,EAAA,IAAA,CAAA,CAAA,MAAA,CAA0CC,EAA1C,EAAA,GAAA,CAAA,CAAA;AACT,CAAA;AAGO,SAASU,kBAAT,CAA4BC,SAA5B,EAA+C;EAC7C,OAAAC,6BAAA,CAAgBD,KAAAA,CAAAA,MAAAA,CAAAA,SAAhB,CAAA,CAAA,CAAA;AACT,CAAA;AAQgB,SAAAE,kBAAA,CAAmBzB,GAAnB,EAAgC0B,YAAhC,EAAuD;AAC/D,EAAA,IAAAC,eAAA,GAAkB,OAAOD,YAAP,KAAwB,QAA1C,CAAA;;EACN,IAAI,CAAC1B,GAAD,IAAQA,GAAI,CAAAhB,MAAJ,KAAe,CAA3B,EAA8B;AAC5B,IAAA,IAAI2C,eAAJ,EAAqB;MACZ,OAAA;AACL3C,QAAAA,MAAQ,EAAA,CADH;AAEL4C,QAAAA,UAAY,EAAA5B,GAAAA;OAFP,CAAA;AAIT,KAAA;;AACO,IAAA,OAAA,CAAA,CAAA;AACT,GAAA;;EACA,IAAI6B,GAAM,GAAA,CAAV,CAAA;;AACA,EAAA,KAAA,IAAS9C,CAAI,GAAA,CAAb,EAAgBA,CAAI,GAAAiB,GAAA,CAAIhB,MAAxB,EAAgCD,CAAK,EAArC,EAAqC;IACnC,IAAI+C,mBAAsB,GAAA,CAA1B,CAAA;;AACI,IAAA,IAAA9B,GAAA,CAAI+B,UAAJ,CAAehD,CAAf,CAAoB,GAAA,GAApB,IAA2BiB,GAAI,CAAA+B,UAAJ,CAAehD,CAAf,CAAA,KAAsB,EAAjD,EAAqD;AACjC+C,MAAAA,mBAAA,GAAA,CAAA,CAAA;AACjB,KAFH,MAEG;AACiBA,MAAAA,mBAAA,GAAA,CAAA,CAAA;AACxB,KAAA;;AACI,IAAA,IAAAH,eAAA,IAAmBE,GAAM,GAAAC,mBAAN,GAA4BJ,YAA/C,EAA6D;MACxD,OAAA;AACL1C,QAAAA,MAAQ,EAAA6C,GADH;AAELD,QAAAA,UAAY,EAAA5B,GAAA,CAAIgC,KAAJ,CAAU,CAAV,EAAajD,CAAb,CAAA;OAFP,CAAA;AAIT,KAAA;;AACO8C,IAAAA,GAAA,IAAAC,mBAAA,CAAA;AACT,GAAA;;AACA,EAAA,IAAIH,eAAJ,EAAqB;IACZ,OAAA;AACL3C,MAAAA,MAAQ,EAAA6C,GADH;AAELD,MAAAA,UAAY,EAAA5B,GAAAA;KAFP,CAAA;AAIT,GAAA;;AACO,EAAA,OAAA6B,GAAA,CAAA;AACT,CAAA;AAOO,SAASI,QAAT,CAAkBC,KAAlB,EAA0C;AAC/C,EAAA,OAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA+BA,EAAAA,CAAAA,MAAAA,CAAAA,KAA/B,UAA2CA,KAAlD,CAAA;AACF;;;;;;;;;;;"}