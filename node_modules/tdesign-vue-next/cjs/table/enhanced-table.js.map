{"version":3,"file":"enhanced-table.js","sources":["../../src/table/enhanced-table.tsx"],"sourcesContent":["import { defineComponent, SetupContext, computed, ref } from 'vue';\nimport baseTableProps from './base-table-props';\nimport primaryTableProps from './primary-table-props';\nimport enhancedTableProps from './enhanced-table-props';\nimport PrimaryTable from './primary-table';\nimport { TdEnhancedTableProps, PrimaryTableCol, TableRowData, DragSortContext } from './type';\nimport useTreeData from './hooks/useTreeData';\nimport useTreeSelect from './hooks/useTreeSelect';\n\nexport default defineComponent({\n  name: 'TEnhancedTable',\n\n  props: {\n    ...baseTableProps,\n    ...primaryTableProps,\n    ...enhancedTableProps,\n  },\n\n  setup(props: TdEnhancedTableProps, context: SetupContext) {\n    const { store, dataSource, formatTreeColumn, swapData, ...treeInstanceFunctions } = useTreeData(props, context);\n\n    const treeDataMap = ref(store.value.treeDataMap);\n\n    const { tIndeterminateSelectedRowKeys, onInnerSelectChange } = useTreeSelect(props, treeDataMap);\n\n    // 影响列和单元格内容的因素有：树形节点需要添加操作符 [+] [-]\n    const getColumns = (columns: PrimaryTableCol<TableRowData>[]) => {\n      const arr: PrimaryTableCol<TableRowData>[] = [];\n      for (let i = 0, len = columns.length; i < len; i++) {\n        let item = { ...columns[i] };\n        item = formatTreeColumn(item);\n        if (item.children?.length) {\n          item.children = getColumns(item.children);\n        }\n        // 多级表头和自定义列配置特殊逻辑：要么子节点不存在，要么子节点长度大于 1，方便做自定义列配置\n        if (!item.children || item.children?.length) {\n          arr.push(item);\n        }\n      }\n      return arr;\n    };\n\n    const tColumns = computed(() => {\n      // 暂时只有树形结构需要处理 column.cell\n      const isTreeData = !props.tree || !Object.keys(props.tree).length;\n      return isTreeData ? props.columns : getColumns(props.columns);\n    });\n\n    const onDragSortChange = (params: DragSortContext<TableRowData>) => {\n      if (props.beforeDragSort && !props.beforeDragSort(params)) return;\n      swapData({\n        current: params.current,\n        target: params.target,\n        currentIndex: params.currentIndex,\n        targetIndex: params.targetIndex,\n      });\n      props.onDragSort?.(params);\n    };\n\n    return {\n      store,\n      dataSource,\n      tColumns,\n      tIndeterminateSelectedRowKeys,\n      onDragSortChange,\n      onInnerSelectChange,\n      /** 对外暴露的方法 */\n      ...treeInstanceFunctions,\n    };\n  },\n\n  render() {\n    const props = {\n      ...this.$props,\n      data: this.dataSource,\n      columns: this.tColumns,\n      // 半选状态节点\n      indeterminateSelectedRowKeys: this.tIndeterminateSelectedRowKeys,\n      // 树形结构不允许本地数据分页\n      disableDataPage: Boolean(this.tree && Object.keys(this.tree).length),\n      onSelectChange: this.onInnerSelectChange,\n      onDragSort: this.onDragSortChange,\n    };\n    return <PrimaryTable v-slots={this.$slots} {...props} {...this.$attrs} />;\n  },\n});\n"],"names":["defineComponent","name","props","baseTableProps","primaryTableProps","enhancedTableProps","setup","context","useTreeData","store","dataSource","formatTreeColumn","swapData","treeInstanceFunctions","_objectWithoutProperties","treeDataMap","ref","value","useTreeSelect","tIndeterminateSelectedRowKeys","onInnerSelectChange","getColumns","columns","arr","i","len","length","item","children","push","tColumns","computed","isTreeData","tree","Object","keys","onDragSortChange","params","beforeDragSort","current","target","currentIndex","targetIndex","onDragSort","render","$props","data","indeterminateSelectedRowKeys","disableDataPage","Boolean","onSelectChange","_createVNode","PrimaryTable","_mergeProps","$attrs","$slots"],"mappings":"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"}