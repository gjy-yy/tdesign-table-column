{"version":3,"file":"useTreeSelect.js","sources":["../../../src/table/hooks/useTreeSelect.tsx"],"sourcesContent":["import { computed, toRefs, ref, Ref, watch } from 'vue';\nimport get from 'lodash/get';\nimport intersection from 'lodash/intersection';\nimport { TdEnhancedTableProps, TdPrimaryTableProps, TableRowData, PrimaryTableCol } from '../type';\nimport { KeysType, TableTreeDataMap, TreeDataMapType } from '../../_common/js/table/tree-store';\nimport useDefaultValue from '../../hooks/useDefaultValue';\n\nexport interface GetChildrenDataReturnValue {\n  allChildren: Array<any>;\n  allChildrenKeys: Array<string | number>;\n  leafNodeKeys: Array<string | number>;\n}\n\n// 保存子节点信息，避免重复计算\nexport const childrenMap = new Map();\n\nexport function getChildrenData(\n  treeDataMap: TreeDataMapType,\n  data: TableRowData,\n  keys: { childrenKey: string; rowKey: string },\n  r?: GetChildrenDataReturnValue,\n): GetChildrenDataReturnValue {\n  if (childrenMap.get(data)) return childrenMap.get(data);\n  const result = r || { allChildren: [], allChildrenKeys: [], leafNodeKeys: [] };\n  const children = get(data, keys.childrenKey);\n  if (!children || !children.length) return result;\n  const selectableChildren = children.filter(\n    (item: TableRowData) => !treeDataMap.get(get(item, keys.rowKey))?.disabled,\n  );\n  result.allChildren = [...new Set(result.allChildren.concat(selectableChildren))];\n  for (let i = 0, len = children.length; i < len; i++) {\n    const tItem = children[i];\n    const c = get(tItem, keys.childrenKey);\n    if (c?.length) {\n      const nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);\n      result.allChildren = [...new Set(result.allChildren.concat(nextLevelData.allChildren))];\n    }\n  }\n  // 避免使用 forEach，减少上下文消耗\n  for (let i = 0, len = result.allChildren.length; i < len; i++) {\n    const item = result.allChildren[i];\n    const children = get(item, keys.childrenKey);\n    const rowValue = get(item, keys.rowKey);\n    result.allChildrenKeys.push(rowValue);\n    if (!children || !children.length) {\n      result.leafNodeKeys.push(rowValue);\n    }\n  }\n  result.allChildrenKeys = [...new Set(result.allChildrenKeys)];\n  result.leafNodeKeys = [...new Set(result.leafNodeKeys)];\n  return result;\n}\n\nexport interface RemoveParams {\n  // 当前选中的数据\n  selectedRowKeys: Array<string | number>;\n  // 需要移除的数据\n  removeKeys: Array<string | number>;\n}\n\nexport interface RemainData {\n  data: Array<any>;\n  keys: Array<string | number>;\n}\n\nexport function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData {\n  const { selectedRowKeys, removeKeys } = p;\n  const result = r || { data: [], keys: [] };\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    if (!removeKeys.includes(key)) {\n      result.keys.push(key);\n    }\n  }\n  return result;\n}\n\nexport interface GetKeyDataParams {\n  treeDataMap: TreeDataMapType;\n  data: Array<any>;\n  column: PrimaryTableCol;\n  keys: KeysType;\n}\n\nexport interface GetRowDataParams {\n  treeDataMap: TreeDataMapType;\n  selectedRowKeys: Array<string | number>;\n}\n\nexport function getRowDataByKeys(p: GetRowDataParams) {\n  const { treeDataMap, selectedRowKeys } = p;\n  const result = [];\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    result.push(treeDataMap.get(key));\n  }\n  return result;\n}\n\ntype SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;\n\nexport default function useTreeSelect(props: TdEnhancedTableProps, treeDataMap: Ref<TableTreeDataMap>) {\n  const { selectedRowKeys, tree, data, indeterminateSelectedRowKeys } = toRefs(props);\n  // 半选状态的节点：子节点选中至少一个，且没有全部选中\n  const tIndeterminateSelectedRowKeys = ref<(string | number)[]>([]);\n\n  const [tSelectedRowKeys, setTSelectedRowKeys] = useDefaultValue(\n    selectedRowKeys,\n    props.defaultSelectedRowKeys || [],\n    props.onSelectChange,\n    'selectedRowKeys',\n  );\n  const rowDataKeys = computed(() => ({\n    rowKey: props.rowKey || 'id',\n    childrenKey: props.tree?.childrenKey || 'children',\n  }));\n\n  watch([tree, treeDataMap, data, tSelectedRowKeys], ([tree, treeDataMap]) => {\n    if (!tree || !treeDataMap.size || tree.checkStrictly) return;\n    updateIndeterminateState();\n  });\n\n  function updateIndeterminateState() {\n    if (!tree.value || tree.value.checkStrictly) return;\n    if (!tSelectedRowKeys.value.length) {\n      tIndeterminateSelectedRowKeys.value = [];\n      return;\n    }\n    const keys: Array<string | number> = [];\n    const parentMap: { [key: string | number]: any[] } = {};\n    for (let i = 0, len = tSelectedRowKeys.value.length; i < len; i++) {\n      const rowValue = tSelectedRowKeys.value[i];\n      const state = treeDataMap.value.get(rowValue);\n      const children = get(state.row, rowDataKeys.value.childrenKey);\n      // 根据选中的叶子结点计算父节点半选状态\n      if (!children || !children.length) {\n        let parentTmp = state.parent;\n        while (parentTmp) {\n          if (!parentMap[parentTmp.id]) {\n            parentMap[parentTmp.id] = [];\n          }\n          parentMap[parentTmp.id].push(state.row);\n          const checkedLength = parentMap[parentTmp.id].length;\n          const { allChildrenKeys } = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value);\n          const parentTmpIndex = keys.indexOf(parentTmp.id);\n          const selectedIndex = tSelectedRowKeys.value.indexOf(parentTmp.id);\n          if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {\n            parentTmpIndex === -1 && keys.push(parentTmp.id);\n          } else {\n            parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);\n          }\n          parentTmp = parentTmp.parent;\n        }\n      }\n    }\n    tIndeterminateSelectedRowKeys.value = keys;\n  }\n\n  function updateParentCheckedState(\n    selectedKeys: (string | number)[],\n    currentRowKey: string | number,\n    type: 'check' | 'uncheck',\n  ) {\n    if (!tree.value || tree.value.checkStrictly) return;\n    const keys = [...selectedKeys];\n    const state = treeDataMap.value.get(currentRowKey);\n    let parentTmp = state.parent;\n    while (parentTmp) {\n      const { leafNodeKeys } = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value);\n      const checkedChildrenKeys = intersection(leafNodeKeys, selectedKeys);\n      const selectedIndex = keys.indexOf(parentTmp.id);\n      if (type === 'uncheck') {\n        selectedIndex !== -1 && keys.splice(selectedIndex, 1);\n      } else if (checkedChildrenKeys.length === leafNodeKeys.length) {\n        selectedIndex === -1 && keys.push(parentTmp.id);\n      }\n      parentTmp = parentTmp.parent;\n    }\n    return keys;\n  }\n\n  function onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    if (!tree.value || tree.value.checkStrictly) {\n      setTSelectedRowKeys(rowKeys, extraData);\n      return;\n    }\n    if (extraData.currentRowKey === 'CHECK_ALL_BOX') {\n      handleSelectAll(extraData);\n    } else {\n      handleSelect(rowKeys, extraData);\n    }\n  }\n\n  function handleSelectAll(extraData: SelectChangeParams[1]) {\n    const newRowKeys: Array<string | number> = [];\n    const newRowData: TableRowData[] = [];\n    if (extraData.type === 'check') {\n      const arr = [...treeDataMap.value.values()];\n      for (let i = 0, len = arr.length; i < len; i++) {\n        const item = arr[i];\n        if (!item.disabled) {\n          newRowData.push(item.row);\n          newRowKeys.push(get(item.row, rowDataKeys.value.rowKey));\n        }\n      }\n    }\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData || [],\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  function handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    let newRowKeys = [...rowKeys];\n    if (props.tree?.checkStrictly === false) {\n      if (extraData?.type === 'check') {\n        const result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);\n        const { allChildrenKeys } = result;\n        childrenMap.set(extraData.currentRowData, result);\n        newRowKeys = [...new Set(newRowKeys.concat(allChildrenKeys))];\n      } else if (extraData?.type === 'uncheck') {\n        const children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);\n        const result = removeChildrenKeys({\n          selectedRowKeys: rowKeys,\n          removeKeys: children.allChildrenKeys,\n        });\n        newRowKeys = result.keys;\n      }\n    }\n    newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);\n    const newRowData = getRowDataByKeys({ treeDataMap: treeDataMap.value, selectedRowKeys: newRowKeys });\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData,\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  return {\n    // 如果存在受控属性 indeterminateSelectedRowKeys 则优先使用；否则使用内部状态：tIndeterminateSelectedRowKeys\n    tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys.value\n      ? indeterminateSelectedRowKeys\n      : tIndeterminateSelectedRowKeys,\n    onInnerSelectChange,\n  };\n}\n"],"names":["childrenMap","Map","getChildrenData","treeDataMap","data","keys","r","get","result","allChildren","allChildrenKeys","leafNodeKeys","children","childrenKey","length","selectableChildren","filter","item","rowKey","disabled","_toConsumableArray","Set","concat","i","len","tItem","c","nextLevelData","rowValue","push","removeChildrenKeys","p","selectedRowKeys","removeKeys","key","includes","getRowDataByKeys","useTreeSelect","props","toRefs","tree","indeterminateSelectedRowKeys","tIndeterminateSelectedRowKeys","ref","useDefaultValue","defaultSelectedRowKeys","onSelectChange","_slicedToArray","tSelectedRowKeys","setTSelectedRowKeys","rowDataKeys","computed","watch","size","checkStrictly","updateIndeterminateState","value","parentMap","state","row","parentTmp","parent","id","checkedLength","parentTmpIndex","indexOf","selectedIndex","splice","updateParentCheckedState","selectedKeys","currentRowKey","type","checkedChildrenKeys","intersection","onInnerSelectChange","rowKeys","extraData","handleSelectAll","handleSelect","newRowKeys","newRowData","arr","values","newExtraData","selectedRowData","currentRowData","set"],"mappings":"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"}