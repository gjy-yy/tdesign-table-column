{"version":3,"file":"useDragSort.js","sources":["../../../src/table/hooks/useDragSort.ts"],"sourcesContent":["// 表格 行拖拽 + 列拖拽功能\nimport { SetupContext, computed, toRefs, ref, watch, h } from 'vue';\nimport Sortable, { SortableEvent, SortableOptions, MoveEvent } from 'sortablejs';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { TableRowData, TdPrimaryTableProps, DragSortContext } from '../type';\nimport useClassName from './useClassName';\nimport log from '../../_common/js/log';\nimport { hasClass } from '../../utils/dom';\nimport swapDragArrayElement from '../../_common/js/utils/swapDragArrayElement';\nimport { BaseTableColumns } from '../interface';\nimport { getColumnDataByKey, getColumnIndexByKey } from '../utils';\n\nexport default function useDragSort(props: TdPrimaryTableProps, context: SetupContext) {\n  const { sortOnRowDraggable, dragSort, data, rowKey } = toRefs(props);\n  const { tableDraggableClasses, tableBaseClass, tableFullRowClasses } = useClassName();\n  const primaryTableRef = ref(null);\n  const columns = ref<BaseTableColumns>(props.columns || []);\n  // @ts-ignore 判断是否有拖拽列\n  const dragCol = computed(() => columns.value.find((item) => item.colKey === 'drag'));\n  // 行拖拽判断条件\n  const isRowDraggable = computed(() => sortOnRowDraggable.value || dragSort.value === 'row');\n  // 行拖拽判断条件-手柄列\n  const isRowHandlerDraggable = computed(\n    () => ['row-handler', 'row-handler-col'].includes(dragSort.value) && !!dragCol.value,\n  );\n  // 列拖拽判断条件\n  const isColDraggable = computed(() => ['col', 'row-handler-col'].includes(dragSort.value));\n  // 行拖拽排序，存储上一次的变化结果\n  const lastRowList = ref([]);\n  // 列拖拽排序，存储上一次的变化结果\n  const lastColList = ref([]);\n\n  if (props.sortOnRowDraggable) {\n    log.error('Table', \"`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.\");\n  }\n\n  watch(\n    [data],\n    ([data]) => {\n      lastRowList.value = data?.map((item) => get(item, rowKey.value)) || [];\n    },\n    { immediate: true },\n  );\n\n  watch(\n    columns,\n    (columns) => {\n      lastColList.value = columns ? columns.map((t) => t.colKey) : [];\n    },\n    { immediate: true },\n  );\n\n  // 行拖拽排序\n  const registerRowDragEvent = (element: HTMLDivElement): void => {\n    if (!isRowHandlerDraggable.value && !isRowDraggable.value) return;\n    const dragContainer = element?.querySelector('tbody');\n    if (!dragContainer) {\n      console.error('tbody does not exist.');\n      return null;\n    }\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const baseOptions: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      filter: `.${tableFullRowClasses.base}`, // 过滤首行尾行固定\n      onMove: (evt: MoveEvent) => !hasClass(evt.related, tableFullRowClasses.base),\n      onEnd(evt: SortableEvent) {\n        // 处理受控：拖拽列表恢复原始排序\n        dragInstanceTmp?.sort(lastRowList.value);\n        let { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n        if ((isFunction(props.firstFullRow) && props.firstFullRow(h)) || context.slots.firstFullRow) {\n          currentIndex -= 1;\n          targetIndex -= 1;\n        }\n        const params: DragSortContext<TableRowData> = {\n          data: data.value,\n          currentIndex,\n          current: data.value[currentIndex],\n          targetIndex,\n          target: data.value[targetIndex],\n          newData: swapDragArrayElement([...props.data], currentIndex, targetIndex),\n          e: evt,\n          sort: 'row',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        props.onDragSort?.(params);\n      },\n    };\n\n    if (isRowDraggable.value) {\n      dragInstanceTmp = new Sortable(dragContainer, { ...baseOptions });\n    } else {\n      dragInstanceTmp = new Sortable(dragContainer, {\n        ...baseOptions,\n        handle: `.${tableDraggableClasses.handle}`,\n      });\n    }\n    lastRowList.value = dragInstanceTmp.toArray();\n  };\n\n  const registerOneLevelColDragEvent = (container: HTMLElement, recover: boolean) => {\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const options: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      dataIdAttr: 'data-colkey',\n      direction: 'vertical',\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      handle: `.${tableBaseClass.thCellInner}`,\n      onEnd: (evt: SortableEvent) => {\n        if (recover) {\n          // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n          dragInstanceTmp?.sort([...lastColList.value]);\n        }\n        const { oldIndex, newIndex, target: targetElement } = evt;\n        let currentIndex = recover ? oldIndex : newIndex;\n        let targetIndex = recover ? newIndex : oldIndex;\n        const oldElement = targetElement.children[currentIndex] as HTMLElement;\n        const newElement = targetElement.children[targetIndex] as HTMLElement;\n        const current = getColumnDataByKey(columns.value, oldElement.dataset.colkey);\n        const target = getColumnDataByKey(columns.value, newElement.dataset.colkey);\n        if (!current || !current.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(current)}`);\n        }\n        if (!target || !target.colKey) {\n          log.error('Table', `colKey is missing in ${JSON.stringify(target)}`);\n        }\n        // 寻找外部数据 props.columns 中的真正下标\n        currentIndex = getColumnIndexByKey(props.columns, current.colKey);\n        targetIndex = getColumnIndexByKey(props.columns, target.colKey);\n        const params: DragSortContext<TableRowData> = {\n          data: columns.value,\n          currentIndex,\n          current,\n          targetIndex,\n          target,\n          newData: swapDragArrayElement([...props.columns], currentIndex, targetIndex),\n          e: evt,\n          sort: 'col',\n        };\n        // currentData is going to be deprecated\n        params.currentData = params.newData;\n        props.onDragSort?.(params);\n      },\n    };\n    dragInstanceTmp = new Sortable(container, options);\n    return dragInstanceTmp;\n  };\n\n  // 列拖拽排序：涉及到多级表头、自定义显示列 等综合场景\n  const registerColDragEvent = (tableElement: HTMLElement) => {\n    if (!isColDraggable.value || !tableElement) return;\n    const trList = tableElement.querySelectorAll('thead > tr');\n    if (trList.length <= 1) {\n      const [container] = trList;\n      const dragInstanceTmp = registerOneLevelColDragEvent(container as HTMLElement, true);\n      lastColList.value = dragInstanceTmp?.toArray();\n    } else {\n      // 多级表头只抛出事件，不处理其他未知逻辑（如多层表头之间具体如何交换）\n      trList.forEach((container) => {\n        registerOneLevelColDragEvent(container as HTMLElement, false);\n      });\n    }\n  };\n\n  function setDragSortPrimaryTableRef(primaryTableElement: any) {\n    primaryTableRef.value = primaryTableElement;\n  }\n\n  function setDragSortColumns(val: BaseTableColumns) {\n    columns.value = val;\n  }\n\n  // 注册拖拽事件\n  watch([primaryTableRef], ([val]: [any]) => {\n    if (!val || !val.$el) return;\n    registerRowDragEvent(val.$el);\n    registerColDragEvent(val.$el);\n    /** 待表头节点准备完成后 */\n    const timer = setTimeout(() => {\n      if (val.$refs.affixHeaderRef) {\n        registerColDragEvent(val.$refs.affixHeaderRef);\n      }\n      clearTimeout(timer);\n    });\n  });\n\n  return {\n    isRowDraggable,\n    isRowHandlerDraggable,\n    isColDraggable,\n    setDragSortPrimaryTableRef,\n    setDragSortColumns,\n  };\n}\n"],"names":["useDragSort","props","context","toRefs","sortOnRowDraggable","dragSort","data","rowKey","useClassName","tableDraggableClasses","tableBaseClass","tableFullRowClasses","primaryTableRef","ref","columns","dragCol","computed","value","find","item","colKey","isRowDraggable","isRowHandlerDraggable","includes","isColDraggable","lastRowList","lastColList","log","error","watch","_slicedToArray","map","get","immediate","t","registerRowDragEvent","element","dragContainer","querySelector","console","dragInstanceTmp","baseOptions","animation","dragSortOptions","ghostClass","ghost","chosenClass","chosen","dragClass","dragging","filter","base","onMove","evt","hasClass","related","onEnd","sort","currentIndex","oldIndex","targetIndex","newIndex","isFunction","firstFullRow","h","slots","params","current","target","newData","swapDragArrayElement","e","currentData","onDragSort","Sortable","handle","toArray","registerOneLevelColDragEvent","container","recover","options","dataIdAttr","direction","thCellInner","targetElement","oldElement","children","newElement","getColumnDataByKey","dataset","colkey","JSON","stringify","getColumnIndexByKey","registerColDragEvent","tableElement","trList","querySelectorAll","length","forEach","setDragSortPrimaryTableRef","primaryTableElement","setDragSortColumns","val","$el","timer","setTimeout","$refs","affixHeaderRef","clearTimeout"],"mappings":"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"}