/// <reference types="lodash" />
import { PropType } from 'vue';
import { TNode } from '../common';
import { TooltipProps } from '../tooltip';
export interface EllipsisProps {
    content: string | TNode;
    default: string | TNode;
    tooltipContent: string | number | TNode;
    placement: TooltipProps['placement'];
    attach: () => HTMLElement;
    tooltipProps: TooltipProps;
    zIndex: number;
}
declare const _default: import("vue").DefineComponent<{
    content: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    tooltipContent: {
        type: PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placement: PropType<import("..").PopupPlacement | "mouse">;
    attach: PropType<() => HTMLElement>;
    tooltipProps: PropType<import("../tooltip").TdTooltipProps>;
    zIndex: NumberConstructor;
}, {
    root: import("vue").Ref<any>;
    isOverflow: import("vue").Ref<boolean>;
    ellipsisClasses: import("vue").ComputedRef<string[]>;
    onMouseAround: import("lodash").DebouncedFunc<(e: MouseEvent) => void>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    tooltipContent: {
        type: PropType<string | number | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placement: PropType<import("..").PopupPlacement | "mouse">;
    attach: PropType<() => HTMLElement>;
    tooltipProps: PropType<import("../tooltip").TdTooltipProps>;
    zIndex: NumberConstructor;
}>>, {}>;
export default _default;
