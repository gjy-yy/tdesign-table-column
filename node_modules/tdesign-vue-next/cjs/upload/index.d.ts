import './style';
export * from './interface';
export declare const Upload: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            max: number;
            name: string;
            action: string;
            method: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
            draggable: boolean;
            disabled: boolean;
            multiple: boolean;
            placeholder: string;
            accept: string;
            modelValue: import("./type").UploadFile[];
            tips: string;
            theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
            files: import("./type").UploadFile[];
            autoUpload: boolean;
            showUploadProgress: boolean;
            allowUploadDuplicateFile: boolean;
            withCredentials: boolean;
            isBatchUpload: boolean;
            uploadAllFilesInOneRequest: boolean;
            useMockProgress: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            accept: {
                type: StringConstructor;
                default: string;
            };
            action: {
                type: StringConstructor;
                default: string;
            };
            allowUploadDuplicateFile: BooleanConstructor;
            autoUpload: {
                type: BooleanConstructor;
                default: boolean;
            };
            beforeUpload: {
                type: import("vue").PropType<(file: File | import("./type").UploadFile) => boolean | Promise<boolean>>;
            };
            data: {
                type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            draggable: BooleanConstructor;
            fileListDisplay: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            files: {
                type: import("vue").PropType<import("./type").UploadFile[]>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").UploadFile[]>;
                default: any;
            };
            defaultFiles: {
                type: import("vue").PropType<import("./type").UploadFile[]>;
            };
            format: {
                type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
            };
            formatResponse: {
                type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
            };
            headers: {
                type: import("vue").PropType<{
                    [key: string]: string;
                }>;
            };
            isBatchUpload: BooleanConstructor;
            locale: {
                type: import("vue").PropType<import("..").UploadConfig>;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            method: {
                type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
                default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
                validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
            };
            multiple: BooleanConstructor;
            name: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            requestMethod: {
                type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
            };
            showUploadProgress: {
                type: BooleanConstructor;
                default: boolean;
            };
            sizeLimit: {
                type: import("vue").PropType<number | import("./type").SizeLimitObj>;
            };
            theme: {
                type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
                default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
                validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
            };
            tips: {
                type: StringConstructor;
                default: string;
            };
            trigger: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue)>;
            };
            uploadAllFilesInOneRequest: BooleanConstructor;
            useMockProgress: {
                type: BooleanConstructor;
                default: boolean;
            };
            withCredentials: BooleanConstructor;
            onCancelUpload: import("vue").PropType<() => void>;
            onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
            onDragenter: import("vue").PropType<(context: {
                e: DragEvent;
            }) => void>;
            onDragleave: import("vue").PropType<(context: {
                e: DragEvent;
            }) => void>;
            onDrop: import("vue").PropType<(context: {
                e: DragEvent;
            }) => void>;
            onFail: import("vue").PropType<(options: {
                e: ProgressEvent<EventTarget>;
                file: import("./type").UploadFile;
            }) => void>;
            onPreview: import("vue").PropType<(options: {
                file: import("./type").UploadFile;
                e: MouseEvent;
            }) => void>;
            onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
            onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
            onSelectChange: import("vue").PropType<(files: import("./type").UploadFile[]) => void>;
            onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "max" | "name" | "action" | "method" | "draggable" | "disabled" | "multiple" | "placeholder" | "accept" | "modelValue" | "tips" | "theme" | "files" | "autoUpload" | "showUploadProgress" | "allowUploadDuplicateFile" | "withCredentials" | "isBatchUpload" | "uploadAllFilesInOneRequest" | "useMockProgress">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            accept: {
                type: StringConstructor;
                default: string;
            };
            action: {
                type: StringConstructor;
                default: string;
            };
            allowUploadDuplicateFile: BooleanConstructor;
            autoUpload: {
                type: BooleanConstructor;
                default: boolean;
            };
            beforeUpload: {
                type: import("vue").PropType<(file: File | import("./type").UploadFile) => boolean | Promise<boolean>>;
            };
            data: {
                type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
            };
            default: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            };
            disabled: BooleanConstructor;
            draggable: BooleanConstructor;
            fileListDisplay: {
                type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
            };
            files: {
                type: import("vue").PropType<import("./type").UploadFile[]>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").UploadFile[]>;
                default: any;
            };
            defaultFiles: {
                type: import("vue").PropType<import("./type").UploadFile[]>;
            };
            format: {
                type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
            };
            formatResponse: {
                type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
            };
            headers: {
                type: import("vue").PropType<{
                    [key: string]: string;
                }>;
            };
            isBatchUpload: BooleanConstructor;
            locale: {
                type: import("vue").PropType<import("..").UploadConfig>;
            };
            max: {
                type: NumberConstructor;
                default: number;
            };
            method: {
                type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
                default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
                validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
            };
            multiple: BooleanConstructor;
            name: {
                type: StringConstructor;
                default: string;
            };
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            requestMethod: {
                type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
            };
            showUploadProgress: {
                type: BooleanConstructor;
                default: boolean;
            };
            sizeLimit: {
                type: import("vue").PropType<number | import("./type").SizeLimitObj>;
            };
            theme: {
                type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
                default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
                validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
            };
            tips: {
                type: StringConstructor;
                default: string;
            };
            trigger: {
                type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue)>;
            };
            uploadAllFilesInOneRequest: BooleanConstructor;
            useMockProgress: {
                type: BooleanConstructor;
                default: boolean;
            };
            withCredentials: BooleanConstructor;
            onCancelUpload: import("vue").PropType<() => void>;
            onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
            onDragenter: import("vue").PropType<(context: {
                e: DragEvent;
            }) => void>;
            onDragleave: import("vue").PropType<(context: {
                e: DragEvent;
            }) => void>;
            onDrop: import("vue").PropType<(context: {
                e: DragEvent;
            }) => void>;
            onFail: import("vue").PropType<(options: {
                e: ProgressEvent<EventTarget>;
                file: import("./type").UploadFile;
            }) => void>;
            onPreview: import("vue").PropType<(options: {
                file: import("./type").UploadFile;
                e: MouseEvent;
            }) => void>;
            onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
            onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
            onSelectChange: import("vue").PropType<(files: import("./type").UploadFile[]) => void>;
            onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            max: number;
            name: string;
            action: string;
            method: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
            draggable: boolean;
            disabled: boolean;
            multiple: boolean;
            placeholder: string;
            accept: string;
            modelValue: import("./type").UploadFile[];
            tips: string;
            theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
            files: import("./type").UploadFile[];
            autoUpload: boolean;
            showUploadProgress: boolean;
            allowUploadDuplicateFile: boolean;
            withCredentials: boolean;
            isBatchUpload: boolean;
            uploadAllFilesInOneRequest: boolean;
            useMockProgress: boolean;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        accept: {
            type: StringConstructor;
            default: string;
        };
        action: {
            type: StringConstructor;
            default: string;
        };
        allowUploadDuplicateFile: BooleanConstructor;
        autoUpload: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeUpload: {
            type: import("vue").PropType<(file: File | import("./type").UploadFile) => boolean | Promise<boolean>>;
        };
        data: {
            type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        draggable: BooleanConstructor;
        fileListDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        files: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: any;
        };
        defaultFiles: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
        };
        format: {
            type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
        };
        formatResponse: {
            type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
        };
        headers: {
            type: import("vue").PropType<{
                [key: string]: string;
            }>;
        };
        isBatchUpload: BooleanConstructor;
        locale: {
            type: import("vue").PropType<import("..").UploadConfig>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        method: {
            type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
            default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
            validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
        };
        multiple: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        requestMethod: {
            type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
        };
        showUploadProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        sizeLimit: {
            type: import("vue").PropType<number | import("./type").SizeLimitObj>;
        };
        theme: {
            type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
            default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
            validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
        };
        tips: {
            type: StringConstructor;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue)>;
        };
        uploadAllFilesInOneRequest: BooleanConstructor;
        useMockProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        withCredentials: BooleanConstructor;
        onCancelUpload: import("vue").PropType<() => void>;
        onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
        onDragenter: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDragleave: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onFail: import("vue").PropType<(options: {
            e: ProgressEvent<EventTarget>;
            file: import("./type").UploadFile;
        }) => void>;
        onPreview: import("vue").PropType<(options: {
            file: import("./type").UploadFile;
            e: MouseEvent;
        }) => void>;
        onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
        onSelectChange: import("vue").PropType<(files: import("./type").UploadFile[]) => void>;
        onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: import("vue").PropType<(file: File | import("./type").UploadFile) => boolean | Promise<boolean>>;
    };
    data: {
        type: import("vue").PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    fileListDisplay: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    files: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: any;
    };
    defaultFiles: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
    };
    format: {
        type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
    };
    formatResponse: {
        type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
    };
    headers: {
        type: import("vue").PropType<{
            [key: string]: string;
        }>;
    };
    isBatchUpload: BooleanConstructor;
    locale: {
        type: import("vue").PropType<import("..").UploadConfig>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
        default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
        validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requestMethod: {
        type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
    };
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizeLimit: {
        type: import("vue").PropType<number | import("./type").SizeLimitObj>;
    };
    theme: {
        type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
    };
    tips: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue)>;
    };
    uploadAllFilesInOneRequest: BooleanConstructor;
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: import("vue").PropType<() => void>;
    onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
    onDragenter: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDragleave: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDrop: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onFail: import("vue").PropType<(options: {
        e: ProgressEvent<EventTarget>;
        file: import("./type").UploadFile;
    }) => void>;
    onPreview: import("vue").PropType<(options: {
        file: import("./type").UploadFile;
        e: MouseEvent;
    }) => void>;
    onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
    onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
    onSelectChange: import("vue").PropType<(files: import("./type").UploadFile[]) => void>;
    onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    name: string;
    action: string;
    method: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
    draggable: boolean;
    disabled: boolean;
    multiple: boolean;
    placeholder: string;
    accept: string;
    modelValue: import("./type").UploadFile[];
    tips: string;
    theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
    files: import("./type").UploadFile[];
    autoUpload: boolean;
    showUploadProgress: boolean;
    allowUploadDuplicateFile: boolean;
    withCredentials: boolean;
    isBatchUpload: boolean;
    uploadAllFilesInOneRequest: boolean;
    useMockProgress: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default Upload;
