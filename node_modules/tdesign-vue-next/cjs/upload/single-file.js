/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var loading_index = require('../loading/index.js');
var upload_props = require('./props.js');
var upload_util = require('./util.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('../loading/directive.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../utils/dom.js');
require('../_chunks/dep-68610cdc.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var SingleFileProps = {
  file: {
    type: Object,
    "default": function _default() {
      return null;
    }
  },
  loadingFile: {
    type: Object,
    "default": function _default() {
      return null;
    }
  },
  percent: {
    type: Number
  },
  showUploadProgress: upload_props["default"].showUploadProgress,
  theme: upload_props["default"].theme,
  placeholder: upload_props["default"].placeholder,
  onRemove: Function
};
var SingleFile = vue.defineComponent({
  name: "TUploadSingleFile",
  props: SingleFileProps,
  setup: function setup(props2) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();

    var _useConfig = configProvider_useConfig.useConfig("upload"),
        prefix = _useConfig.classPrefix;

    var UPLOAD_NAME = hooks_useConfig.usePrefixClass("upload");

    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
      CloseCircleFilledIcon: tdesignIconsVueNext.CloseCircleFilledIcon,
      ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon,
      CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon
    }),
        CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon;

    var showProgress = vue.computed(function () {
      return !!(props2.loadingFile && props2.loadingFile.status === "progress");
    });
    var inputName = vue.computed(function () {
      var fileName = props2.file && props2.file.name;
      var loadingName = props2.loadingFile && props2.loadingFile.name;
      return showProgress.value ? loadingName : fileName;
    });
    var inputText = vue.computed(function () {
      return inputName.value || props2.placeholder;
    });
    var inputTextClass = vue.computed(function () {
      return ["".concat(prefix.value, "-input__inner"), _defineProperty__default["default"]({}, "".concat(UPLOAD_NAME.value, "__placeholder"), !inputName.value)];
    });
    var classes = vue.computed(function () {
      return ["".concat(UPLOAD_NAME.value, "__single"), "".concat(UPLOAD_NAME.value, "__single-").concat(props2.theme)];
    });

    var renderProgress = function renderProgress() {
      if (props2.loadingFile.status === "fail") {
        return vue.createVNode(ErrorCircleFilledIcon, null, null);
      }

      if (props2.showUploadProgress) {
        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-progress")
        }, [vue.createVNode(loading_index.Loading, null, null), vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-percent")
        }, [Math.min(props2.percent, 99), "%"])]);
      }
    };

    var renderFilePreviewAsText = function renderFilePreviewAsText() {
      if (!inputName.value || props2.theme !== "file") return;
      return vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__single-display-text ").concat(UPLOAD_NAME.value, "__display-text--margin")
      }, [vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-name")
      }, [inputName.value]), showProgress.value ? renderProgress() : vue.createVNode(CloseCircleFilledIcon, {
        "class": "".concat(UPLOAD_NAME.value, "__icon-delete"),
        "onClick": function onClick(_ref2) {
          var e = _ref2.e;
          return props2.onRemove(e);
        }
      }, null)]);
    };

    var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
      if (props2.theme !== "file-input") return;

      var renderResult = function renderResult() {
        if (!!props2.loadingFile && props2.loadingFile.status === "fail") {
          return vue.createVNode(ErrorCircleFilledIcon, null, null);
        }

        if (props2.file && props2.file.name && !props2.loadingFile) {
          return vue.createVNode(CheckCircleFilledIcon, null, null);
        }

        return "";
      };

      return vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__single-input-preview ").concat(prefix.value, "-input")
      }, [vue.createVNode("div", {
        "class": inputTextClass.value
      }, [vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-input-text")
      }, [upload_util.abridgeName(inputText.value, 4, 6)]), showProgress.value && renderProgress(), renderResult()])]);
    };

    return function () {
      return vue.createVNode("div", {
        "class": classes.value
      }, [renderFilePreviewAsInput(), renderTNodeJSX("default"), renderFilePreviewAsText()]);
    };
  }
});

exports["default"] = SingleFile;
//# sourceMappingURL=single-file.js.map
