/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var button_index = require('../button/index.js');
var loading_index = require('../loading/index.js');
var upload_props = require('./props.js');
var upload_util = require('./util.js');
var hooks_tnode = require('../hooks/tnode.js');
var form_hooks = require('../form/hooks.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../utils/set-style.js');
require('../loading/directive.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('@babel/runtime/helpers/slicedToArray');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../utils/dom.js');
require('../_chunks/dep-68610cdc.js');
require('lodash/isString');
require('../utils/easing.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isFunction');
require('lodash/isObject');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var FlowList = vue.defineComponent({
  name: "TUploadFlowList",
  props: {
    showUploadProgress: upload_props["default"].showUploadProgress,
    allowUploadDuplicateFile: upload_props["default"].allowUploadDuplicateFile,
    placeholder: upload_props["default"].placeholder,
    autoUpload: upload_props["default"].autoUpload,
    disabled: upload_props["default"].disabled,
    theme: upload_props["default"].theme,
    batchUpload: upload_props["default"].isBatchUpload,
    files: upload_props["default"].files,
    toUploadFiles: Array,
    onRemove: Function,
    onUpload: Function,
    onCancel: Function,
    onChange: Function,
    onDragleave: Function,
    onDragenter: Function,
    onImgPreview: Function,
    locale: {
      type: Object,
      "default": function _default() {
        return null;
      }
    }
  },
  setup: function setup(props2) {
    var target = vue.ref(null);
    var dragActive = vue.ref(false);
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var disabled = form_hooks.useFormDisabled();

    var _useConfig = configProvider_useConfig.useConfig("upload"),
        prefix = _useConfig.classPrefix,
        globalConfig = _useConfig.globalConfig;

    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
      TimeFilledIcon: tdesignIconsVueNext.TimeFilledIcon,
      CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon,
      ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon,
      DeleteIcon: tdesignIconsVueNext.DeleteIcon,
      BrowseIcon: tdesignIconsVueNext.BrowseIcon
    }),
        TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
        CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
        DeleteIcon = _useGlobalIcon.DeleteIcon,
        BrowseIcon = _useGlobalIcon.BrowseIcon;

    var UPLOAD_NAME = hooks_useConfig.usePrefixClass("upload");

    var _useCommonClassName = hooks_useConfig.useCommonClassName(),
        SIZE = _useCommonClassName.SIZE;

    var waitingUploadFiles = vue.computed(function () {
      var list = [];
      props2.toUploadFiles.forEach(function (item) {
        if (!props2.allowUploadDuplicateFile) {
          var r = props2.files.filter(function (t) {
            return t.name === item.name;
          });

          if (!r.length) {
            list.push(item);
          }
        } else {
          list.push(item);
        }
      });
      return list;
    });
    var showInitial = vue.computed(function () {
      var isWaitingEmpty = !waitingUploadFiles.value || !waitingUploadFiles.value.length;
      return (!props2.files || !props2.files.length) && isWaitingEmpty;
    });
    var listFiles = vue.computed(function () {
      if (!props2.files || !props2.files.length) return props2.toUploadFiles;
      return props2.files.concat(waitingUploadFiles.value);
    });
    var failedList = vue.computed(function () {
      return props2.toUploadFiles.filter(function (file) {
        return file.status === "fail";
      });
    });
    var processList = vue.computed(function () {
      return props2.toUploadFiles.filter(function (file) {
        return file.status === "progress";
      });
    });
    var isUploading = vue.computed(function () {
      return !!processList.value.length;
    });
    var allowUpload = vue.computed(function () {
      return Boolean(waitingUploadFiles.value && waitingUploadFiles.value.length) && !isUploading.value;
    });
    var uploadText = vue.computed(function () {
      var _localeFromProps$trig, _localeFromProps$trig2;

      var localeFromProps = props2.locale;
      if (isUploading.value) return "".concat(globalConfig.value.progress.uploadingText, "...");
      return failedList.value && failedList.value.length ? (localeFromProps === null || localeFromProps === void 0 ? void 0 : (_localeFromProps$trig = localeFromProps.triggerUploadText) === null || _localeFromProps$trig === void 0 ? void 0 : _localeFromProps$trig.reupload) || globalConfig.value.triggerUploadText.reupload : (localeFromProps === null || localeFromProps === void 0 ? void 0 : (_localeFromProps$trig2 = localeFromProps.triggerUploadText) === null || _localeFromProps$trig2 === void 0 ? void 0 : _localeFromProps$trig2.normal) || globalConfig.value.triggerUploadText.normal;
    });

    var handleDrop = function handleDrop(event) {
      event.preventDefault();
      props2.onChange(event.dataTransfer.files);
      props2.onDragleave(event);
      dragActive.value = false;
    };

    var handleDragenter = function handleDragenter(event) {
      target.value = event.target;
      event.preventDefault();
      props2.onDragenter(event);
      dragActive.value = true;
    };

    var handleDragleave = function handleDragleave(event) {
      if (target.value !== event.target) return;
      event.preventDefault();
      props2.onDragleave(event);
      dragActive.value = false;
    };

    var handleDragover = function handleDragover(event) {
      event.preventDefault();
    };

    var renderDragger = function renderDragger() {
      return vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-empty"),
        "onDrop": handleDrop,
        "onDragenter": handleDragenter,
        "onDragover": handleDragover,
        "onDragleave": handleDragleave
      }, [dragActive.value ? globalConfig.value.dragger.dragDropText : globalConfig.value.dragger.clickAndDragText]);
    };

    var getStatusMap = function getStatusMap(file) {
      var _props2$locale;

      var localeProgressFromProps = (_props2$locale = props2.locale) === null || _props2$locale === void 0 ? void 0 : _props2$locale.progress;
      var iconMap = {
        success: vue.createVNode(CheckCircleFilledIcon, null, null),
        fail: vue.createVNode(ErrorCircleFilledIcon, null, null),
        progress: vue.createVNode(loading_index.Loading, null, null),
        waiting: vue.createVNode(TimeFilledIcon, null, null)
      };
      var textMap = {
        success: (localeProgressFromProps === null || localeProgressFromProps === void 0 ? void 0 : localeProgressFromProps.successText) || globalConfig.value.progress.successText,
        fail: (localeProgressFromProps === null || localeProgressFromProps === void 0 ? void 0 : localeProgressFromProps.failText) || globalConfig.value.progress.failText,
        progress: "".concat((localeProgressFromProps === null || localeProgressFromProps === void 0 ? void 0 : localeProgressFromProps.uploadingText) || globalConfig.value.progress.uploadingText, " ").concat(Math.min(file.percent, 99), "%"),
        waiting: (localeProgressFromProps === null || localeProgressFromProps === void 0 ? void 0 : localeProgressFromProps.waitingText) || globalConfig.value.progress.waitingText
      };
      return {
        iconMap: iconMap,
        textMap: textMap
      };
    };

    var renderStatus = function renderStatus(file) {
      if (!props2.showUploadProgress) return;

      var _getStatusMap = getStatusMap(file),
          iconMap = _getStatusMap.iconMap,
          textMap = _getStatusMap.textMap;

      return vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-status")
      }, [iconMap[file.status], vue.createVNode("span", null, [textMap[file.status]])]);
    };

    var renderNormalActionCol = function renderNormalActionCol(file, index) {
      var _props2$locale2, _props2$locale2$trigg;

      return vue.createVNode("td", null, [vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
        "onClick": function onClick(e) {
          return props2.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, [((_props2$locale2 = props2.locale) === null || _props2$locale2 === void 0 ? void 0 : (_props2$locale2$trigg = _props2$locale2.triggerUploadText) === null || _props2$locale2$trigg === void 0 ? void 0 : _props2$locale2$trigg["delete"]) || globalConfig.value.triggerUploadText["delete"]])]);
    };

    var renderBatchActionCol = function renderBatchActionCol(index) {
      var _props2$locale3, _props2$locale3$trigg;

      return index === 0 ? vue.createVNode("td", {
        "rowspan": listFiles.value.length,
        "class": "".concat(UPLOAD_NAME.value, "__flow-table__batch-row")
      }, [vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
        "onClick": function onClick(e) {
          return props2.onRemove({
            e: e,
            index: -1,
            file: null
          });
        }
      }, [((_props2$locale3 = props2.locale) === null || _props2$locale3 === void 0 ? void 0 : (_props2$locale3$trigg = _props2$locale3.triggerUploadText) === null || _props2$locale3$trigg === void 0 ? void 0 : _props2$locale3$trigg["delete"]) || globalConfig.value.triggerUploadText["delete"]])]) : "";
    };

    var renderFileList = function renderFileList() {
      var _props2$locale4, _props2$locale4$file, _props2$locale5, _props2$locale5$file, _props2$locale6, _props2$locale6$file, _props2$locale7, _props2$locale7$file;

      return props2.theme === "file-flow" && vue.createVNode("table", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-table")
      }, [vue.createVNode("tr", null, [vue.createVNode("th", null, [((_props2$locale4 = props2.locale) === null || _props2$locale4 === void 0 ? void 0 : (_props2$locale4$file = _props2$locale4.file) === null || _props2$locale4$file === void 0 ? void 0 : _props2$locale4$file.fileNameText) || globalConfig.value.file.fileNameText]), vue.createVNode("th", null, [((_props2$locale5 = props2.locale) === null || _props2$locale5 === void 0 ? void 0 : (_props2$locale5$file = _props2$locale5.file) === null || _props2$locale5$file === void 0 ? void 0 : _props2$locale5$file.fileSizeText) || globalConfig.value.file.fileSizeText]), vue.createVNode("th", null, [((_props2$locale6 = props2.locale) === null || _props2$locale6 === void 0 ? void 0 : (_props2$locale6$file = _props2$locale6.file) === null || _props2$locale6$file === void 0 ? void 0 : _props2$locale6$file.fileStatusText) || globalConfig.value.file.fileStatusText]), vue.createVNode("th", null, [((_props2$locale7 = props2.locale) === null || _props2$locale7 === void 0 ? void 0 : (_props2$locale7$file = _props2$locale7.file) === null || _props2$locale7$file === void 0 ? void 0 : _props2$locale7$file.fileOperationText) || globalConfig.value.file.fileOperationText])]), showInitial.value && vue.createVNode("tr", null, [vue.createVNode("td", {
        "colspan": 4
      }, [renderDragger()])]), listFiles.value.map(function (file, index) {
        var showBatchUploadAction = props2.batchUpload && props2.toUploadFiles.length === 0;
        return vue.createVNode("tr", null, [vue.createVNode("td", null, [upload_util.abridgeName(file.name, 7, 10)]), vue.createVNode("td", null, [upload_util.returnFileSize(file.size)]), vue.createVNode("td", null, [renderStatus(file)]), showBatchUploadAction ? renderBatchActionCol(index) : renderNormalActionCol(file, index)]);
      })]);
    };

    var renderImgItem = function renderImgItem(file, index) {
      var _getStatusMap2 = getStatusMap(file),
          iconMap = _getStatusMap2.iconMap,
          textMap = _getStatusMap2.textMap;

      return vue.createVNode("li", {
        "class": "".concat(UPLOAD_NAME.value, "__card-item")
      }, [vue.createVNode("div", {
        "class": ["".concat(UPLOAD_NAME.value, "__card-content"), _defineProperty__default["default"]({}, "".concat(prefix.value, "-is-bordered"), file.status !== "waiting")]
      }, [["fail", "progress"].includes(file.status) && vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-status-wrap")
      }, [iconMap[file.status], vue.createVNode("p", null, [textMap[file.status]])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && vue.createVNode("img", {
        "class": "".concat(UPLOAD_NAME.value, "__card-image"),
        "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
      }, null), vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask")
      }, [file.url && vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
      }, [vue.createVNode(BrowseIcon, {
        "onClick": function onClick(_ref2) {
          var e = _ref2.e;
          return props2.onImgPreview(e, file);
        }
      }, null), vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider")
      }, null)]), !disabled.value && vue.createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
        "onClick": function onClick(e) {
          return props2.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, [vue.createVNode(DeleteIcon, null, null)])])]), vue.createVNode("p", {
        "class": "".concat(UPLOAD_NAME.value, "__card-name")
      }, [upload_util.abridgeName(file.name)])]);
    };

    var renderImgList = function renderImgList() {
      return props2.theme === "image-flow" && vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-card-area"),
        "onDrop": handleDrop,
        "onDragenter": handleDragenter,
        "onDragover": handleDragover,
        "onDragleave": handleDragleave
      }, [showInitial.value && renderDragger(), !!listFiles.value.length && vue.createVNode("ul", {
        "class": "".concat(UPLOAD_NAME.value, "__card clearfix")
      }, [listFiles.value.map(function (file, index) {
        return renderImgItem(file, index);
      })])]);
    };

    var renderFooter = function renderFooter() {
      var _props2$locale8;

      return !props2.autoUpload && vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-bottom")
      }, [vue.createVNode(button_index.Button, {
        "theme": "default",
        "onClick": props2.onCancel,
        "disabled": !allowUpload.value
      }, {
        "default": function _default() {
          return [((_props2$locale8 = props2.locale) === null || _props2$locale8 === void 0 ? void 0 : _props2$locale8.cancelUploadText) || globalConfig.value.cancelUploadText];
        }
      }), vue.createVNode(button_index.Button, {
        "disabled": !allowUpload.value,
        "theme": "primary",
        "onClick": function onClick(e) {
          return props2.onUpload(waitingUploadFiles.value, e);
        }
      }, {
        "default": function _default() {
          return [uploadText.value];
        }
      })]);
    };

    return function () {
      return vue.createVNode("div", {
        "class": ["".concat(UPLOAD_NAME.value, "__flow"), "".concat(UPLOAD_NAME.value, "__flow-").concat(props2.theme)]
      }, [vue.createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-op")
      }, [renderTNodeJSX("default"), vue.createVNode("small", {
        "class": "".concat(SIZE.value.small, " ").concat(UPLOAD_NAME.value, "__flow-placeholder")
      }, [props2.placeholder])]), renderFileList(), renderImgList(), renderFooter()]);
    };
  }
});

exports["default"] = FlowList;
//# sourceMappingURL=flow-list.js.map
