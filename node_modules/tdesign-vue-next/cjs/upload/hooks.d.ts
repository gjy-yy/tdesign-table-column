import { ComputedRef } from 'vue';
import { TdUploadProps, UploadFile, UploadRemoveOptions, FlowRemoveContext, HTMLInputEvent, UploadCtxType } from './interface';
export declare const useComponentsStatus: (props: TdUploadProps, uploadCtx: UploadCtxType) => {
    showUploadList: ComputedRef<boolean>;
    showTips: ComputedRef<boolean>;
    showErrorMsg: ComputedRef<boolean>;
    singleDraggable: ComputedRef<boolean>;
};
export declare const useImgPreview: (props: TdUploadProps) => {
    showImageViewUrl: import("vue").Ref<string>;
    showImageViewDialog: import("vue").Ref<boolean>;
    handlePreviewImg: (event: MouseEvent, file?: UploadFile) => void;
    cancelPreviewImgDialog: () => void;
};
export declare const useDragger: (props: TdUploadProps, disabled: ComputedRef<boolean>) => {
    handleDragenter: (e: DragEvent) => void;
    handleDragleave: (e: DragEvent) => void;
    dragActive: import("vue").Ref<boolean>;
};
export declare const useRemove: (props: TdUploadProps, uploadCtx: UploadCtxType) => {
    handleFileInputRemove: (e: MouseEvent) => void;
    handleSingleRemove: (e: MouseEvent) => void;
    handleMultipleRemove: (options: UploadRemoveOptions) => void;
    handleListRemove: (context: FlowRemoveContext) => void;
};
export declare const useActions: (props: TdUploadProps, uploadCtx: UploadCtxType, disabled: ComputedRef<boolean>) => {
    handleChange: (event: HTMLInputEvent) => void;
    multipleUpload: (currentFiles: Array<UploadFile>) => void;
    triggerUpload: () => void;
    cancelUpload: () => void;
    handleDragChange: (files: FileList) => void;
    upload: (currentFiles: UploadFile | UploadFile[]) => Promise<void>;
    inputRef: any;
};
export declare const useBatchUpload: (props: TdUploadProps) => {
    uploadInOneRequest: ComputedRef<boolean>;
    canBatchUpload: ComputedRef<boolean>;
};
