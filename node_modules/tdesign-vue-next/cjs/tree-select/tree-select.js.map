{"version":3,"file":"tree-select.js","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { defineComponent, ref, reactive, computed, watch, onMounted, toRefs } from 'vue';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\n\nimport Tree, { TreeProps, TreeNodeModel, TreeNodeValue } from '../tree';\nimport SelectInput from '../select-input';\nimport { TagInputChangeContext } from '../tag-input';\nimport { InputValue } from '../input';\nimport FakeArrow from '../common-components/fake-arrow';\n\nimport { INodeOptions } from './interface';\nimport { TreeSelectValue, TdTreeSelectProps, TreeSelectValueChangeTrigger } from './type';\nimport { TreeOptionData } from '../common';\nimport props from './props';\n\n// hooks\nimport { usePrefixClass, useConfig } from '../hooks/useConfig';\nimport { useFormDisabled } from '../form/hooks';\nimport { useTNodeJSX, useTNodeDefault } from '../hooks/tnode';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\n\nexport default defineComponent({\n  name: 'TTreeSelect',\n  props,\n  setup(props: TdTreeSelectProps, { slots }) {\n    const renderTNodeJSX = useTNodeJSX();\n    const renderDefaultTNode = useTNodeDefault();\n    const classPrefix = usePrefixClass();\n    const { globalConfig } = useConfig('treeSelect');\n    const formDisabled = useFormDisabled();\n\n    // ref\n    const treeRef = ref(null);\n\n    // data\n    const filterByText = ref(null);\n    const actived = ref([]);\n    const expanded = ref([]);\n    const nodeInfo = ref(null);\n    const treeKey = ref(0);\n\n    // model\n    const { value, modelValue, popupVisible, inputValue } = toRefs(props);\n    const [treeSelectValue, setTreeSelectValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    const [innerVisible, setInnerVisible] = useDefaultValue(\n      popupVisible,\n      false,\n      props.onPopupVisibleChange,\n      'popupVisible',\n    );\n    const [innerInputValue, setInnerInputValue] = useDefaultValue(\n      inputValue,\n      props.defaultInputValue,\n      props.onInputChange,\n      'inputValue',\n    );\n\n    // watch\n    watch(treeSelectValue, async () => {\n      await changeNodeInfo();\n      if (!props.multiple) {\n        actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];\n      }\n    });\n    watch(\n      () => props.data,\n      async () => {\n        await changeNodeInfo();\n        treeRerender();\n      },\n    );\n\n    // computed\n    const tDisabled = computed(() => {\n      return formDisabled.value || props.disabled;\n    });\n\n    const inputPlaceholder = computed(\n      () => (innerVisible.value && nodeInfo.value?.label) || props.placeholder || globalConfig.value.placeholder,\n    );\n\n    const popupClass = computed(() => {\n      return [\n        `${classPrefix.value}-select__dropdown-inner`,\n        `${classPrefix.value}-select__dropdown`,\n        'narrow-scrollbar',\n      ];\n    });\n\n    const isObjectValue = computed(() => props.valueType === 'object');\n\n    const checked = computed((): Array<TreeNodeValue> => {\n      if (props.multiple) {\n        if (isObjectValue.value) {\n          return isArray(treeSelectValue.value)\n            ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n            : [];\n        }\n        return isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => item as TreeNodeValue)\n          : [];\n      }\n      return [];\n    });\n\n    const multiLimitDisabled = computed(() => {\n      return (\n        props.multiple &&\n        !!props.max &&\n        isArray(treeSelectValue.value) &&\n        props.max <= (treeSelectValue.value as Array<TreeSelectValue>).length\n      );\n    });\n\n    const realLabel = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.label || 'label';\n      }\n      return 'label';\n    });\n\n    const realValue = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.value || 'value';\n      }\n      return 'value';\n    });\n\n    const realChildren = computed(() => {\n      if (!isEmpty(props.treeProps) && !isEmpty((props.treeProps as TreeProps).keys)) {\n        return (props.treeProps as TreeProps).keys.children || 'children';\n      }\n      return 'children';\n    });\n\n    // timelifes\n    onMounted(async () => {\n      if (!treeSelectValue.value && props.defaultValue) {\n        await change(props.defaultValue, null, 'uncheck');\n      }\n      if (isObjectValue.value) {\n        actived.value = isArray(treeSelectValue.value)\n          ? (treeSelectValue.value as Array<TreeSelectValue>).map((item) => (item as INodeOptions).value)\n          : [(treeSelectValue.value as INodeOptions).value];\n      } else {\n        (actived.value as TreeSelectValue) = isArray(treeSelectValue.value)\n          ? treeSelectValue.value\n          : [treeSelectValue.value];\n      }\n      changeNodeInfo();\n    });\n\n    // methods\n\n    const change = (\n      valueParam: TreeSelectValue,\n      node: TreeNodeModel<TreeOptionData>,\n      trigger: TreeSelectValueChangeTrigger,\n    ) => {\n      setTreeSelectValue(valueParam, { node });\n      changeNodeInfo();\n      props.onChange?.(valueParam, { node, trigger });\n    };\n\n    const clear = (content: { e: MouseEvent }) => {\n      const defaultValue: TreeSelectValue = props.multiple ? [] : '';\n      actived.value = [];\n      change(defaultValue, null, 'clear');\n      props.onClear?.({ e: content.e });\n    };\n\n    const treeNodeChange = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent },\n    ) => {\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        current = valueParam.map((nodeValue) => getTreeNode(props.data, nodeValue));\n      }\n      change(current, context.node, 'check');\n    };\n\n    const treeNodeActive = (\n      valueParam: Array<TreeNodeValue>,\n      context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent },\n    ) => {\n      setInnerVisible(false);\n      // 多选模式屏蔽 Active 事件\n      if (props.multiple) {\n        return;\n      }\n      // 单选模式重复选择不清空\n      if (treeSelectValue.value === context.node.data[realValue.value]) {\n        return;\n      }\n      let current: TreeSelectValue = valueParam;\n      if (isObjectValue.value) {\n        const nodeValue = isEmpty(valueParam) ? '' : valueParam[0];\n        current = getTreeNode(props.data, nodeValue);\n      } else {\n        current = isEmpty(valueParam) ? '' : valueParam[0];\n      }\n      change(current, context.node, 'check');\n      actived.value = valueParam;\n    };\n\n    const treeNodeExpand = (valueParam: Array<TreeNodeValue>) => {\n      expanded.value = valueParam;\n    };\n\n    const treeNodeLoad = () => {\n      changeNodeInfo();\n    };\n\n    const inputChange = (value: InputValue): boolean => {\n      // 未打开状态不处理输入框输入\n      if (!innerVisible.value) {\n        props.onSearch?.(String(value));\n        return;\n      }\n      setInnerInputValue(value);\n      if (!value) {\n        filterByText.value = null;\n        return null;\n      }\n      filterByText.value = (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(props.filter)) {\n          const filter: boolean | Promise<boolean> = props.filter(String(value), node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[realLabel.value].indexOf(value) >= 0;\n      };\n      props.onSearch?.(String(value));\n    };\n\n    const tagChange = (value: string | number, context: TagInputChangeContext) => {\n      const { trigger, index } = context;\n      if (['tag-remove', 'backspace'].includes(trigger)) {\n        isArray(treeSelectValue.value) && (treeSelectValue.value as Array<TreeSelectValue>).splice(index, 1);\n      }\n      props.onRemove?.({ value, data: null, e: context && (context.e as MouseEvent) });\n      change(treeSelectValue.value, null, trigger as 'tag-remove' | 'backspace');\n    };\n\n    const changeNodeInfo = async () => {\n      await treeSelectValue.value;\n\n      if (!props.multiple) {\n        if (treeSelectValue.value || treeSelectValue.value === 0) {\n          nodeInfo.value = getSingleNodeInfo();\n        } else {\n          nodeInfo.value = '';\n        }\n      } else if (props.multiple) {\n        if (isArray(treeSelectValue.value)) {\n          nodeInfo.value = getMultipleNodeInfo();\n        } else {\n          nodeInfo.value = [];\n        }\n      } else {\n        nodeInfo.value = null;\n      }\n    };\n\n    const getSingleNodeInfo = () => {\n      const nodeValue = isObjectValue.value ? (treeSelectValue.value as INodeOptions).value : treeSelectValue.value;\n      if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n        if (!isEmpty(props.data)) {\n          const node = treeRef.value.getItem(nodeValue);\n          if (node) {\n            return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n          }\n        }\n        return { label: nodeValue, value: nodeValue };\n      }\n      const node = getTreeNode(props.data, nodeValue);\n      if (!node) {\n        return { label: nodeValue, value: nodeValue };\n      }\n      return node;\n    };\n\n    const getMultipleNodeInfo = () => {\n      return (treeSelectValue.value as Array<TreeSelectValue>).map((value) => {\n        const nodeValue = isObjectValue.value ? (value as INodeOptions).value : value;\n        if (treeRef.value && (props.treeProps as TreeProps)?.load) {\n          if (!isEmpty(props.data)) {\n            const node = treeRef.value.getItem(nodeValue);\n            if (node) {\n              return { label: node.data[realLabel.value], value: node.data[realValue.value] };\n            }\n          }\n          return { label: nodeValue, value: nodeValue };\n        }\n        const node = getTreeNode(props.data, nodeValue);\n        if (!node) {\n          return { label: nodeValue, value: nodeValue };\n        }\n        return node;\n      });\n    };\n    const getTreeNode = (data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectValue | null => {\n      for (let i = 0, len = data.length; i < len; i++) {\n        if (data[i][realValue.value] === targetValue) {\n          return { label: data[i][realLabel.value], value: data[i][realValue.value] };\n        }\n        if (data[i]?.[realChildren.value]) {\n          const result = getTreeNode(data[i]?.[realChildren.value], targetValue);\n          if (!isNil(result)) {\n            return result;\n          }\n        }\n      }\n      return null;\n    };\n\n    const treeRerender = () => {\n      treeKey.value += 1;\n    };\n\n    const renderTree = () => (\n      <Tree\n        ref={treeRef}\n        v-show={!props.loading}\n        key={treeKey.value}\n        value={[...checked.value]}\n        hover\n        data={props.data}\n        activable={!props.multiple}\n        checkable={props.multiple}\n        disabled={tDisabled.value || multiLimitDisabled.value}\n        size={props.size}\n        filter={filterByText.value}\n        icon={!filterByText.value}\n        actived={actived.value}\n        expanded={expanded.value}\n        activeMultiple={props.multiple}\n        onChange={treeNodeChange}\n        onActive={treeNodeActive}\n        onExpand={treeNodeExpand}\n        onLoad={treeNodeLoad}\n        expandOnClickNode\n        v-slots={{\n          empty: () =>\n            renderDefaultTNode('empty', {\n              defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.empty}</div>,\n            }),\n        }}\n        {...(props.treeProps as TdTreeSelectProps['treeProps'])}\n      />\n    );\n\n    const renderSuffixIcon = () => (\n      <FakeArrow\n        isActive={innerVisible.value}\n        disabled={props.disabled}\n        overlayClassName={{\n          [`${classPrefix.value}-fake-arrow--highlight`]: innerVisible.value,\n          [`${classPrefix.value}-fake-arrow--disable`]: props.disabled,\n        }}\n      />\n    );\n\n    return () => (\n      <SelectInput\n        class={`${classPrefix.value}-tree-select`}\n        value={nodeInfo.value}\n        inputValue={innerVisible.value ? innerInputValue.value : ''}\n        popupVisible={innerVisible.value}\n        disabled={tDisabled.value}\n        multiple={props.multiple}\n        loading={props.loading}\n        clearable={props.clearable}\n        autoWidth={props.autoWidth}\n        borderless={props.borderless}\n        readonly={props.readonly}\n        placeholder={inputPlaceholder.value}\n        allowInput={props.filterable || isFunction(props.filter)}\n        minCollapsedNum={props.minCollapsedNum}\n        collapsed-items={props.collapsedItems}\n        popupProps={{\n          overlayClassName: popupClass.value,\n          ...(props.popupProps as TdTreeSelectProps['popupProps']),\n        }}\n        inputProps={{\n          size: props.size,\n          ...(props.inputProps as TdTreeSelectProps['inputProps']),\n        }}\n        tagInputProps={{\n          size: props.size,\n        }}\n        tagProps={{\n          maxWidth: 300,\n          ...(props.tagProps as TdTreeSelectProps['tagProps']),\n        }}\n        label={() => renderTNodeJSX('prefixIcon')}\n        suffixIcon={() => renderSuffixIcon()}\n        onClear={clear}\n        onBlur={(value: InputValue, context: { e: FocusEvent }) => {\n          props.onBlur?.({ value, e: context.e });\n        }}\n        onFocus={(value: InputValue, context: { e: FocusEvent }) => {\n          props.onFocus?.({ value, e: context.e });\n        }}\n        valueDisplay={() =>\n          renderTNodeJSX('valueDisplay', {\n            params: props.multiple\n              ? {\n                  value: nodeInfo.value,\n                  onClose: (value: string | number, context: TagInputChangeContext) => {\n                    tagChange(value, context);\n                  },\n                }\n              : {\n                  value: nodeInfo.value || { [realLabel.value]: '', [realValue.value]: undefined },\n                },\n          })\n        }\n        v-slots={{\n          panel: () => (\n            <div>\n              <p\n                v-show={props.loading && !tDisabled.value}\n                class={`${classPrefix.value}-select-loading-tips ${classPrefix.value}-select__right-icon-polyfill`}\n              >\n                {renderDefaultTNode('loadingText', {\n                  defaultNode: <div class={`${classPrefix.value}-select__empty`}>{globalConfig.value.loadingText}</div>,\n                })}\n              </p>\n              {renderTree()}\n            </div>\n          ),\n          collapsedItems: slots.collapsedItems,\n        }}\n        onInputChange={inputChange}\n        onTagChange={tagChange}\n        onPopupVisibleChange={(state: boolean) => setInnerVisible(state)}\n        {...(props.selectInputProps as TdTreeSelectProps['selectInputProps'])}\n      />\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","renderTNodeJSX","useTNodeJSX","renderDefaultTNode","useTNodeDefault","classPrefix","usePrefixClass","useConfig","globalConfig","formDisabled","useFormDisabled","treeRef","ref","filterByText","actived","expanded","nodeInfo","treeKey","toRefs","value","modelValue","popupVisible","inputValue","useVModel","defaultValue","onChange","_slicedToArray","treeSelectValue","setTreeSelectValue","useDefaultValue","onPopupVisibleChange","innerVisible","setInnerVisible","defaultInputValue","onInputChange","innerInputValue","setInnerInputValue","watch","_asyncToGenerator","_regeneratorRuntime","changeNodeInfo","multiple","data","treeRerender","tDisabled","computed","disabled","inputPlaceholder","label","placeholder","popupClass","isObjectValue","valueType","checked","isArray","map","item","multiLimitDisabled","max","length","realLabel","isEmpty","treeProps","keys","realValue","realChildren","children","onMounted","change","valueParam","node","trigger","clear","content","onClear","e","treeNodeChange","context","current","nodeValue","getTreeNode","treeNodeActive","treeNodeExpand","treeNodeLoad","inputChange","onSearch","String","isFunction","filter","isBoolean","indexOf","tagChange","index","includes","splice","onRemove","getSingleNodeInfo","getMultipleNodeInfo","load","getItem","targetValue","i","len","result","isNil","renderTree","_withDirectives","_createVNode","Tree","_mergeProps","size","empty","defaultNode","_vShow","loading","renderSuffixIcon","FakeArrow","_defineProperty","SelectInput","clearable","autoWidth","borderless","readonly","filterable","minCollapsedNum","collapsedItems","overlayClassName","popupProps","inputProps","maxWidth","tagProps","onBlur","onFocus","params","onClose","state","selectInputProps","panel","loadingText"],"mappings":"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"}