{"version":3,"file":"tree-node.js","sources":["../../../../src/_common/js/tree/tree-node.ts"],"sourcesContent":["import uniqueId from 'lodash/uniqueId';\nimport isNil from 'lodash/isNil';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst defaultStatus = {\n  expandMutex: false,\n  activable: false,\n  checkable: false,\n  disabled: false,\n  draggable: false,\n  loading: false,\n};\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: boolean;\n\n  // 是否可选中\n  public checkable: boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: boolean;\n\n  // 节点是否可拖动\n  public draggable: boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = get(tree, 'config.keys') || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n\n    this.model = null;\n    this.children = null;\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = true;\n    this.vmIsLocked = false;\n\n    const spec = {\n      ...defaultStatus,\n      actived: false,\n      expanded: false,\n      checked: false,\n      ...data,\n    };\n    const children = spec[propChildren];\n\n    this.set(spec);\n    this.label = spec[propLabel] || '';\n    this.value = isNil(spec[propValue]) ? uniqueId(prefix) : spec[propValue];\n    this.tree.nodeMap.set(this.value, this);\n\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 初始化状态计算\n    this.level = 0;\n    this.visible = true;\n\n    this.actived = spec.actived;\n    this.initActived();\n\n    this.expanded = spec.expanded;\n    this.initExpanded();\n\n    this.checked = spec.checked;\n    this.initChecked();\n\n    this.update();\n    tree.reflow(this);\n\n    // 这里的子节点加载逻辑不能放到状态计算之前\n    // 因为子节点状态计算依赖父节点状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此初始化状态放到子节点插入之后\n    this.checked = false;\n    this.indeterminate = false;\n    this.updateChecked();\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  // 初始化选中态\n  public initChecked() {\n    const { tree, value, parent } = this;\n    const { checkStrictly } = tree.config;\n    let { checked } = this;\n    checked = parent?.isChecked();\n    if (checked && !checkStrictly) {\n      tree.checkedMap.set(value, true);\n    }\n    this.checked = checked;\n  }\n\n  // 初始化节点展开状态\n  public initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (\n      typeof config.expandLevel === 'number'\n      && this.getLevel() < config.expandLevel\n    ) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (config.expandAll) {\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  // 初始化高亮状态\n  public initActived(): void {\n    const { tree, actived } = this;\n    if (actived) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  // 追加数据\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  // 将当前节点追加到某个父节点的子节点列表中\n  public appendTo(\n    tree: TreeStore,\n    parent?: TreeNode,\n    index?: number,\n  ): void {\n    const parentNode = parent;\n\n    const targetParents = parentNode?.getParents() || [];\n    const includeCurrent = targetParents.some((node) => node.value === this.value);\n    if (includeCurrent) {\n      // 不能将父节点插入到子节点\n      return;\n    }\n\n    if (Array.isArray(parentNode?.children)) {\n      let targetIndex = 0;\n      if (typeof index === 'number') {\n        targetIndex = index;\n      }\n      const targetPosNode = parentNode?.children[targetIndex];\n      if (targetPosNode?.value === this.value) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    this.remove();\n    this.parent = parentNode;\n\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode?.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n    if (Array.isArray(siblings)) {\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, this);\n      } else {\n        siblings.push(this);\n      }\n    }\n\n    // 插入节点应当继承展开状态\n    // 但建议不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode?.walk() || tree.children.map((item) => item.walk()).flat();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  // 插入一个同级节点数据\n  public insert(\n    item: TypeTreeItem,\n    index?: number,\n  ): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  // 在当前节点之前插入节点\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  // 在当前节点之后插入节点\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  // 从一个树移除本节点\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  // 清除本节点与一个树的关系\n  public clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n  }\n\n  // 异步加载子节点数据\n  public async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (typeof config.load === 'function') {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  // 设置状态\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(defaultStatus, key) || key === 'label') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  // 获取单个父节点\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  // 获取所有父节点\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  // 获取兄弟节点，包含自己在内\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  // 获取根节点\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  // 获取节点在父节点的子节点列表中的位置\n  // 如果没有父节点，则获取节点在根节点列表的位置\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  // 返回路径节点\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  // 获取节点所在层级\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  // 判断节点是否被过滤\n  public isRest(): boolean {\n    const {\n      config,\n      filterMap,\n    } = this.tree;\n\n    let rest = true;\n    if (typeof config.filter === 'function') {\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  // 判断节点是否可视\n  public isVisible(): boolean {\n    const {\n      nodeMap,\n    } = this.tree;\n\n    let visible = true;\n\n    // 锁定状态，直接呈现\n    if (this.vmIsLocked) {\n      return true;\n    }\n\n    // 在当前树上，未被移除\n    if (nodeMap.get(this.value)) {\n      // 节点未被过滤\n      const filterVisible = this.isRest();\n\n      // 所有父节点展开\n      let expandVisible = true;\n      const parents = this.getParents();\n      if (parents.length > 0) {\n        expandVisible = parents.every((node: TreeNode) => node.isExpanded());\n      }\n\n      // 节点为未被过滤节点的父节点\n      visible = expandVisible && filterVisible;\n    } else {\n      visible = false;\n    }\n    return visible;\n  }\n\n  // 判断节点是否被禁用\n  public isDisabled() {\n    if (this.vmIsLocked) return true;\n    const treeDisabled = get(this, 'tree.config.disabled');\n    return !!(treeDisabled || this.disabled);\n  }\n\n  // 判断节点是否能拖拽\n  public isDraggable() {\n    return !!(get(this, 'tree.config.draggable') || this.draggable);\n  }\n\n  // 判断节点是否支持互斥展开\n  public isExpandMutex() {\n    return !!(get(this, 'tree.config.expandMutex') || this.expandMutex);\n  }\n\n  // 节点可高亮\n  public isActivable() {\n    return !!(get(this, 'tree.config.activable') || this.activable);\n  }\n\n  // 是否可选\n  public isCheckable() {\n    return !!(get(this, 'tree.config.checkable') || this.checkable);\n  }\n\n  // 检查节点是否被激活\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  // 检查节点是否已展开\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    if (vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  // 计算属性，判断节点是否被选中\n  // map: 预期选中项map，用于计算节点在预期环境中的选中态\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    let checked = false;\n    const checkedMap = map || tree.checkedMap;\n    if (tree.nodeMap.get(this.value)) {\n      if (checkedMap.get(this.value)) {\n        // 如果在 checked 节点列表中，则直接为 true\n        checked = true;\n      } else if (\n        Array.isArray(children)\n        && children.length > 0\n        && !checkStrictly\n      ) {\n        // 如果是父节点，需检查所有子节点状态\n        checked = children.every((node) => {\n          const childIsChecked = node.isChecked(checkedMap);\n          return childIsChecked;\n        });\n      } else if (!checkStrictly) {\n        // 从父节点状态推断子节点状态\n        // 这里再调用 isChecked 会导致死循环\n        const parents = this.getParents();\n        checked = parents.some((node) => checkedMap.get(node.value));\n      }\n    }\n    return !!checked;\n  }\n\n  // 是否为半选状态\n  public isIndeterminate(): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    if (checkStrictly) {\n      return false;\n    }\n    let indeterminate = false;\n    if (Array.isArray(children)) {\n      // 叶节点不存在半选状态\n      let childChecked: null | boolean = null;\n      indeterminate = children.some((node: TreeNode) => {\n        if (node.isIndeterminate()) {\n          // 子节点有任意一个半选，则其为半选状态\n          return true;\n        }\n        if (childChecked === null) {\n          childChecked = node.isChecked();\n        }\n        if (childChecked !== node.isChecked()) {\n          // 子节点选中状态不一致，则其为半选状态\n          return true;\n        }\n        return false;\n      });\n    }\n    return indeterminate;\n  }\n\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  // 是叶节点\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  // 锁定节点\n  // 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  // 节点展开关闭后需要调用的状态检查函数\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n  }\n\n  // 展开或者关闭节点\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  // 设置节点展开状态\n  public setExpanded(expanded: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      const shouldExpandNodes = [];\n      shouldExpandNodes.push(this);\n      if (get(tree, 'config.expandParent')) {\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n          });\n        }\n        map.set(node.value, true);\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n      this.update();\n      this.updateChildren();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  // 切换节点激活态\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  // 设置节点激活态\n  public setActived(actived: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    if (options.directly) {\n      this.update();\n    }\n    return tree.getActived(map);\n  }\n\n  // 切换选中态\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  // 更新单个节点的选中态\n  // 返回树选中列表\n  public setChecked(checked: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (this.isCheckable() && checked !== this.isChecked()) {\n      if (config.checkStrictly) {\n        if (checked) {\n          map.set(this.value, true);\n        } else {\n          map.delete(this.value);\n        }\n      } else {\n        const children = this.walk();\n        // 子节点的预期选中态与当前节点同步\n        children.forEach((node) => {\n          if (checked) {\n            map.set(node.value, true);\n          } else {\n            map.delete(node.value);\n          }\n        });\n        // 消除全部父节点的预期选中态\n        // 父节点的预期选中态将通过计算得出\n        const parents = this.getParents();\n        parents.forEach((node) => {\n          map.delete(node.value);\n        });\n      }\n    }\n    if (options.directly) {\n      if (config.checkStrictly) {\n        this.updateChecked();\n      } else {\n        const relatedNodes = tree.getRelatedNodes([this.value]);\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    return tree.getChecked(map);\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  // 更新节点状态\n  public update(): void {\n    this.level = this.getLevel();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.vmCheckable = this.isCheckable();\n    this.visible = this.isVisible();\n    this.vmIsRest = this.isRest();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.tree.updated(this);\n  }\n\n  // 更新选中态属性值\n  public updateChecked(isFromValueChange?: boolean): void {\n    const { tree } = this;\n    this.vmCheckable = this.isCheckable();\n    if (this.vmCheckable && (!this.disabled || isFromValueChange)) {\n      this.checked = this.isChecked();\n      if (this.checked) {\n        tree.checkedMap.set(this.value, true);\n      }\n      this.indeterminate = this.isIndeterminate();\n      tree.updated(this);\n    }\n  }\n\n  // 更新所有子节点状态\n  // 注意:不包含自己\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  // 父节点状态更新\n  // 注意:不包含自己\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  // 更新上下游相关节点\n  public updateRelated() {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n    tree.reflow();\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  // 获取包含自己在内所有的子节点\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  // TreeNode 对象 => TypeTreeNodeModel 对象\n  // 用于 treeNode 对外暴露的 api\n  // 经过封装的对象，减少了对外暴露的 api，利于代码重构\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["hasOwnProperty","Object","prototype","defaultStatus","expandMutex","activable","checkable","disabled","draggable","loading","TreeNode","tree","data","parent","_classCallCheck","_defineProperty","config","prefix","keys","get","propChildren","children","propLabel","label","propValue","value","model","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","spec","actived","expanded","checked","set","isNil","uniqueId","nodeMap","level","visible","initActived","initExpanded","initChecked","update","reflow","Array","isArray","append","lazy","loadChildren","indeterminate","updateChecked","_createClass","checkStrictly","isChecked","checkedMap","expandLevel","getLevel","expandedMap","expandAll","activedMap","list","push","_toConsumableArray","length","forEach","item","node","appendTo","updateRelated","index","parentNode","targetParents","getParents","includeCurrent","some","targetIndex","targetPosNode","remove","siblings","splice","nodes","walk","updateNodes","map","flat","getSiblings","sibling","newData","getIndex","insert","clean","updateParents","_asyncToGenerator","_regeneratorRuntime","load","emit","key","call","updated","parents","indexOf","unshift","reverse","filterMap","rest","filter","nodeModel","getModel","filterVisible","isRest","expandVisible","every","isExpanded","treeDisabled","childIsChecked","childChecked","isIndeterminate","isLeaf","lockState","isVisible","setExpanded","opts","options","directly","Map","shouldExpandNodes","isExpandMutex","snode","afterExpanded","updateChildren","getExpanded","setActived","isActived","isActivable","activeMultiple","clear","getActived","setChecked","isCheckable","relatedNodes","getRelatedNodes","getChecked","isFirst","isLast","isFromValueChange","concat","createNodeModel","updateNodeModel"],"mappings":"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"}