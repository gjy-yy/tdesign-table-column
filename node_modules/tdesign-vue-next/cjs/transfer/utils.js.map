{"version":3,"file":"utils.js","sources":["../../src/transfer/utils.ts"],"sourcesContent":["import { ComponentPublicInstance } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { TransferListOptionBase, TransferItemOption, TdTransferProps, TransferValue, DataOption } from './interface';\n\nexport { emitEvent } from '../utils/event';\n\nexport const TRANSFER_NAME = 'TTransfer';\n\ninterface TreeNode {\n  children?: Array<TreeNode>;\n}\n\nfunction findTopNode(vm: ComponentPublicInstance): ComponentPublicInstance {\n  // 找到t-transfer这层父节点\n  if (vm.$options.name === 't-transfer') {\n    return vm;\n  }\n  if (vm.$parent) {\n    return findTopNode(vm.$parent);\n  }\n  return vm;\n}\n\nfunction getTransferListOption<T>(prop: T | Array<T>): TransferListOptionBase<T> {\n  if (Array.isArray(prop)) {\n    return {\n      source: prop[0],\n      target: prop[1],\n    };\n  }\n  return {\n    source: prop,\n    target: prop,\n  };\n}\n\nfunction getDataValues(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  {\n    isTreeMode = false,\n    include = true, // true=保留filterValues，false=删除filterValues中元素\n  } = {},\n): Array<TransferValue> {\n  // 用于处理 tree 组件这种数据结构是树形的\n  if (isTreeMode) {\n    let result: Array<TransferValue> = [];\n    if (data) {\n      for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        const isInclude = filterValues.includes(item.value);\n        if (!include && isInclude) {\n          continue; // 排除模式下子元素一律排除\n        }\n\n        // 只找叶子节点\n        if (item.children && item.children.length > 0) {\n          const childResult = getDataValues(item.children, filterValues, {\n            isTreeMode,\n            include,\n          });\n          result = result.concat(childResult);\n        } else if ((include && isInclude) || (!include && !isInclude)) {\n          result.push(item.value);\n        }\n      }\n    }\n    return result;\n  }\n  return data\n    .filter((item) => {\n      if (!item) return false;\n      const isInclude = filterValues.includes(item.value);\n      return ((include && isInclude) || (!include && !isInclude)) && !item.disabled;\n    })\n    .map((item) => item.value);\n}\n\nfunction getTransferData(\n  data: Array<DataOption>,\n  keys: TdTransferProps['keys'],\n  isTreeMode = false,\n): Array<TransferItemOption> {\n  const list: Array<TransferItemOption> = data.map((transferDataItem, index): TransferItemOption => {\n    const labelKey = keys?.label || 'label';\n    const valueKey = keys?.value || 'value';\n    if (transferDataItem[labelKey] === undefined) {\n      throw new Error(`${labelKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    if (transferDataItem[valueKey] === undefined) {\n      throw new Error(`${valueKey} is not in DataOption ${JSON.stringify(transferDataItem)}`);\n    }\n    const result: TransferItemOption = {\n      label: transferDataItem[labelKey] as string,\n      value: transferDataItem[valueKey],\n      key: `key__value_${transferDataItem[valueKey]}_index_${index}`,\n      disabled: transferDataItem.disabled ?? false,\n      data: transferDataItem,\n    };\n    if (isTreeMode && transferDataItem.children) {\n      result.children = getTransferData(transferDataItem.children, keys, true);\n    }\n    return result;\n  });\n  return list;\n}\n\nfunction isAllNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  return false;\n}\n\nfunction isTreeNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (!data) return !needMatch;\n\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n\n  if (data.children?.length) {\n    return data.children.some((item) => isTreeNodeValid(item, filterValues, needMatch));\n  }\n  return !needMatch;\n}\n\n// 复制树并过滤节点\nfunction cloneTreeWithFilter(\n  sourceTree: TransferItemOption[],\n  targetTree: TransferItemOption[],\n  filterValues: Array<TransferValue>,\n  needMatch: boolean,\n) {\n  sourceTree.forEach((item) => {\n    let newNode: TransferItemOption;\n    if (isAllNodeValid(item, filterValues, needMatch)) {\n      // 如果当前节点直接命中，则复制所有子节点\n      newNode = cloneDeep<TransferItemOption>(item);\n      targetTree.push(newNode);\n    } else if (isTreeNodeValid(item, filterValues, needMatch)) {\n      // 如果有合法子节点，就复制这个节点\n      newNode = {\n        ...item,\n      };\n      delete newNode.children;\n      targetTree.push(newNode);\n      if (item.children) {\n        newNode.children = [];\n        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);\n        if (newNode.children.length === 0) {\n          delete newNode.children;\n        }\n      }\n    }\n  });\n}\n\n// 过滤列表，如果是树的话需要保持树的结构\nfunction filterTransferData(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  needMatch = true,\n  isTreeMode = false,\n) {\n  if (!isTreeMode) {\n    if (needMatch) {\n      // 正向过滤。要保持filterValues顺序\n      return filterValues.map((value) => data.find((item) => item.value === value)).filter((item) => !!item);\n    }\n    // 反向过滤\n    return data.filter((item) => {\n      const isMatch = filterValues.includes(item.value);\n      return !isMatch;\n    });\n  }\n\n  const result: Array<TransferItemOption> = [];\n  cloneTreeWithFilter(data, result, filterValues, needMatch);\n  return result;\n}\n\n// 获取树节点的叶子数量\nfunction getLefCount(nodes: Array<TreeNode>): number {\n  let total = 0;\n  nodes.forEach((child) => {\n    if (child.children && child.children.length > 0) {\n      total += getLefCount(child.children);\n    } else {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nexport {\n  findTopNode,\n  getTransferListOption,\n  getDataValues,\n  getTransferData,\n  cloneTreeWithFilter,\n  filterTransferData,\n  getLefCount,\n};\n"],"names":["TRANSFER_NAME","findTopNode","vm","$options","name","$parent","getTransferListOption","prop","Array","isArray","source","target","getDataValues","data","filterValues","isTreeMode","include","result","i","length","item","isInclude","includes","value","children","childResult","concat","push","filter","disabled","map","getTransferData","keys","list","transferDataItem","index","labelKey","label","valueKey","Error","JSON","stringify","key","isAllNodeValid","needMatch","isTreeNodeValid","some","cloneTreeWithFilter","sourceTree","targetTree","forEach","newNode","cloneDeep","filterTransferData","find","isMatch","getLefCount","nodes","total","child"],"mappings":"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"}