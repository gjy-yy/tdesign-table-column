{"version":3,"file":"Panel.js","sources":["../../../src/cascader/components/Panel.tsx"],"sourcesContent":["import { defineComponent, PropType, computed } from 'vue';\n\nimport Item from './Item';\nimport { TreeNode, CascaderContextType } from '../interface';\nimport CascaderProps from '../props';\nimport { usePrefixClass, useConfig } from '../../hooks/useConfig';\nimport { useTNodeDefault } from '../../hooks/tnode';\n\nimport { getPanels } from '../core/helper';\nimport { expendClickEffect, valueChangeEffect } from '../core/effect';\n\nexport default defineComponent({\n  name: 'TCascaderSubPanel',\n  props: {\n    empty: CascaderProps.empty,\n    trigger: CascaderProps.trigger,\n    onChange: CascaderProps.onChange,\n    loading: CascaderProps.loading,\n    loadingText: CascaderProps.loadingText,\n    cascaderContext: {\n      type: Object as PropType<CascaderContextType>,\n    },\n  },\n\n  setup(props) {\n    const renderTNodeJSXDefault = useTNodeDefault();\n    const COMPONENT_NAME = usePrefixClass('cascader');\n    const { globalConfig, t } = useConfig('cascader');\n\n    const panels = computed(() => getPanels(props.cascaderContext.treeNodes));\n\n    const handleExpand = (node: TreeNode, trigger: 'hover' | 'click') => {\n      const { trigger: propsTrigger, cascaderContext } = props;\n      expendClickEffect(propsTrigger, trigger, node, cascaderContext);\n    };\n\n    const renderItem = (node: TreeNode) => (\n      <Item\n        key={node.value}\n        node={node}\n        cascaderContext={props.cascaderContext}\n        onClick={() => {\n          handleExpand(node, 'click');\n        }}\n        onMouseenter={() => {\n          handleExpand(node, 'hover');\n        }}\n        onChange={() => {\n          valueChangeEffect(node, props.cascaderContext);\n        }}\n      />\n    );\n\n    const renderList = (treeNodes: TreeNode[], isFilter = false, segment = true, key = '1') => (\n      <ul\n        class={[\n          `${COMPONENT_NAME.value}__menu`,\n          'narrow-scrollbar',\n          {\n            [`${COMPONENT_NAME.value}__menu--segment`]: segment,\n            [`${COMPONENT_NAME.value}__menu--filter`]: isFilter,\n          },\n        ]}\n        key={key}\n      >\n        {treeNodes.map((node: TreeNode) => renderItem(node))}\n      </ul>\n    );\n\n    const renderPanels = () => {\n      const { inputVal, treeNodes } = props.cascaderContext;\n      return inputVal\n        ? renderList(treeNodes, true)\n        : panels.value.map((treeNodes, index: number) =>\n            renderList(treeNodes, false, index !== panels.value.length - 1, `${COMPONENT_NAME.value}__menu${index}`),\n          );\n    };\n\n    return () => {\n      let content;\n      if (props.loading) {\n        content = renderTNodeJSXDefault(\n          'loadingText',\n          <div class={`${COMPONENT_NAME.value}__panel--empty`}>{globalConfig.value.loadingText}</div>,\n        );\n      } else {\n        content = panels.value.length\n          ? renderPanels()\n          : renderTNodeJSXDefault(\n              'empty',\n              <div class={`${COMPONENT_NAME.value}__panel--empty`}>{globalConfig.value.empty}</div>,\n            );\n      }\n      return (\n        <div\n          class={[\n            `${COMPONENT_NAME.value}__panel`,\n            { [`${COMPONENT_NAME.value}--normal`]: panels.value.length && !props.loading },\n          ]}\n        >\n          {content}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","empty","CascaderProps","trigger","onChange","loading","loadingText","cascaderContext","type","Object","setup","renderTNodeJSXDefault","useTNodeDefault","COMPONENT_NAME","usePrefixClass","useConfig","globalConfig","t","panels","computed","getPanels","treeNodes","handleExpand","node","propsTrigger","expendClickEffect","renderItem","_createVNode","Item","value","valueChangeEffect","renderList","isFilter","segment","key","map","renderPanels","inputVal","index","length","content"],"mappings":"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"}