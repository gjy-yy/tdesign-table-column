{"version":3,"file":"helper.js","sources":["../../src/select/helper.ts"],"sourcesContent":["import { InjectionKey, ComputedRef, Slots } from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { TdSelectProps, TdOptionProps, SelectValue, SelectOption, SelectOptionGroup } from './type';\n\nexport const selectInjectKey: InjectionKey<\n  ComputedRef<{\n    hoverIndex: number;\n    selectValue: TdSelectProps['value'];\n    size: TdSelectProps['size'];\n    max: TdSelectProps['max'];\n    reserveKeyword: TdSelectProps['reserveKeyword'];\n    multiple: TdSelectProps['multiple'];\n    handleValueChange: TdSelectProps['onChange'];\n    handleCreate: TdSelectProps['onCreate'];\n    handlerInputChange: TdSelectProps['onInputChange'];\n    handlePopupVisibleChange: TdSelectProps['onPopupVisibleChange'];\n    popupContentRef: ComputedRef<HTMLElement>;\n    indeterminate: boolean;\n    isCheckAll: boolean;\n    onCheckAllChange: (checked: boolean) => void;\n    getSelectedOptions: (selectValue?: SelectValue[] | SelectValue) => TdOptionProps[];\n  }>\n> = Symbol('selectProvide');\n\nexport const getSingleContent = (value: TdSelectProps['value'], options: SelectOption[]): string => {\n  for (const option of options) {\n    if ((option as TdOptionProps).value === value) {\n      return option?.label;\n    }\n  }\n  return value as string;\n};\n\nexport const getMultipleContent = (value: SelectValue[], options: SelectOption[]) => {\n  const res = [];\n  for (const iterator of value) {\n    const resLabel = getSingleContent(iterator, options);\n    if (resLabel) {\n      res.push(resLabel);\n    }\n  }\n  return res;\n};\n\nexport const getNewMultipleValue = (innerValue: SelectValue[], optionValue: SelectValue) => {\n  const value = cloneDeep(innerValue) as SelectValue[];\n  const valueIndex = value.indexOf(optionValue);\n  if (valueIndex < 0) {\n    value.push(optionValue);\n  } else {\n    value.splice(valueIndex, 1);\n  }\n  return {\n    value,\n    isCheck: valueIndex < 0,\n  };\n};\n"],"names":["selectInjectKey","Symbol","getSingleContent","value","options","option","label","getMultipleContent","res","iterator","resLabel","push","getNewMultipleValue","innerValue","optionValue","cloneDeep","valueIndex","indexOf","splice","isCheck"],"mappings":";;;;;;;;;;;;;;;;;;;;;IAIaA,eAAA,GAkBTC,OAAO,iBAlBE;AAoBA,IAAAC,gBAAA,GAAmB,SAAnBA,gBAAmB,CAACC,KAAD,EAAgCC,OAAhC,EAAoE;AAAA,EAAA,IAAA,SAAA,GAAA,0BAAA,CAC7EA,OAD6E,CAAA;AAAA,MAAA,KAAA,CAAA;;AAAA,EAAA,IAAA;IAClG,KAA8B,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,MAAA,IAAnBC,MAAmB,GAAA,KAAA,CAAA,KAAA,CAAA;;AACvB,MAAA,IAAAA,MAAA,CAAyBF,KAAzB,KAAmCA,KAAnC,EAA0C;AAC7C,QAAA,OAAOE,MAAP,KAAOA,IAAAA,IAAAA,MAAP,KAAOA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAQ,CAAAC,KAAf,CAAA;AACF,OAAA;AACF,KAAA;AALkG,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA,EAAA,CAAA;AAAA,GAAA;;AAM3F,EAAA,OAAAH,KAAA,CAAA;AACT,EAPa;AASA,IAAAI,kBAAA,GAAqB,SAArBA,kBAAqB,CAACJ,KAAD,EAAuBC,OAAvB,EAAmD;EACnF,IAAMI,MAAM,EAAZ,CAAA;;AADmF,EAAA,IAAA,UAAA,GAAA,0BAAA,CAE5DL,KAF4D,CAAA;AAAA,MAAA,MAAA,CAAA;;AAAA,EAAA,IAAA;IAEnF,KAA8B,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAA;AAAA,MAAA,IAAnBM,QAAmB,GAAA,MAAA,CAAA,KAAA,CAAA;AACtB,MAAA,IAAAC,QAAA,GAAWR,gBAAiB,CAAAO,QAAA,EAAUL,OAAV,CAA5B,CAAA;;AACN,MAAA,IAAIM,QAAJ,EAAc;QACZF,GAAA,CAAIG,IAAJ,CAASD,QAAT,CAAA,CAAA;AACF,OAAA;AACF,KAAA;AAPmF,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,UAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAAA,SAAA;AAAA,IAAA,UAAA,CAAA,CAAA,EAAA,CAAA;AAAA,GAAA;;AAQ5E,EAAA,OAAAF,GAAA,CAAA;AACT,EATa;AAWA,IAAAI,mBAAA,GAAsB,SAAtBA,mBAAsB,CAACC,UAAD,EAA4BC,WAA5B,EAAyD;AACpF,EAAA,IAAAX,KAAA,GAAQY,8BAAUF,WAAlB,CAAA;AACA,EAAA,IAAAG,UAAA,GAAab,KAAM,CAAAc,OAAN,CAAcH,WAAd,CAAb,CAAA;;EACN,IAAIE,aAAa,CAAjB,EAAoB;IAClBb,KAAA,CAAMQ,IAAN,CAAWG,WAAX,CAAA,CAAA;AACK,GAFP,MAEO;AACCX,IAAAA,KAAA,CAAAe,MAAA,CAAOF,UAAP,EAAmB,CAAnB,CAAA,CAAA;AACR,GAAA;;EACO,OAAA;AACLb,IAAAA,KAAA,EAAAA,KADK;IAELgB,SAASH,UAAa,GAAA,CAAA;GAFjB,CAAA;AAIT;;;;;;;"}