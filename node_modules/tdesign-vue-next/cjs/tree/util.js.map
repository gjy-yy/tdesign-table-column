{"version":3,"file":"util.js","sources":["../../src/tree/util.ts"],"sourcesContent":["import { VNode, h } from 'vue';\nimport pick from 'lodash/pick';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TypeMark, TypeLineModel, TypeTNodeProp, TypeGetTNodeOption, TypeTargetNode } from './interface';\nimport { TdTreeProps } from './type';\n\nexport function getParentsToRoot(element?: HTMLElement, root?: HTMLElement): HTMLElement[] {\n  const list = [];\n  let el: HTMLElement = element;\n  while (el && el.parentNode) {\n    list.push(el);\n    if (el === root) {\n      break;\n    }\n    el = el.parentNode as HTMLElement;\n  }\n  return list;\n}\n\nexport function getParentMarks(name: string, element?: HTMLElement, root?: HTMLElement): TypeMark[] {\n  const list = getParentsToRoot(element, root);\n  return list\n    .map((el) => {\n      const mark: TypeMark = {\n        name,\n        value: el.getAttribute(name) || '',\n        el,\n      };\n      return mark;\n    })\n    .filter((mark) => mark.value);\n}\n\nexport function getMark(name: string, element?: HTMLElement, root?: HTMLElement): TypeMark {\n  const list = getParentMarks(name, element, root);\n  const info = list.pop() || null;\n  return info;\n}\n\nexport function getTNode(prop: TypeTNodeProp, options: TypeGetTNodeOption = {}): string | VNode {\n  let tnode = null;\n  let item = null;\n  const conf = {\n    ...options,\n  };\n  if (typeof prop === 'function') {\n    item = prop(h, conf.node?.getModel());\n  } else if (typeof prop === 'string') {\n    item = prop;\n  }\n  if (typeof item === 'string') {\n    tnode = item;\n  } else if (item) {\n    tnode = item as VNode;\n  }\n  return tnode;\n}\n\n// 获取一个节点层级位置的连线模型\nexport function getLineModel(nodes: TreeNode[], node: TreeNode, index: number): TypeLineModel {\n  // 标记 [上，右，下，左] 是否有连线\n  const lineModel: TypeLineModel = {\n    top: false,\n    right: false,\n    bottom: false,\n    left: false,\n  };\n\n  let nodeChildren = [];\n  if (Array.isArray(node.children)) {\n    nodeChildren = node.children;\n  }\n  const childNode = nodes[index - 1] || null;\n  const nodeItemIndex = childNode ? childNode.getIndex() : 0;\n\n  if (index === 0) {\n    lineModel.left = !!node.parent;\n    lineModel.bottom = node.children && node.expanded;\n    lineModel.right = node.parent && !node.children;\n  } else if (index === 1) {\n    lineModel.top = true;\n    lineModel.right = true;\n    lineModel.bottom = nodeItemIndex < nodeChildren.length - 1;\n  } else if (nodeItemIndex < nodeChildren.length - 1) {\n    lineModel.top = true;\n    lineModel.bottom = true;\n  }\n\n  return lineModel;\n}\n\nexport function isTreeNodeValue(item: unknown): boolean {\n  return typeof item === 'string' || typeof item === 'number';\n}\n\nexport function getNode(store: TreeStore, item: TypeTargetNode): TreeNode {\n  let node = null;\n  let val = null;\n  if (typeof item === 'string' || typeof item === 'number') {\n    val = item;\n  } else if (item && isTreeNodeValue(item.value)) {\n    val = item.value;\n  }\n  node = store.getNode(val);\n  return node;\n}\n\n// 统一获取tree的config\nexport const getStoreConfig = (props: TdTreeProps) => {\n  // 统一更新选项，然后在 store 统一识别属性更新\n  const storeProps = pick(props, [\n    'keys',\n    'expandAll',\n    'expandLevel',\n    'expandMutex',\n    'expandParent',\n    'activable',\n    'activeMultiple',\n    'disabled',\n    'draggable',\n    'checkable',\n    'checkStrictly',\n    'load',\n    'lazy',\n    'valueMode',\n    'filter',\n  ]);\n  return storeProps;\n};\n"],"names":["getParentsToRoot","element","root","list","el","parentNode","push","getParentMarks","name","map","mark","value","getAttribute","filter","getMark","info","pop","getTNode","prop","options","tnode","item","conf","h","node","getModel","getLineModel","nodes","index","lineModel","top","right","bottom","left","nodeChildren","Array","isArray","children","childNode","nodeItemIndex","getIndex","parent","expanded","length","isTreeNodeValue","getNode","store","val","getStoreConfig","props","storeProps","pick"],"mappings":"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"}