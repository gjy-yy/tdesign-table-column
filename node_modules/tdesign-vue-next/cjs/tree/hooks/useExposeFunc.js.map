{"version":3,"file":"useExposeFunc.js","sources":["../../../src/tree/hooks/useExposeFunc.ts"],"sourcesContent":["import { Ref } from 'vue';\nimport upperFirst from 'lodash/upperFirst';\nimport TreeStore from '../../_common/js/tree/tree-store';\nimport TreeNode from '../../_common/js/tree/tree-node';\nimport { TreeOptionData } from '../../common';\nimport { getNode } from '../util';\n\nimport { TreeNodeValue, TreeNodeState, TypeTreeNodeModel } from '../interface';\n\nexport default function useExposeFunc(treeStore: Ref<TreeStore>, expose: (exposed: Record<string, any>) => void) {\n  const setItem = (value: TreeNodeValue, options: TreeNodeState) => {\n    const node: TreeNode = treeStore.value.getNode(value);\n    const spec = options;\n    const keys = Object.keys(spec);\n    if (node && spec) {\n      ['expanded', 'actived', 'checked'].forEach((name) => {\n        if (keys.includes(name)) {\n          node[`set${upperFirst(name)}`](spec[name], { directly: true });\n        }\n      });\n    }\n  };\n\n  const getItem = (value: TreeNodeValue): TypeTreeNodeModel => {\n    const node: TreeNode = treeStore.value.getNode(value);\n    return node?.getModel();\n  };\n\n  const getItems = (value?: TreeNodeValue): TypeTreeNodeModel[] => {\n    const nodes = treeStore.value.getNodes(value);\n    return nodes.map((node: TreeNode) => node.getModel());\n  };\n\n  const appendTo = (para?: TreeNodeValue, item?: TreeOptionData | TreeOptionData[]) => {\n    let list = [];\n    if (Array.isArray(item)) {\n      list = item;\n    } else {\n      list = [item];\n    }\n    list.forEach((item) => {\n      const val = item?.value || '';\n      const node = getNode(treeStore.value, val);\n      if (node) {\n        treeStore.value.appendNodes(para, node);\n      } else {\n        treeStore.value.appendNodes(para, item);\n      }\n    });\n  };\n\n  const insertBefore = (value: TreeNodeValue, item: TreeOptionData) => {\n    const val = item?.value || '';\n    const node = getNode(treeStore.value, val);\n    if (node) {\n      // TODO type fix\n      treeStore.value.insertBefore(value, node as any);\n    } else {\n      treeStore.value.insertBefore(value, item);\n    }\n  };\n\n  const insertAfter = (value: TreeNodeValue, item: TreeOptionData) => {\n    const val = item?.value || '';\n    const node = getNode(treeStore.value, val);\n    if (node) {\n      // TODO type fix\n      treeStore.value.insertAfter(value, node as any);\n    } else {\n      treeStore.value.insertAfter(value, item);\n    }\n  };\n\n  const remove = (value?: TreeNodeValue) => {\n    return treeStore.value.remove(value);\n  };\n\n  const getIndex = (value: TreeNodeValue) => {\n    return treeStore.value.getNodeIndex(value);\n  };\n\n  const getParent = (value: TreeNodeValue) => {\n    const node = treeStore.value.getParent(value);\n    return node?.getModel();\n  };\n\n  const getParents = (value: TreeNodeValue) => {\n    const nodes = treeStore.value.getParents(value);\n    return nodes.map((node: TreeNode) => node.getModel());\n  };\n\n  const getPath = (value: TreeNodeValue) => {\n    const node = treeStore.value.getNode(value);\n    let pathNodes: any[] = [];\n    if (node) {\n      pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n    }\n    return pathNodes;\n  };\n\n  expose({\n    setItem,\n    getItem,\n    getItems,\n    appendTo,\n    insertBefore,\n    insertAfter,\n    remove,\n    getIndex,\n    getParent,\n    getParents,\n    getPath,\n  });\n}\n"],"names":["useExposeFunc","treeStore","expose","setItem","value","options","node","getNode","spec","keys","Object","forEach","name","includes","upperFirst","directly","getItem","getModel","getItems","nodes","getNodes","map","appendTo","para","item","list","Array","isArray","val","appendNodes","insertBefore","insertAfter","remove","getIndex","getNodeIndex","getParent","getParents","getPath","pathNodes"],"mappings":"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"}