/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, ref, computed, createVNode } from 'vue';
import debounce from 'lodash/debounce';
import { renderContent } from '../utils/render-tnode.js';
import { isNodeOverflow } from '../utils/dom.js';
import { Tooltip } from '../tooltip/index.js';
import '../hooks/useConfig.js';
import { useConfig } from '../config-provider/useConfig.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isFunction';
import 'lodash/isObject';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../_chunks/dep-756c7fb2.js';
import '../utils/easing.js';
import '../tooltip/tooltip.js';
import '@babel/runtime/helpers/slicedToArray';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../_common/js/utils/set-style.js';
import '../popup/container.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../hooks/useVModel.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import '../utils/withInstall.js';
import '../popup/style';
import '../popup/type.js';
import '../hooks/tnode.js';
import '../tooltip/util.js';
import '../tooltip/style';
import '../tooltip/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var TEllipsis = defineComponent({
  name: "TEllipsis",
  props: {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    tooltipContent: {
      type: [String, Number, Function]
    },
    placement: String,
    attach: Function,
    tooltipProps: Object,
    zIndex: Number
  },
  setup: function setup() {
    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    var root = ref();
    var isOverflow = ref(false);
    var ellipsisClasses = computed(function () {
      return ["".concat(classPrefix.value, "-table__ellipsis"), "".concat(classPrefix.value, "-text-ellipsis")];
    });

    var onTriggerMouseenter = function onTriggerMouseenter() {
      if (!root.value) return;
      isOverflow.value = isNodeOverflow(root.value);
    };

    var onTriggerMouseleave = function onTriggerMouseleave() {
      isOverflow.value = isNodeOverflow(root.value);
    };

    var onMouseAround = debounce(function (e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    return {
      root: root,
      isOverflow: isOverflow,
      ellipsisClasses: ellipsisClasses,
      onMouseAround: onMouseAround
    };
  },
  render: function render() {
    var cellNode = renderContent(this, "default", "content");

    var ellipsisContent = createVNode("div", {
      "ref": "root",
      "class": this.ellipsisClasses,
      "onMouseenter": this.onMouseAround,
      "onMouseleave": this.onMouseAround
    }, [cellNode]);

    var content = null;

    if (this.isOverflow) {
      var rProps = _objectSpread({
        content: this.tooltipContent || function () {
          return cellNode;
        },
        destroyOnClose: true,
        zIndex: this.zIndex,
        attach: this.attach,
        placement: this.placement
      }, this.tooltipProps);

      content = createVNode(Tooltip, rProps, _isSlot(ellipsisContent) ? ellipsisContent : {
        "default": function _default() {
          return [ellipsisContent];
        }
      });
    } else {
      content = ellipsisContent;
    }

    return content;
  }
});

export { TEllipsis as default };
//# sourceMappingURL=ellipsis.js.map
