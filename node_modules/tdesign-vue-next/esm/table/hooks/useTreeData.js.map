{"version":3,"file":"useTreeData.js","sources":["../../../src/table/hooks/useTreeData.tsx"],"sourcesContent":["import { SetupContext, ref, watch, toRefs, onUnmounted, computed, h } from 'vue';\nimport {\n  AddRectangleIcon as TdAddRectangleIcon,\n  MinusRectangleIcon as TdMinusRectangleIcon,\n} from 'tdesign-icons-vue-next';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\n\nimport TableTreeStore, { SwapParams } from '../../_common/js/table/tree-store';\nimport {\n  TdEnhancedTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  TableRowValue,\n  TableRowState,\n  PrimaryTableCellParams,\n} from '../type';\nimport useClassName from './useClassName';\nimport { renderCell } from '../tr';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\nimport { useTNodeDefault } from '../../hooks';\n\nexport default function useTreeData(props: TdEnhancedTableProps, context: SetupContext) {\n  const { data, columns } = toRefs(props);\n  const { t, globalConfig } = useConfig('table');\n  const { AddRectangleIcon, MinusRectangleIcon } = useGlobalIcon({\n    AddRectangleIcon: TdAddRectangleIcon,\n    MinusRectangleIcon: TdMinusRectangleIcon,\n  });\n\n  const store = ref(new TableTreeStore());\n  const treeNodeCol = ref<PrimaryTableCol>();\n  const dataSource = ref<TdEnhancedTableProps['data']>([]);\n  const { tableTreeClasses } = useClassName();\n  const renderTNode = useTNodeDefault();\n\n  const rowDataKeys = computed(() => ({\n    rowKey: props.rowKey || 'id',\n    childrenKey: props.tree?.childrenKey || 'children',\n  }));\n\n  const checkedColumn = computed(() => columns.value.find((col) => col.colKey === 'row-select'));\n\n  watch(checkedColumn, (column) => {\n    if (!store.value) return;\n    store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);\n  });\n\n  const foldIcon = (context: PrimaryTableCellParams<TableRowData>) => {\n    const params = { ...context, type: 'fold' };\n    const defaultFoldIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || <MinusRectangleIcon />;\n    return renderTNode('treeExpandAndFoldIcon', {\n      defaultNode: defaultFoldIcon,\n      params,\n    });\n  };\n\n  const expandIcon = (context: PrimaryTableCellParams<TableRowData>) => {\n    const params = { ...context, type: 'expand' };\n    const defaultExpandIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || <AddRectangleIcon />;\n    return renderTNode('treeExpandAndFoldIcon', {\n      defaultNode: defaultExpandIcon,\n      params,\n    });\n  };\n\n  const uniqueKeys = computed(() => store.value?.getAllUniqueKeys(data.value, rowDataKeys.value)?.join() || '');\n\n  watch(\n    [uniqueKeys],\n    () => {\n      if (!data.value) return;\n      // 如果没有树形解构，则不需要相关逻辑\n      if (!props.tree) {\n        dataSource.value = data.value;\n        return;\n      }\n      resetData(data.value);\n    },\n    { immediate: true },\n  );\n\n  // 不能启用这部分代码。如果启用，会导致选中树形结构子节点时数据被重置，全部节点收起\n  // watch([columns, rowDataKeys], ([columns, rowDataKeys]) => {\n  //   store.value.initialTreeStore(data.value, columns, rowDataKeys);\n  // });\n\n  onUnmounted(() => {\n    if (!props.tree) return;\n    store.value.treeDataMap?.clear();\n    store.value = null;\n  });\n\n  watch(\n    [columns],\n    () => {\n      treeNodeCol.value = getTreeNodeColumnCol();\n    },\n    { immediate: true },\n  );\n\n  function resetData(data: TableRowData[]) {\n    let newVal = cloneDeep(data);\n    store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);\n    if (props.tree?.defaultExpandAll) {\n      newVal = store.value.expandAll(newVal, rowDataKeys.value);\n    }\n    dataSource.value = newVal;\n  }\n\n  function getTreeNodeStyle(level: number) {\n    if (level === undefined) return;\n    const indent = props.tree?.indent === undefined ? 24 : props.tree?.indent;\n    // 默认 1px 是为了临界省略\n    return indent ? { paddingLeft: `${level * indent || 1}px` } : {};\n  }\n\n  /**\n   * 组件实例方法，展开或收起某一行\n   * @param p 行数据\n   */\n  function toggleExpandData(p: { row: TableRowData; rowIndex: number }, trigger?: 'expand-fold-icon') {\n    dataSource.value = [...store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value)];\n    const rowValue = get(p.row, rowDataKeys.value.rowKey);\n    const rowState = store.value?.treeDataMap?.get(rowValue);\n    props.onTreeExpandChange?.({\n      row: p.row,\n      rowIndex: p.rowIndex,\n      rowState,\n      trigger,\n    });\n  }\n\n  function getTreeNodeColumnCol() {\n    const { columns } = props;\n    let treeNodeColumnIndex = props.tree?.treeNodeColumnIndex || 0;\n    // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移\n    while (\n      columns[treeNodeColumnIndex]?.type ||\n      columns[treeNodeColumnIndex]?.colKey === '__EXPAND_ROW_ICON_COLUMN__'\n    ) {\n      treeNodeColumnIndex += 1;\n    }\n    return columns[treeNodeColumnIndex];\n  }\n\n  function formatTreeColumn(col: PrimaryTableCol): PrimaryTableCol {\n    if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;\n    const newCol = { ...treeNodeCol.value };\n    newCol.cell = (h, p) => {\n      const cellInfo = renderCell({ ...p, col: { ...treeNodeCol.value } }, context.slots, {\n        cellEmptyContent: props.cellEmptyContent,\n      });\n      const currentState = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey));\n      const colStyle = getTreeNodeStyle(currentState?.level);\n      const classes = { [tableTreeClasses.inlineCol]: !!col.ellipsis };\n      const childrenNodes = get(p.row, rowDataKeys.value.childrenKey);\n      if ((childrenNodes && childrenNodes instanceof Array) || childrenNodes === true) {\n        const iconNode = store.value.treeDataMap.get(get(p.row, rowDataKeys.value.rowKey))?.expanded\n          ? foldIcon(p)\n          : expandIcon(p);\n        return (\n          <div class={[tableTreeClasses.col, classes]} style={colStyle}>\n            {!!(childrenNodes.length || childrenNodes === true) && (\n              <span class={tableTreeClasses.icon} onClick={() => toggleExpandData(p, 'expand-fold-icon')}>\n                {iconNode}\n              </span>\n            )}\n            {cellInfo}\n          </div>\n        );\n      }\n      return (\n        <div style={colStyle} class={classes}>\n          {cellInfo}\n        </div>\n      );\n    };\n    // 树形节点会显示操作符号 [+] 和 [-]，但省略显示的浮层中不需要操作符\n    if (newCol.ellipsis === true) {\n      newCol.ellipsis = (h, p) => renderCell({ ...p, col: { ...treeNodeCol.value } }, context.slots);\n    }\n    return newCol;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，设置行数据，自动刷新界面\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   */\n  function setData<T>(key: TableRowValue, newRowData: T) {\n    const rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);\n    const newData = [...dataSource.value];\n    newData[rowIndex] = newRowData;\n    dataSource.value = newData;\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  function getData(key: TableRowValue): TableRowState {\n    return store.value.getData(key);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，移除指定节点\n   * @param key 行唯一标识\n   */\n  function remove(key: TableRowValue) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    dataSource.value = [...store.value.remove(key, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识，值为空，则表示给根节点添加元素\n   * @param newData 待添加的新节点\n   */\n  function appendTo<T>(key: TableRowValue = '', newData: T | T[]) {\n    if (!key) {\n      dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);\n      return;\n    }\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    dataSource.value = [...store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertAfter<T>(rowValue: TableRowValue, newData: T) {\n    dataSource.value = [...store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，当前节点之后，插入节点\n   */\n  function insertBefore<T>(rowValue: TableRowValue, newData: T) {\n    dataSource.value = [...store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，展开所有节点\n   */\n  function expandAll() {\n    dataSource.value = [...store.value.expandAll(dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，收起所有节点\n   */\n  function foldAll() {\n    dataSource.value = [...store.value.foldAll(dataSource.value, rowDataKeys.value)];\n  }\n\n  /**\n   * 对外暴露的组件实例方法，交换行数据\n   */\n  function swapData(params: SwapParams<TableRowData>) {\n    const r = store.value.swapData(dataSource.value, params, rowDataKeys.value);\n    if (r.result) {\n      dataSource.value = [...r.dataSource];\n    } else {\n      const params = {\n        code: r.code,\n        reason: r.reason,\n      };\n      props.onAbnormalDragSort?.(params);\n    }\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取全部数据的树形结构\n   * @param key 节点唯一标识\n   */\n  function getTreeNode() {\n    return store.value.getTreeNode(dataSource.value, rowDataKeys.value);\n  }\n\n  /**\n   * 对外暴露的组件实例方法，获取树形结构展开的节点\n   */\n  function getTreeExpandedRow(type: 'unique' | 'data' | 'all' = 'data') {\n    return store.value.getTreeExpandedRow(dataSource.value, rowDataKeys.value, type);\n  }\n\n  return {\n    store,\n    rowDataKeys,\n    dataSource,\n    swapData,\n    setData,\n    getData,\n    remove,\n    appendTo,\n    insertAfter,\n    insertBefore,\n    formatTreeColumn,\n    toggleExpandData,\n    expandAll,\n    foldAll,\n    getTreeNode,\n    resetData,\n    getTreeExpandedRow,\n  };\n}\n"],"names":["useTreeData","props","context","toRefs","data","columns","useConfig","t","globalConfig","useGlobalIcon","AddRectangleIcon","TdAddRectangleIcon","MinusRectangleIcon","TdMinusRectangleIcon","store","ref","TableTreeStore","treeNodeCol","dataSource","useClassName","tableTreeClasses","renderTNode","useTNodeDefault","rowDataKeys","computed","rowKey","childrenKey","tree","checkedColumn","value","find","col","colKey","watch","column","updateDisabledState","foldIcon","params","type","defaultFoldIcon","treeExpandAndFoldIcon","h","_createVNode","defaultNode","expandIcon","defaultExpandIcon","uniqueKeys","getAllUniqueKeys","join","resetData","immediate","onUnmounted","treeDataMap","clear","getTreeNodeColumnCol","newVal","cloneDeep","initialTreeStore","defaultExpandAll","expandAll","getTreeNodeStyle","level","indent","paddingLeft","toggleExpandData","p","trigger","rowValue","get","row","rowState","onTreeExpandChange","rowIndex","treeNodeColumnIndex","formatTreeColumn","newCol","cell","cellInfo","renderCell","slots","cellEmptyContent","currentState","colStyle","classes","inlineCol","ellipsis","childrenNodes","Array","iconNode","expanded","length","icon","setData","key","newRowData","updateData","newData","getData","remove","appendTo","appendToRoot","insertAfter","insertBefore","foldAll","swapData","r","result","code","reason","onAbnormalDragSort","getTreeNode","getTreeExpandedRow"],"mappings":"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"}