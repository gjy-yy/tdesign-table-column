{"version":3,"file":"list-item-meta.js","sources":["../../src/list/list-item-meta.tsx"],"sourcesContent":["import { defineComponent, ComponentPublicInstance } from 'vue';\nimport props from './list-item-meta-props';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useContent, useTNodeJSX } from '../hooks/tnode';\n\nexport default defineComponent({\n  name: 'TListItemMeta',\n  props,\n  setup(props, ctx) {\n    const COMPONENT_NAME = usePrefixClass('list-item__meta');\n    const renderContent = useContent();\n    const renderTNodeJSX = useTNodeJSX();\n\n    const renderAvatar = () => {\n      if (props.avatar || ctx.slots.avatar) {\n        console.warn('`avatar` is going to be deprecated, please use `image` instead');\n      }\n      const thumbnail = renderContent('avatar', 'image');\n      if (!thumbnail) return;\n      if (typeof thumbnail === 'string') {\n        return (\n          <div class={`${COMPONENT_NAME.value}-avatar`}>\n            <img src={thumbnail}></img>\n          </div>\n        );\n      }\n      return <div class={`${COMPONENT_NAME.value}-avatar`}>{thumbnail}</div>;\n    };\n    return () => {\n      const propsTitleContent = renderTNodeJSX('title');\n      const propsDescriptionContent = renderTNodeJSX('description');\n\n      const listItemMetaContent = [\n        renderAvatar(),\n        <div class={`${COMPONENT_NAME.value}-content`}>\n          {propsTitleContent && <h3 class={`${COMPONENT_NAME.value}-title`}>{propsTitleContent}</h3>}\n          {propsDescriptionContent && <p class={`${COMPONENT_NAME.value}-description`}>{propsDescriptionContent}</p>}\n        </div>,\n      ];\n\n      return <div class={COMPONENT_NAME.value}>{listItemMetaContent}</div>;\n    };\n  },\n});\n"],"names":["defineComponent","name","props","setup","ctx","COMPONENT_NAME","usePrefixClass","renderContent","useContent","renderTNodeJSX","useTNodeJSX","renderAvatar","avatar","slots","console","warn","thumbnail","_createVNode","value","propsTitleContent","propsDescriptionContent","listItemMetaContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAKA,oBAAeA,eAAgB,CAAA;AAC7BC,EAAAA,IAAM,EAAA,eADuB;AAE7BC,EAAAA,KAAA,EAAAA,KAF6B;AAG7BC,EAAAA,KAH6B,EAGvBD,SAAAA,KAAAA,CAAAA,MAHuB,EAGhBE,GAHgB,EAGX;AACV,IAAA,IAAAC,cAAA,GAAiBC,eAAe,kBAAhC,CAAA;IACN,IAAMC,gBAAgBC,UAAW,EAAjC,CAAA;IACA,IAAMC,iBAAiBC,WAAY,EAAnC,CAAA;;AAEA,IAAA,IAAMC,eAAe,SAAfA,YAAe,GAAM;MACzB,IAAIT,MAAM,CAAAU,MAANV,IAAgBE,GAAI,CAAAS,KAAJ,CAAUD,MAA9B,EAAsC;QACpCE,OAAA,CAAQC,IAAR,CAAa,gEAAb,CAAA,CAAA;AACF,OAAA;;AACM,MAAA,IAAAC,SAAA,GAAYT,aAAc,CAAA,QAAA,EAAU,OAAV,CAA1B,CAAA;MACN,IAAI,CAACS,SAAL,EAAgB,OAAA;;AACZ,MAAA,IAAA,OAAOA,SAAP,KAAqB,QAArB,EAA+B;AAE/B,QAAA,OAAAC,WAAA,CAAA,KAAA,EAAA;UAAA,OAAeZ,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,cAAA,CAAea,KAA9B,EAAA,SAAA,CAAA;AAAA,SAAA,EAAA,CAAAD,WAAA,CAAA,KAAA,EAAA;UAAA,KACYD,EAAAA,SAAAA;AADZ,SAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AAIJ,OAAA;;AACA,MAAA,OAAAC,WAAA,CAAA,KAAA,EAAA;QAAA,OAAsBZ,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,cAAe,CAAAa,KAArC,EAAA,SAAA,CAAA;AAAA,OAAA,EAAA,CAAsDF,SAAtD,CAAA,CAAA,CAAA;KAbF,CAAA;;AAeA,IAAA,OAAO,YAAM;AACL,MAAA,IAAAG,iBAAA,GAAoBV,eAAe,QAAnC,CAAA;AACA,MAAA,IAAAW,uBAAA,GAA0BX,eAAe,cAAzC,CAAA;AAEN,MAAA,IAAMY,mBAAsB,GAAA,CAC1BV,YAAa,EADa,EAAAM,WAAA,CAAA,KAAA,EAAA;QAAA,OAEXZ,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,cAAe,CAAAa,KAFJ,EAAA,UAAA,CAAA;AAAA,OAAA,EAAA,CAGvBC,iBAAA,IAAAF,WAAA,CAAA,IAAA,EAAA;QAAA,OAAmCZ,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,cAAe,CAAAa,KAAlD,EAAA,QAAA,CAAA;OAAkEC,EAAAA,CAAAA,iBAAlE,CAHuB,CAAA,EAIvBC,uBAAA,IAAAH,WAAA,CAAA,GAAA,EAAA;QAAA,OAAwCZ,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,cAAe,CAAAa,KAAvD,EAAA,cAAA,CAAA;OAA6EE,EAAAA,CAAAA,uBAA7E,EAJuB,CAA5B,CAAA,CAAA,CAAA;AAQA,MAAA,OAAAH,WAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAmBZ,cAAe,CAAAa,KAAAA;AAAlC,OAAA,EAAA,CAA0CG,mBAA1C,CAAA,CAAA,CAAA;KAZF,CAAA;AAcF,GAAA;AArC6B,CAAA,CAA/B;;;;"}