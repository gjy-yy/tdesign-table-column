{"version":3,"file":"helper.js","sources":["../../../src/cascader/core/helper.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport {\n  TreeNode,\n  CascaderContextType,\n  TdCascaderProps,\n  CascaderValue,\n  TreeNodeValue,\n  TreeOptionData,\n} from '../interface';\n\n/**\n * 单选状态下内容\n * @param isHover\n * @param cascaderContext\n * @returns\n */\nexport function getSingleContent(cascaderContext: CascaderContextType): string {\n  const { value, multiple, treeStore, showAllLevels } = cascaderContext;\n  if (multiple || !value) return '';\n\n  if (Array.isArray(value)) return '';\n  const node = treeStore && treeStore.getNodes(value as TreeNodeValue | TreeNode);\n  if (!(node && node.length)) {\n    return value as string;\n  }\n  const path = node && node[0].getPath();\n  if (path && path.length) {\n    return showAllLevels ? path.map((node: TreeNode) => node.label).join(' / ') : path[path.length - 1].label;\n  }\n  return value as string;\n}\n\n/**\n * 多选状态下选中内容\n * @param isHover\n * @param cascaderContext\n * @returns\n */\nexport function getMultipleContent(cascaderContext: CascaderContextType) {\n  const { value, multiple, treeStore, showAllLevels } = cascaderContext;\n\n  if (!multiple) return [];\n  if (multiple && !Array.isArray(value)) return [];\n\n  const node = treeStore && treeStore.getNodes(value as TreeNodeValue | TreeNode);\n  if (!node) return [];\n\n  return (value as TreeNodeValue[])\n    .map((item: TreeNodeValue) => {\n      const node = treeStore.getNodes(item);\n      return showAllLevels ? getFullPathLabel(node[0]) : node[0].label;\n    })\n    .filter((item) => !!item);\n}\n\n/**\n * 面板数据计算方法\n * @param treeNodes\n * @returns\n */\nexport function getPanels(treeNodes: CascaderContextType['treeNodes']) {\n  const panels: TreeNode[][] = [];\n  treeNodes.forEach((node: TreeNode) => {\n    if (panels[node.level]) {\n      panels[node.level].push(node);\n    } else {\n      panels[node.level] = [node];\n    }\n  });\n  return panels;\n}\n\n/**\n * 获取node的全部路径\n * @param node\n * @returns\n */\nexport function getFullPathLabel(node: TreeNode, separator = '/') {\n  return node\n    ?.getPath()\n    .map((node: TreeNode) => node.label)\n    .join(separator);\n}\n\n/**\n * treeValue计算方法\n * @param value\n * @returns\n */\nexport const getTreeValue = (value: CascaderContextType['value']) => {\n  let treeValue: TreeNodeValue[] = [];\n  if (Array.isArray(value)) {\n    if (value.length > 0 && typeof value[0] === 'object') {\n      treeValue = (value as TreeOptionData[]).map((val) => val.value);\n    } else if (value.length) {\n      treeValue = value as TreeNodeValue[];\n    }\n  } else if (value) {\n    if (typeof value === 'object') {\n      treeValue = [(value as TreeOptionData).value];\n    } else {\n      treeValue = [value];\n    }\n  }\n  return treeValue;\n};\n\n/**\n * 按数据类型计算通用数值\n * @param value\n * @param showAllLevels\n * @param multiple\n * @returns\n */\nexport const getCascaderValue = (value: CascaderValue, valueType: TdCascaderProps['valueType'], multiple: boolean) => {\n  if (valueType === 'single') {\n    return value;\n  }\n  if (multiple) {\n    return (value as Array<CascaderValue>).map((item: TreeNodeValue[]) => item[item.length - 1]);\n  }\n  return value[(value as Array<CascaderValue>).length - 1];\n};\n\n/**\n * 空值校验\n * 补充value为Number时的空值校验逻辑，排除NaN\n * @param value\n * @returns\n */\nexport function isEmptyValues(value: unknown): boolean {\n  if (typeof value === 'number' && !isNaN(value)) return false;\n  return isEmpty(value);\n}\n\n/**\n * 初始化数据校验\n * @param value\n * @param cascaderContext\n * @returns boolean\n */\nexport function isValueInvalid(value: CascaderValue, cascaderContext: CascaderContextType) {\n  const { multiple, showAllLevels } = cascaderContext;\n  return (multiple && !Array.isArray(value)) || (!multiple && Array.isArray(value) && !showAllLevels);\n}\n"],"names":["getSingleContent","cascaderContext","value","multiple","treeStore","showAllLevels","Array","isArray","node","getNodes","length","path","getPath","map","label","join","getMultipleContent","item","getFullPathLabel","filter","getPanels","treeNodes","panels","forEach","level","push","separator","getTreeValue","treeValue","val","getCascaderValue","valueType","isEmptyValues","isNaN","isEmpty","isValueInvalid"],"mappings":";;;;;;;;;AAgBO,SAASA,gBAAT,CAA0BC,eAA1B,EAAwE;AAC7E,EAAA,IAAQC,KAAR,GAAsDD,eAAtD,CAAQC,KAAR;AAAA,MAAeC,QAAf,GAAsDF,eAAtD,CAAeE,QAAf;AAAA,MAAyBC,SAAzB,GAAsDH,eAAtD,CAAyBG,SAAzB;AAAA,MAAoCC,aAApC,GAAsDJ,eAAtD,CAAoCI,aAApC,CAAA;AACA,EAAA,IAAIF,YAAY,CAACD,KAAjB,EAA+B,OAAA,EAAA,CAAA;EAE3B,IAAAI,KAAA,CAAMC,OAAN,CAAcL,KAAd,CAAA,EAA6B,OAAA,EAAA,CAAA;EACjC,IAAMM,IAAO,GAAAJ,SAAA,IAAaA,SAAU,CAAAK,QAAV,CAAmBP,KAAnB,CAA1B,CAAA;;AACI,EAAA,IAAA,EAAEM,IAAQ,IAAAA,IAAA,CAAKE,MAAf,CAAA,EAAwB;AACnB,IAAA,OAAAR,KAAA,CAAA;AACT,GAAA;;EACA,IAAMS,IAAO,GAAAH,IAAA,IAAQA,IAAK,CAAA,CAAA,CAAL,CAAQI,OAAR,EAArB,CAAA;;AACI,EAAA,IAAAD,IAAA,IAAQA,KAAKD,MAAb,EAAqB;AACvB,IAAA,OAAOL,aAAgB,GAAAM,IAAA,CAAKE,GAAL,CAAS,UAACL,KAAD,EAAA;MAAA,OAAoBA,KAAK,CAAAM,KAAzB,CAAA;AAAA,KAAT,CAAyCC,CAAAA,IAAzC,CAA8C,KAA9C,CAAA,GAAuDJ,IAAK,CAAAA,IAAA,CAAKD,MAAL,GAAc,CAAd,CAAL,CAAsBI,KAApG,CAAA;AACF,GAAA;;AACO,EAAA,OAAAZ,KAAA,CAAA;AACT,CAAA;AAQO,SAASc,kBAAT,CAA4Bf,eAA5B,EAAkE;AACvE,EAAA,IAAQC,KAAR,GAAsDD,eAAtD,CAAQC,KAAR;AAAA,MAAeC,QAAf,GAAsDF,eAAtD,CAAeE,QAAf;AAAA,MAAyBC,SAAzB,GAAsDH,eAAtD,CAAyBG,SAAzB;AAAA,MAAoCC,aAApC,GAAsDJ,eAAtD,CAAoCI,aAApC,CAAA;AAEA,EAAA,IAAI,CAACF,QAAL,EAAe,OAAO,EAAP,CAAA;EACf,IAAIA,QAAY,IAAA,CAACG,KAAM,CAAAC,OAAN,CAAcL,KAAd,CAAjB,EAAuC,OAAO,EAAP,CAAA;EAEvC,IAAMM,IAAO,GAAAJ,SAAA,IAAaA,SAAU,CAAAK,QAAV,CAAmBP,KAAnB,CAA1B,CAAA;AACA,EAAA,IAAI,CAACM,IAAL,EAAW,OAAO,EAAP,CAAA;AAEH,EAAA,OAAAN,KAAA,CACLW,GADK,CACD,UAACI,IAAD,EAAyB;AACtBT,IAAAA,IAAAA,KAAAA,GAAOJ,SAAU,CAAAK,QAAV,CAAmBQ,IAAnB,CAAPT,CAAAA;AACN,IAAA,OAAOH,gBAAgBa,gBAAiBV,CAAAA,KAAAA,CAAK,CAALA,CAAAA,IAAWA,MAAK,EAALA,CAAQM,KAA3D,CAAA;AACD,GAJK,CAKLK,CAAAA,MALK,CAKE,UAACF,IAAD,EAAA;IAAA,OAAU,CAAC,CAACA,IAAZ,CAAA;AAAA,GALF,CAAA,CAAA;AAMV,CAAA;AAOO,SAASG,SAAT,CAAmBC,SAAnB,EAAgE;EACrE,IAAMC,SAAuB,EAA7B,CAAA;AACUD,EAAAA,SAAA,CAAAE,OAAA,CAAQ,UAACf,IAAD,EAAoB;AAChC,IAAA,IAAAc,MAAA,CAAOd,KAAKgB,KAAZ,CAAA,EAAoB;MACfF,MAAA,CAAAd,IAAA,CAAKgB,KAAL,CAAA,CAAYC,IAAZ,CAAiBjB,IAAjB,CAAA,CAAA;AACF,KAFH,MAEG;MACEc,MAAA,CAAAd,IAAA,CAAKgB,KAAL,CAAA,GAAc,CAAChB,IAAD,CAAd,CAAA;AACT,KAAA;GALQ,CAAA,CAAA;AAOH,EAAA,OAAAc,MAAA,CAAA;AACT,CAAA;AAOgB,SAAAJ,gBAAA,CAAiBV,IAAjB,EAAkD;EAAA,IAAjBkB,SAAiB,uEAAL,GAAK,CAAA;EACzD,OAAAlB,IAAA,KAAAA,IAAAA,IAAAA,IAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAA,CACHI,OADG,EAEJC,CAAAA,GAFI,CAEA,UAACL,KAAD,EAAA;IAAA,OAAoBA,KAAK,CAAAM,KAAzB,CAAA;AAAA,GAFA,CAGJC,CAAAA,IAHI,CAGCW,SAHD,CAAA,CAAA;AAIT,CAAA;IAOaC,YAAA,GAAe,SAAfA,YAAe,CAACzB,KAAD,EAAyC;EACnE,IAAI0B,YAA6B,EAAjC,CAAA;;AACI,EAAA,IAAAtB,KAAA,CAAMC,OAAN,CAAcL,KAAd,CAAA,EAAsB;AACxB,IAAA,IAAIA,MAAMQ,MAAN,GAAe,CAAf,IAAoB,OAAOR,CAAAA,KAAA,CAAM,CAAN,CAAP,CAAA,KAAoB,QAA5C,EAAsD;AACpD0B,MAAAA,SAAA,GAAa1B,KAA2B,CAAAW,GAA3B,CAA+B,UAACgB,GAAD,EAAA;QAAA,OAASA,IAAI3B,KAAb,CAAA;AAAA,OAA/B,CAAb,CAAA;AACF,KAFA,MAEA,IAAWA,MAAMQ,MAAjB,EAAyB;AACXkB,MAAAA,SAAA,GAAA1B,KAAA,CAAA;AACd,KAAA;GALE,UAMOA,OAAO;AACZ,IAAA,IAAA,OAAOA,CAAAA,KAAP,CAAiB,KAAA,QAAjB,EAA2B;AACjB0B,MAAAA,SAAA,GAAA,CAAE1B,MAAyBA,KAA3B,CAAA,CAAA;AACP,KAFH,MAEG;MACL0B,SAAA,GAAY,CAAC1B,KAAD,CAAZ,CAAA;AACF,KAAA;AACF,GAAA;;AACO,EAAA,OAAA0B,SAAA,CAAA;AACT,EAhBa;AAyBN,IAAME,gBAAmB,GAAA,SAAnBA,gBAAmB,CAAC5B,KAAD,EAAuB6B,SAAvB,EAAgE5B,QAAhE,EAAsF;EACpH,IAAI4B,cAAc,QAAlB,EAA4B;AACnB,IAAA,OAAA7B,KAAA,CAAA;AACT,GAAA;;AACA,EAAA,IAAIC,QAAJ,EAAc;AACZ,IAAA,OAAQD,MAA+BW,GAA/B,CAAmC,UAACI,IAAD,EAAA;AAAA,MAAA,OAA2BA,IAAK,CAAAA,IAAA,CAAKP,MAAL,GAAc,CAAd,CAAhC,CAAA;AAAA,KAAnC,CAAR,CAAA;AACF,GAAA;;AACO,EAAA,OAAAR,KAAA,CAAOA,MAA+BQ,MAA/B,GAAwC,CAA/C,CAAA,CAAA;AACT,EARO;AAgBA,SAASsB,aAAT,CAAuB9B,KAAvB,EAAgD;AACrD,EAAA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAAC+B,MAAM/B,MAAxC,EAAuD,OAAA,KAAA,CAAA;EACvD,OAAOgC,QAAQhC,MAAf,CAAA;AACF,CAAA;AAQgB,SAAAiC,cAAA,CAAejC,KAAf,EAAqCD,eAArC,EAA2E;AACnF,EAAA,IAAEE,QAAF,GAA8BF,eAA9B,CAAEE,QAAF;AAAA,MAAYE,aAAZ,GAA8BJ,eAA9B,CAAYI,aAAZ,CAAA;EACN,OAAQF,QAAY,IAAA,CAACG,KAAM,CAAAC,OAAN,CAAcL,KAAd,CAAb,IAAuC,CAACC,QAAD,IAAaG,KAAM,CAAAC,OAAN,CAAcL,KAAd,CAAb,IAAqC,CAACG,aAArF,CAAA;AACF;;;;"}