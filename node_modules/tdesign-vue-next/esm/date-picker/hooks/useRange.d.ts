import { TdDateRangePickerProps } from '../type';
export declare const PARTIAL_MAP: {
    first: string;
    second: string;
};
export default function useRange(props: TdDateRangePickerProps): {
    year: import("vue").Ref<number[]>;
    month: import("vue").Ref<number[]>;
    value: import("vue").Ref<import("../type").DateRangeValue>;
    time: import("vue").Ref<string[]>;
    inputValue: import("vue").Ref<string | number | string[] | number[]>;
    popupVisible: import("vue").Ref<boolean>;
    rangeInputProps: import("vue").ComputedRef<{
        ref: import("vue").Ref<any>;
        clearable: boolean;
        prefixIcon: (h: typeof import("vue").h) => import("../../common").SlotReturnValue;
        readonly: boolean;
        separator: string;
        placeholder: any;
        activeIndex: number;
        suffixIcon: (h: typeof import("vue").h) => import("../../common").SlotReturnValue;
        class: {
            [x: string]: boolean;
        };
        onClick: ({ position }: any) => void;
        onClear: ({ e }: {
            e: MouseEvent;
        }) => void;
        onBlur: (newVal: string[], { e, position }: any) => void;
        onFocus: (newVal: string[], { e, position }: any) => void;
        onChange: (newVal: string[], { e, position }: any) => void;
        onEnter: (newVal: string[]) => void;
        disabled?: boolean;
        format?: import("../..").InputFormatType | import("../..").InputFormatType[];
        inputProps?: import("../..").TdInputProps | import("../..").TdInputProps[];
        label?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        showClearIconOnEmpty?: boolean;
        size?: "small" | "medium" | "large";
        status?: "error" | "default" | "success" | "warning";
        suffix?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        tips?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        value?: import("../..").RangeInputValue;
        defaultValue?: import("../..").RangeInputValue;
        modelValue?: import("../..").RangeInputValue;
        onMouseenter?: (context: {
            e: MouseEvent;
        }) => void;
        onMouseleave?: (context: {
            e: MouseEvent;
        }) => void;
    }>;
    popupProps: import("vue").ComputedRef<{
        overlayInnerStyle: import("../../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../../common").Styles);
        overlayClassName: import("../../common").ClassName[];
        onVisibleChange: (visible: boolean, context: any) => void;
        attach?: import("../../common").AttachNode;
        content?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        default?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        delay?: number | number[];
        destroyOnClose?: boolean;
        disabled?: boolean;
        hideEmptyPopup?: boolean;
        overlayInnerClassName?: import("../../common").ClassName;
        overlayStyle?: import("../../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../../common").Styles);
        placement?: import("../..").PopupPlacement;
        showArrow?: boolean;
        trigger?: "click" | "focus" | "context-menu" | "hover";
        triggerElement?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        visible?: boolean;
        defaultVisible?: boolean;
        modelValue?: boolean;
        zIndex?: number;
        onScroll?: (context: {
            e: WheelEvent;
        }) => void;
        expandAnimation: boolean;
    }>;
    isHoverCell: import("vue").Ref<boolean>;
    activeIndex: import("vue").Ref<number>;
    isFirstValueSelected: import("vue").Ref<boolean>;
    cacheValue: import("vue").Ref<string | number | string[] | number[]>;
    onChange: import("../../hooks").ChangeHandler<import("../type").DateRangeValue>;
};
