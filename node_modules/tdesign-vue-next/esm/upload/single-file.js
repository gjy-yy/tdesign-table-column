/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode } from 'vue';
import { CloseCircleFilledIcon, ErrorCircleFilledIcon, CheckCircleFilledIcon } from 'tdesign-icons-vue-next';
import { Loading } from '../loading/index.js';
import props from './props.js';
import { abridgeName } from './util.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useConfig } from '../config-provider/useConfig.js';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import '../utils/dom.js';
import '../_chunks/dep-756c7fb2.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../utils/withInstall.js';
import '../loading/style';
import '../loading/type.js';

var SingleFileProps = {
  file: {
    type: Object,
    "default": function _default() {
      return null;
    }
  },
  loadingFile: {
    type: Object,
    "default": function _default() {
      return null;
    }
  },
  percent: {
    type: Number
  },
  showUploadProgress: props.showUploadProgress,
  theme: props.theme,
  placeholder: props.placeholder,
  onRemove: Function
};
var SingleFile = defineComponent({
  name: "TUploadSingleFile",
  props: SingleFileProps,
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();

    var _useConfig = useConfig("upload"),
        prefix = _useConfig.classPrefix;

    var UPLOAD_NAME = usePrefixClass("upload");

    var _useGlobalIcon = useGlobalIcon({
      CloseCircleFilledIcon: CloseCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon,
      CheckCircleFilledIcon: CheckCircleFilledIcon
    }),
        CloseCircleFilledIcon$1 = _useGlobalIcon.CloseCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon,
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon;

    var showProgress = computed(function () {
      return !!(props2.loadingFile && props2.loadingFile.status === "progress");
    });
    var inputName = computed(function () {
      var fileName = props2.file && props2.file.name;
      var loadingName = props2.loadingFile && props2.loadingFile.name;
      return showProgress.value ? loadingName : fileName;
    });
    var inputText = computed(function () {
      return inputName.value || props2.placeholder;
    });
    var inputTextClass = computed(function () {
      return ["".concat(prefix.value, "-input__inner"), _defineProperty({}, "".concat(UPLOAD_NAME.value, "__placeholder"), !inputName.value)];
    });
    var classes = computed(function () {
      return ["".concat(UPLOAD_NAME.value, "__single"), "".concat(UPLOAD_NAME.value, "__single-").concat(props2.theme)];
    });

    var renderProgress = function renderProgress() {
      if (props2.loadingFile.status === "fail") {
        return createVNode(ErrorCircleFilledIcon$1, null, null);
      }

      if (props2.showUploadProgress) {
        return createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-progress")
        }, [createVNode(Loading, null, null), createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-percent")
        }, [Math.min(props2.percent, 99), "%"])]);
      }
    };

    var renderFilePreviewAsText = function renderFilePreviewAsText() {
      if (!inputName.value || props2.theme !== "file") return;
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__single-display-text ").concat(UPLOAD_NAME.value, "__display-text--margin")
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-name")
      }, [inputName.value]), showProgress.value ? renderProgress() : createVNode(CloseCircleFilledIcon$1, {
        "class": "".concat(UPLOAD_NAME.value, "__icon-delete"),
        "onClick": function onClick(_ref2) {
          var e = _ref2.e;
          return props2.onRemove(e);
        }
      }, null)]);
    };

    var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
      if (props2.theme !== "file-input") return;

      var renderResult = function renderResult() {
        if (!!props2.loadingFile && props2.loadingFile.status === "fail") {
          return createVNode(ErrorCircleFilledIcon$1, null, null);
        }

        if (props2.file && props2.file.name && !props2.loadingFile) {
          return createVNode(CheckCircleFilledIcon$1, null, null);
        }

        return "";
      };

      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__single-input-preview ").concat(prefix.value, "-input")
      }, [createVNode("div", {
        "class": inputTextClass.value
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-input-text")
      }, [abridgeName(inputText.value, 4, 6)]), showProgress.value && renderProgress(), renderResult()])]);
    };

    return function () {
      return createVNode("div", {
        "class": classes.value
      }, [renderFilePreviewAsInput(), renderTNodeJSX("default"), renderFilePreviewAsText()]);
    };
  }
});

export { SingleFile as default };
//# sourceMappingURL=single-file.js.map
