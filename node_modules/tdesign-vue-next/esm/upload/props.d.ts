import { TdUploadProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeUpload: {
        type: PropType<(file: File | import("./type").UploadFile) => boolean | Promise<boolean>>;
    };
    data: {
        type: PropType<Record<string, any> | ((file: File) => Record<string, any>)>;
    };
    default: {
        type: PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    fileListDisplay: {
        type: PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    files: {
        type: PropType<import("./type").UploadFile[]>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").UploadFile[]>;
        default: any;
    };
    defaultFiles: {
        type: PropType<import("./type").UploadFile[]>;
    };
    format: {
        type: PropType<(file: File) => import("./type").UploadFile>;
    };
    formatResponse: {
        type: PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
    };
    headers: {
        type: PropType<{
            [key: string]: string;
        }>;
    };
    isBatchUpload: BooleanConstructor;
    locale: {
        type: PropType<import("..").UploadConfig>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
        default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
        validator(val: TdUploadProps['method']): boolean;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requestMethod: {
        type: PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
    };
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizeLimit: {
        type: PropType<number | import("./type").SizeLimitObj>;
    };
    theme: {
        type: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: TdUploadProps['theme']): boolean;
    };
    tips: {
        type: StringConstructor;
        default: string;
    };
    trigger: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("../common").SlotReturnValue)>;
    };
    uploadAllFilesInOneRequest: BooleanConstructor;
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: PropType<() => void>;
    onChange: PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
    onDragenter: PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDragleave: PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDrop: PropType<(context: {
        e: DragEvent;
    }) => void>;
    onFail: PropType<(options: {
        e: ProgressEvent<EventTarget>;
        file: import("./type").UploadFile;
    }) => void>;
    onPreview: PropType<(options: {
        file: import("./type").UploadFile;
        e: MouseEvent;
    }) => void>;
    onProgress: PropType<(options: import("./type").ProgressContext) => void>;
    onRemove: PropType<(context: import("./type").UploadRemoveContext) => void>;
    onSelectChange: PropType<(files: import("./type").UploadFile[]) => void>;
    onSuccess: PropType<(context: import("./type").SuccessContext) => void>;
};
export default _default;
