/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { isVNode, defineComponent, toRefs, reactive, createVNode, computed, resolveComponent } from 'vue';
import { UploadIcon } from 'tdesign-icons-vue-next';
import Dragger from './dragger.js';
import ImageCard from './image.js';
import FlowList from './flow-list.js';
import { Button } from '../button/index.js';
import { Dialog } from '../dialog/index.js';
import SingleFile from './single-file.js';
import props from './props.js';
import { useFormDisabled } from '../form/hooks.js';
import { useBatchUpload, useComponentsStatus, useImgPreview, useDragger, useRemove, useActions } from './hooks.js';
import { useGlobalIcon } from '../hooks/useGlobalIcon.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useContent } from '../hooks/tnode.js';
import useVModel from '../hooks/useVModel.js';
import { useConfig } from '../config-provider/useConfig.js';
import '../loading/index.js';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../_chunks/dep-756c7fb2.js';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import 'lodash/isObject';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/type.js';
import '../utils/withInstall.js';
import '../loading/style';
import '../loading/type.js';
import './util.js';
import '../button/button.js';
import '../button/props.js';
import '../hooks/useRipple.js';
import '../hooks/useKeepAnimation.js';
import '../utils/set-style.js';
import '../button/style';
import '../button/type.js';
import '../dialog/dialog.js';
import '../dialog/props.js';
import '../dialog/hooks.js';
import '@babel/runtime/helpers/typeof';
import '../hooks/useDestroyOnClose.js';
import '../dialog/stack.js';
import '../dialog/style';
import '../dialog/type.js';
import '../dialog/plugin.js';
import 'lodash/findIndex';
import '../_common/js/log/index.js';
import '../_common/js/log/log.js';
import './useUpload.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import 'lodash/without';
import '../_common/js/upload/xhr.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var _Upload = defineComponent({
  name: "TUpload",
  props: props,
  setup: function setup(props2, _ref) {
    var expose = _ref.expose;
    var renderTNodeContent = useContent();

    var _useConfig = useConfig("upload"),
        prefix = _useConfig.classPrefix,
        globalConfig = _useConfig.globalConfig;

    var UPLOAD_NAME = usePrefixClass("upload");

    var _useGlobalIcon = useGlobalIcon({
      UploadIcon: UploadIcon
    }),
        UploadIcon$1 = _useGlobalIcon.UploadIcon;

    var _toRefs = toRefs(props2),
        files = _toRefs.files,
        modelValue = _toRefs.modelValue;

    var _useBatchUpload = useBatchUpload(props2),
        canBatchUpload = _useBatchUpload.canBatchUpload,
        uploadInOneRequest = _useBatchUpload.uploadInOneRequest;

    var _useVModel = useVModel(files, modelValue, props2.defaultFiles || [], props2.onChange, "files"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        uploadValue = _useVModel2[0],
        setUploadValue = _useVModel2[1];

    var uploadCtx = reactive({
      uploadValue: uploadValue,
      setUploadValue: setUploadValue,
      uploadInOneRequest: uploadInOneRequest,
      canBatchUpload: canBatchUpload,
      loadingFile: null,
      percent: 0,
      toUploadFiles: [],
      errorMsg: ""
    });
    var disabled = useFormDisabled();

    var _useComponentsStatus = useComponentsStatus(props2, uploadCtx),
        showUploadList = _useComponentsStatus.showUploadList,
        showTips = _useComponentsStatus.showTips,
        showErrorMsg = _useComponentsStatus.showErrorMsg,
        singleDraggable = _useComponentsStatus.singleDraggable;

    var _useImgPreview = useImgPreview(props2),
        showImageViewUrl = _useImgPreview.showImageViewUrl,
        showImageViewDialog = _useImgPreview.showImageViewDialog,
        handlePreviewImg = _useImgPreview.handlePreviewImg,
        cancelPreviewImgDialog = _useImgPreview.cancelPreviewImgDialog;

    var _useDragger = useDragger(props2, disabled),
        handleDragenter = _useDragger.handleDragenter,
        handleDragleave = _useDragger.handleDragleave,
        dragActive = _useDragger.dragActive;

    var _useRemove = useRemove(props2, uploadCtx),
        handleFileInputRemove = _useRemove.handleFileInputRemove,
        handleSingleRemove = _useRemove.handleSingleRemove,
        handleMultipleRemove = _useRemove.handleMultipleRemove,
        handleListRemove = _useRemove.handleListRemove;

    var _useActions = useActions(props2, uploadCtx, disabled),
        handleChange = _useActions.handleChange,
        multipleUpload = _useActions.multipleUpload,
        triggerUpload = _useActions.triggerUpload,
        cancelUpload = _useActions.cancelUpload,
        handleDragChange = _useActions.handleDragChange,
        upload = _useActions.upload,
        inputRef = _useActions.inputRef;

    expose({
      triggerUpload: triggerUpload,
      setPercent: function setPercent(val) {
        uploadCtx.percent = val;
      }
    });

    var renderInput = function renderInput() {
      return createVNode("input", {
        "ref": inputRef,
        "type": "file",
        "disabled": disabled.value,
        "onChange": handleChange,
        "multiple": props2.multiple,
        "accept": props2.accept,
        "hidden": true
      }, null);
    };

    var renderSingleDisplay = function renderSingleDisplay(triggerElement) {
      var _uploadValue$value;

      return !props2.draggable && ["file", "file-input"].includes(props2.theme) && createVNode(SingleFile, {
        "file": uploadValue.value && uploadValue.value[0],
        "loadingFile": uploadCtx.loadingFile,
        "percent": uploadCtx.percent,
        "theme": props2.theme,
        "onRemove": handleSingleRemove,
        "showUploadProgress": props2.showUploadProgress,
        "placeholder": props2.placeholder
      }, {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(prefix.value, "-upload__trigger"),
            "onclick": triggerUpload
          }, [triggerElement, !!(props2.theme === "file-input" && (_uploadValue$value = uploadValue.value) !== null && _uploadValue$value !== void 0 && _uploadValue$value.length) && createVNode(Button, {
            "theme": "primary",
            "variant": "text",
            "onClick": handleFileInputRemove
          }, {
            "default": function _default() {
              return ["\u5220\u9664"];
            }
          })])];
        }
      });
    };

    var renderDraggerTrigger = function renderDraggerTrigger() {
      var params = {
        dragActive: dragActive.value,
        uploadingFile: props2.multiple ? uploadCtx.toUploadFiles : uploadCtx.loadingFile
      };
      var triggerElement = renderTNodeContent("default", "trigger", {
        params: params
      });

      if (!Array.isArray(triggerElement)) {
        triggerElement = {};
      }

      return createVNode(Dragger, {
        "showUploadProgress": props2.showUploadProgress,
        "loadingFile": uploadCtx.loadingFile,
        "percent": uploadCtx.percent,
        "file": uploadValue.value && uploadValue.value[0],
        "theme": props2.theme,
        "autoUpload": props2.autoUpload,
        "onChange": handleDragChange,
        "onDragenter": handleDragenter,
        "onDragleave": handleDragleave,
        "onCancel": cancelUpload,
        "onClick": triggerUpload,
        "onRemove": handleSingleRemove,
        "onUpload": upload,
        "locale": props2.locale
      }, _isSlot(triggerElement) ? triggerElement : {
        "default": function _default() {
          return [triggerElement];
        }
      });
    };

    var uploadListTriggerText = computed(function () {
      var _localeFromProps$trig, _uploadCtx$toUploadFi, _uploadCtx$uploadValu;

      var localeFromProps = props2.locale;
      var uploadText = globalConfig.value.triggerUploadText.fileInput || (localeFromProps === null || localeFromProps === void 0 ? void 0 : (_localeFromProps$trig = localeFromProps.triggerUploadText) === null || _localeFromProps$trig === void 0 ? void 0 : _localeFromProps$trig.fileInput);

      if (((_uploadCtx$toUploadFi = uploadCtx.toUploadFiles) === null || _uploadCtx$toUploadFi === void 0 ? void 0 : _uploadCtx$toUploadFi.length) > 0 || ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
        var _uploadCtx$uploadValu2;

        if (props2.theme === "file-input" || ((_uploadCtx$uploadValu2 = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu2 === void 0 ? void 0 : _uploadCtx$uploadValu2.length) > 0 && canBatchUpload.value) {
          var _localeFromProps$trig2;

          uploadText = (localeFromProps === null || localeFromProps === void 0 ? void 0 : (_localeFromProps$trig2 = localeFromProps.triggerUploadText) === null || _localeFromProps$trig2 === void 0 ? void 0 : _localeFromProps$trig2.reupload) || globalConfig.value.triggerUploadText.reupload;
        } else {
          var _localeFromProps$trig3;

          uploadText = (localeFromProps === null || localeFromProps === void 0 ? void 0 : (_localeFromProps$trig3 = localeFromProps.triggerUploadText) === null || _localeFromProps$trig3 === void 0 ? void 0 : _localeFromProps$trig3.continueUpload) || globalConfig.value.triggerUploadText.continueUpload;
        }
      }

      return uploadText;
    });

    var renderTrigger = function renderTrigger() {
      var getDefaultTrigger = function getDefaultTrigger() {
        var localeFromProps = props2.locale;

        if (props2.theme === "file-input" || showUploadList.value) {
          var _localeFromProps$trig4;

          return createVNode(resolveComponent("t-button"), {
            "variant": "outline"
          }, {
            "default": function _default() {
              return [(localeFromProps === null || localeFromProps === void 0 ? void 0 : (_localeFromProps$trig4 = localeFromProps.triggerUploadText) === null || _localeFromProps$trig4 === void 0 ? void 0 : _localeFromProps$trig4.fileInput) || globalConfig.value.triggerUploadText.fileInput];
            }
          });
        }

        var iconSlot = {
          icon: function icon() {
            return createVNode(UploadIcon$1, null, null);
          }
        };
        return createVNode(Button, {
          "variant": "outline"
        }, _objectSpread({
          "default": function _default() {
            return [uploadListTriggerText.value];
          }
        }, iconSlot));
      };

      var defaultNode = getDefaultTrigger();
      return renderTNodeContent("default", "trigger", defaultNode);
    };

    var renderCustom = function renderCustom(triggerElement) {
      if (props2.theme !== "custom") return;
      return props2.draggable ? renderDraggerTrigger() : createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__trigger"),
        "onclick": triggerUpload
      }, [triggerElement]);
    };

    var renderImgCard = function renderImgCard() {
      return !props2.draggable && props2.theme === "image" && createVNode(ImageCard, {
        "files": uploadValue.value,
        "loadingFile": uploadCtx.loadingFile,
        "percent": uploadCtx.percent,
        "showUploadProgress": props2.showUploadProgress,
        "placeholder": props2.placeholder,
        "multiple": props2.multiple,
        "max": props2.max,
        "disabled": disabled.value,
        "onClick": triggerUpload,
        "onRemove": handleMultipleRemove,
        "onImgPreview": handlePreviewImg,
        "locale": props2.locale
      }, null);
    };

    var renderFlowList = function renderFlowList(triggerElement) {
      var theme = props2.theme;

      if (props2.multiple && props2.theme === "file" && props2.draggable) {
        theme = "file-flow";
      }

      return showUploadList.value && createVNode(FlowList, {
        "files": uploadValue.value,
        "placeholder": props2.placeholder,
        "autoUpload": props2.autoUpload,
        "toUploadFiles": uploadCtx.toUploadFiles,
        "theme": theme,
        "batchUpload": uploadCtx.canBatchUpload,
        "showUploadProgress": props2.showUploadProgress,
        "allowUploadDuplicateFile": props2.allowUploadDuplicateFile,
        "onRemove": handleListRemove,
        "onUpload": multipleUpload,
        "onCancel": cancelUpload,
        "onImgPreview": handlePreviewImg,
        "onChange": handleDragChange,
        "onDragenter": handleDragenter,
        "onDragleave": handleDragleave,
        "locale": props2.locale
      }, {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(UPLOAD_NAME.value, "__trigger"),
            "onclick": triggerUpload
          }, [triggerElement])];
        }
      });
    };

    var renderDialog = function renderDialog() {
      return ["image", "image-flow", "custom"].includes(props2.theme) && createVNode(Dialog, {
        "visible": showImageViewDialog.value,
        "showOverlay": true,
        "width": "auto",
        "top": "10%",
        "class": "".concat(UPLOAD_NAME.value, "__dialog"),
        "footer": false,
        "header": false,
        "onClose": cancelPreviewImgDialog
      }, {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(prefix.value, "__dialog-body-img-box")
          }, [createVNode("img", {
            "src": showImageViewUrl.value,
            "alt": ""
          }, null)])];
        }
      });
    };

    var tipsClasses = computed(function () {
      return ["".concat(UPLOAD_NAME.value, "__tips ").concat(prefix.value, "-size-s")];
    });
    var errorClasses = computed(function () {
      return tipsClasses.value.concat("".concat(UPLOAD_NAME.value, "__tips-error"));
    });
    return function () {
      var triggerElement = renderTrigger();
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value)
      }, [renderInput(), renderCustom(triggerElement), renderSingleDisplay(triggerElement), singleDraggable.value && renderDraggerTrigger(), renderImgCard(), renderFlowList(triggerElement), renderDialog(), !uploadCtx.errorMsg && showTips.value && createVNode("small", {
        "class": tipsClasses.value
      }, [props2.tips]), showErrorMsg.value && createVNode("small", {
        "class": errorClasses.value
      }, [uploadCtx.errorMsg])]);
    };
  }
});

export { _Upload as default };
//# sourceMappingURL=upload.js.map
