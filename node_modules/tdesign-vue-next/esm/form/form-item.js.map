{"version":3,"file":"form-item.js","sources":["../../src/form/form-item.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  VNode,\n  watch,\n} from 'vue';\nimport {\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n} from 'tdesign-icons-vue-next';\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport lodashGet from 'lodash/get';\nimport lodashSet from 'lodash/set';\nimport isNil from 'lodash/isNil';\nimport lodashTemplate from 'lodash/template';\nimport { validate } from './form-model';\nimport {\n  AllValidateResult,\n  Data,\n  FormErrorMessage,\n  FormItemValidateMessage,\n  FormRule,\n  ValidateTriggerType,\n  ValueType,\n} from './type';\nimport props from './form-item-props';\nimport {\n  AnalysisValidateResult,\n  ErrorListType,\n  FormInjectionKey,\n  FormItemContext,\n  FormItemInjectionKey,\n  SuccessListType,\n  useCLASSNAMES,\n  ValidateStatus,\n} from './const';\n\nimport { useConfig, usePrefixClass, useTNodeJSX } from '../hooks';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\n\ntype IconConstructor = typeof TdErrorCircleFilledIcon;\n\nexport type FormItemValidateResult<T extends Data = Data> = { [key in keyof T]: boolean | AllValidateResult[] };\n\nexport default defineComponent({\n  name: 'TFormItem',\n\n  props: { ...props },\n  setup(props, { slots }) {\n    const renderContent = useTNodeJSX();\n    const CLASS_NAMES = useCLASSNAMES();\n    const { globalConfig } = useConfig('form');\n    const { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon } = useGlobalIcon({\n      CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n      CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n      ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n    });\n    const form = inject(FormInjectionKey, undefined);\n\n    const FORM_ITEM_CLASS_PREFIX = usePrefixClass('form-item__');\n\n    const needRequiredMark = computed(() => {\n      const { requiredMark } = props;\n      if (typeof requiredMark === 'boolean') return requiredMark;\n      const parentRequiredMark =\n        form?.requiredMark === undefined ? globalConfig.value.requiredMark : form?.requiredMark;\n      const isRequired = innerRules.value.filter((rule) => rule.required).length > 0;\n      return Boolean(parentRequiredMark && isRequired);\n    });\n\n    const hasLabel = computed(() => slots.label || props.label);\n    const hasColon = computed(() => !!(form?.colon && hasLabel.value));\n    const FROM_LABEL = usePrefixClass('form__label');\n    const labelAlign = computed(() => (isNil(props.labelAlign) ? form?.labelAlign : props.labelAlign));\n    const labelWidth = computed(() => (isNil(props.labelWidth) ? form?.labelWidth : props.labelWidth));\n\n    const labelClasses = computed(() => [\n      CLASS_NAMES.value.label,\n      {\n        [`${FROM_LABEL.value}--required`]: needRequiredMark.value,\n        [`${FROM_LABEL.value}--colon`]: hasColon.value,\n        [`${FROM_LABEL.value}--top`]: hasLabel.value && (labelAlign.value === 'top' || !labelWidth.value),\n        [`${FROM_LABEL.value}--left`]: labelAlign.value === 'left' && labelWidth.value,\n        [`${FROM_LABEL.value}--right`]: labelAlign.value === 'right' && labelWidth.value,\n      },\n    ]);\n\n    const renderLabel = () => {\n      if (Number(labelWidth.value) === 0) return;\n\n      let labelStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (typeof labelWidth.value === 'number') {\n          labelStyle = { width: `${labelWidth.value}px` };\n        } else {\n          labelStyle = { width: labelWidth.value };\n        }\n      }\n\n      return (\n        <div class={labelClasses.value} style={labelStyle}>\n          <label for={props.for}>{renderContent('label')}</label>\n        </div>\n      );\n    };\n\n    /** Suffix Icon */\n    const getDefaultIcon = (): VNode => {\n      const resultIcon = (Icon: IconConstructor) => (\n        <span class={CLASS_NAMES.value.status}>\n          <Icon />\n        </span>\n      );\n      const list = errorList.value;\n      if (verifyStatus.value === ValidateStatus.SUCCESS) {\n        return resultIcon(CheckCircleFilledIcon);\n      }\n      if (list?.[0]) {\n        const type = list[0].type || 'error';\n        const icon =\n          {\n            error: CloseCircleFilledIcon,\n            warning: ErrorCircleFilledIcon,\n          }[type] || CheckCircleFilledIcon;\n        return resultIcon(icon as IconConstructor);\n      }\n      return null;\n    };\n    const renderSuffixIcon = () => {\n      const { statusIcon } = props;\n      if (statusIcon === false) return;\n\n      let resultIcon = renderContent('statusIcon', { defaultNode: getDefaultIcon() });\n      if (resultIcon) return <span class={CLASS_NAMES.value.status}>{resultIcon}</span>;\n      if (resultIcon === false) return;\n\n      resultIcon = form?.renderContent('statusIcon', { defaultNode: getDefaultIcon() });\n      if (resultIcon) return resultIcon;\n    };\n    /** Suffix Icon END */\n\n    /** Content Style */\n    const errorClasses = computed(() => {\n      if (!showErrorMessage.value) return '';\n      if (verifyStatus.value === ValidateStatus.SUCCESS) {\n        return props.successBorder\n          ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(' ')\n          : CLASS_NAMES.value.success;\n      }\n      if (!errorList.value.length) return;\n      const type = errorList.value[0].type || 'error';\n      return type === 'error' ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;\n    });\n    const contentClasses = computed(() => [CLASS_NAMES.value.controls, errorClasses.value]);\n    const contentStyle = computed(() => {\n      let contentStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (typeof labelWidth.value === 'number') {\n          contentStyle = { marginLeft: `${labelWidth.value}px` };\n        } else {\n          contentStyle = { marginLeft: labelWidth.value };\n        }\n      }\n\n      return contentStyle;\n    });\n    /** Content Style END */\n\n    const errorList = ref<ErrorListType[]>([]);\n    const successList = ref<SuccessListType[]>([]);\n    const verifyStatus = ref(ValidateStatus.TO_BE_VALIDATED);\n    const resetValidating = ref(false);\n    const needResetField = ref(false);\n\n    const resetHandler = () => {\n      needResetField.value = false;\n      errorList.value = [];\n      successList.value = [];\n      verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;\n    };\n    const getEmptyValue = (): ValueType => {\n      const type = Object.prototype.toString.call(lodashGet(form?.data, props.name));\n      let emptyValue: ValueType;\n      if (type === '[object String]') {\n        emptyValue = '';\n      }\n      if (type === '[object Array]') {\n        emptyValue = [];\n      }\n      if (type === '[object Object]') {\n        emptyValue = {};\n      }\n      return emptyValue;\n    };\n    const resetField = async (resetType: 'initial' | 'empty' | undefined = form?.resetType) => {\n      if (!props.name) return;\n\n      if (resetType === 'empty') lodashSet(form?.data, props.name, getEmptyValue());\n      else if (resetType === 'initial') lodashSet(form?.data, props.name, initialValue.value);\n\n      await nextTick();\n      if (resetValidating.value) {\n        needResetField.value = true;\n      } else {\n        resetHandler();\n      }\n    };\n\n    const errorMessages = computed<FormErrorMessage>(() => form?.errorMessage ?? globalConfig.value.errorMessage);\n    const innerRules = computed<FormRule[]>(() => {\n      if (props.rules?.length) return props.rules;\n      if (!props.name) return [];\n      const index = `${props.name}`.lastIndexOf('.') || -1;\n      const pRuleName = `${props.name}`.slice(index + 1);\n      return lodashGet(form?.rules, props.name) || lodashGet(form?.rules, pRuleName) || [];\n    });\n\n    const analysisValidateResult = async (trigger: ValidateTriggerType): Promise<AnalysisValidateResult> => {\n      const result: AnalysisValidateResult = {\n        successList: [],\n        errorList: [],\n        rules: [],\n        resultList: [],\n        allowSetValue: false,\n      };\n      result.rules =\n        trigger === 'all'\n          ? innerRules.value\n          : innerRules.value.filter((item) => (item.trigger || 'change') === trigger);\n      if (innerRules.value.length && !result.rules?.length) {\n        return result;\n      }\n      result.allowSetValue = true;\n      result.resultList = await validate(value.value, result.rules);\n      result.errorList = result.resultList\n        .filter((item) => item.result !== true)\n        .map((item: ErrorListType) => {\n          Object.keys(item).forEach((key) => {\n            if (!item.message && errorMessages.value[key]) {\n              const compiled = lodashTemplate(errorMessages.value[key]);\n              const name = typeof props.label === 'string' ? props.label : props.name;\n              item.message = compiled({\n                name,\n                validate: item[key],\n              });\n            }\n          });\n          return item;\n        });\n      // 仅有自定义校验方法才会存在 successList\n      result.successList = result.resultList.filter(\n        (item) => item.result === true && item.message && item.type === 'success',\n      ) as SuccessListType[];\n\n      return result;\n    };\n    const validateHandler = async <T extends Data = Data>(\n      trigger: ValidateTriggerType,\n      showErrorMessage?: boolean,\n    ): Promise<FormItemValidateResult<T>> => {\n      resetValidating.value = true;\n      // undefined | boolean\n      freeShowErrorMessage.value = showErrorMessage;\n      const {\n        successList: innerSuccessList,\n        errorList: innerErrorList,\n        rules,\n        resultList,\n        allowSetValue,\n      } = await analysisValidateResult(trigger);\n\n      if (allowSetValue) {\n        successList.value = innerSuccessList;\n        errorList.value = innerErrorList;\n      }\n      // 根据校验结果设置校验状态\n      if (rules.length) {\n        verifyStatus.value = innerErrorList.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;\n      } else {\n        verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;\n      }\n      // 重置处理\n      if (needResetField.value) {\n        resetHandler();\n      }\n      resetValidating.value = false;\n\n      return {\n        [props.name]: innerErrorList.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n    const validateOnly = async <T extends Data>(trigger: ValidateTriggerType): Promise<FormItemValidateResult<T>> => {\n      const { errorList: innerErrorList, resultList } = await analysisValidateResult(trigger);\n\n      return {\n        [props.name]: innerErrorList.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n\n    const setValidateMessage = (validateMessage: FormItemValidateMessage[]) => {\n      if (!validateMessage && !Array.isArray(validateMessage)) return;\n      if (validateMessage.length === 0) {\n        errorList.value = [];\n        verifyStatus.value = ValidateStatus.SUCCESS;\n      }\n      errorList.value = validateMessage.map((item) => ({ ...item, result: false }));\n      verifyStatus.value = ValidateStatus.FAIL;\n    };\n\n    const value = computed<ValueType>(() => form?.data && lodashGet(form?.data, props.name));\n    const initialValue = ref<ValueType>(undefined);\n    const { name } = toRefs(props);\n    const context: FormItemContext = reactive({\n      name,\n      resetHandler,\n      resetField,\n      validate: validateHandler,\n      validateOnly,\n      setValidateMessage,\n    });\n\n    onMounted(() => {\n      initialValue.value = cloneDeep(value.value);\n      form?.children.push(context);\n    });\n    onBeforeUnmount(() => {\n      if (form) form.children = form?.children.filter((ctx) => ctx !== context);\n    });\n    watch(\n      value,\n      async () => {\n        await validateHandler('change');\n      },\n      { deep: true },\n    );\n\n    const freeShowErrorMessage = ref<boolean>(undefined);\n    const showErrorMessage = computed(() => {\n      if (typeof freeShowErrorMessage.value === 'boolean') return freeShowErrorMessage.value;\n      if (typeof props.showErrorMessage === 'boolean') return props.showErrorMessage;\n      return form?.showErrorMessage;\n    });\n\n    const classes = computed(() => [\n      CLASS_NAMES.value.formItem,\n      FORM_ITEM_CLASS_PREFIX.value + (props.name || ''),\n      {\n        [CLASS_NAMES.value.formItemWithHelp]: helpNode.value,\n        [CLASS_NAMES.value.formItemWithExtra]: extraNode.value,\n      },\n    ]);\n    const helpNode = computed<VNode>(() => {\n      const help = renderContent('help');\n      if (help) return <div class={CLASS_NAMES.value.help}>{help}</div>;\n      return null;\n    });\n    const extraNode = computed<VNode>(() => {\n      const getExtraNode = (content: string) => <div class={CLASS_NAMES.value.extra}>{content}</div>;\n      const list = errorList.value;\n      if (showErrorMessage.value && list?.[0]?.message) {\n        return getExtraNode(list[0].message);\n      }\n      if (successList.value.length) {\n        return getExtraNode(successList.value[0].message);\n      }\n      return null;\n    });\n\n    const handleBlur = async () => {\n      await validateHandler('blur');\n    };\n    provide(FormItemInjectionKey, {\n      handleBlur,\n    });\n\n    return () => (\n      <div class={classes.value}>\n        {renderLabel()}\n        <div class={contentClasses.value} style={contentStyle.value}>\n          <div class={CLASS_NAMES.value.controlsContent}>\n            {renderContent('default')}\n            {renderSuffixIcon()}\n          </div>\n          {[helpNode.value, extraNode.value]}\n        </div>\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","slots","renderContent","useTNodeJSX","CLASS_NAMES","useCLASSNAMES","useConfig","globalConfig","useGlobalIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","form","inject","FormInjectionKey","FORM_ITEM_CLASS_PREFIX","usePrefixClass","needRequiredMark","computed","requiredMark","parentRequiredMark","value","isRequired","innerRules","filter","rule","required","length","Boolean","hasLabel","label","hasColon","colon","FROM_LABEL","labelAlign","isNil","labelWidth","labelClasses","renderLabel","Number","labelStyle","width","_createVNode","getDefaultIcon","resultIcon","Icon","status","list","errorList","verifyStatus","ValidateStatus","SUCCESS","type","icon","error","warning","renderSuffixIcon","statusIcon","defaultNode","errorClasses","showErrorMessage","successBorder","success","join","contentClasses","controls","contentStyle","marginLeft","ref","successList","TO_BE_VALIDATED","resetValidating","needResetField","resetHandler","getEmptyValue","Object","prototype","toString","call","lodashGet","data","emptyValue","resetField","resetType","lodashSet","initialValue","nextTick","errorMessages","errorMessage","rules","index","lastIndexOf","pRuleName","slice","analysisValidateResult","trigger","result","resultList","allowSetValue","item","validate","map","keys","forEach","key","message","compiled","lodashTemplate","validateHandler","freeShowErrorMessage","innerSuccessList","innerErrorList","FAIL","validateOnly","setValidateMessage","validateMessage","Array","isArray","toRefs","context","reactive","onMounted","cloneDeep","children","push","onBeforeUnmount","ctx","watch","deep","classes","formItem","formItemWithHelp","helpNode","formItemWithExtra","extraNode","help","getExtraNode","content","extra","handleBlur","provide","FormItemInjectionKey","controlsContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,gBAAeA,eAAgB,CAAA;AAC7BC,EAAAA,IAAM,EAAA,WADuB;EAG7BC,KAAA,EAAA,aAAA,CAAA,EAAA,EAAYA,KAAZ,CAH6B;EAI7BC,KAJ6B,EAAA,SAAA,KAAA,CAIvBD,MAJuB,EAIL,IAAA,EAAA;IAAA,IAATE,KAAS,QAATA,KAAS,CAAA;IACtB,IAAMC,gBAAgBC,WAAY,EAAlC,CAAA;IACA,IAAMC,cAAcC,aAAc,EAAlC,CAAA;;IACA,IAAyBC,UAAAA,GAAAA,SAAA,CAAU,MAAV,CAAzB;QAAQC,YAAR,cAAQA,YAAR,CAAA;;AACA,IAAA,IAAA,cAAA,GAAgFC,aAAc,CAAA;AAC5FC,MAAAA,qBAAuB,EAAAC,qBADqE;AAE5FC,MAAAA,qBAAuB,EAAAC,qBAFqE;AAG5FC,MAAAA,qBAAuB,EAAAC,qBAAAA;AAHqE,KAAA,CAA9F;QAAQL,uBAAR,kBAAQA,qBAAR;QAA+BE,uBAA/B,kBAA+BA,qBAA/B;QAAsDE,uBAAtD,kBAAsDA,qBAAtD,CAAA;;IAKM,IAAAE,IAAA,GAAOC,MAAO,CAAAC,gBAAA,EAAkB,KAAS,CAA3B,CAAd,CAAA;AAEA,IAAA,IAAAC,sBAAA,GAAyBC,eAAe,cAAxC,CAAA;AAEA,IAAA,IAAAC,gBAAA,GAAmBC,SAAS,YAAM;AAChC,MAAA,IAAEC,YAAF,GAAmBvB,MAAnB,CAAEuB,YAAF,CAAA;AACN,MAAA,IAAI,OAAOA,YAAP,KAAwB,SAA5B,EAA8C,OAAAA,YAAA,CAAA;AAC9C,MAAA,IAAMC,qBACJ,CAAAR,IAAM,KAAN,IAAA,IAAAA,IAAM,KAAA,KAAA,CAAN,GAAAA,KAAAA,CAAAA,GAAAA,IAAM,CAAAO,YAAN,MAAuB,MAAvB,GAAmCf,YAAa,CAAAiB,KAAb,CAAmBF,YAAtD,GAAqEP,IAArE,KAAA,IAAA,IAAqEA,IAArE,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAqEA,IAAM,CAAAO,YAD7E,CAAA;MAEM,IAAAG,UAAA,GAAaC,WAAWF,KAAX,CAAiBG,MAAjB,CAAwB,UAACC,IAAD,EAAA;QAAA,OAAUA,IAAA,CAAKC,QAAf,CAAA;OAAxB,CAAA,CAAiDC,MAAjD,GAA0D,CAAvE,CAAA;AACC,MAAA,OAAAC,OAAA,CAAQR,sBAAsBE,UAA9B,CAAA,CAAA;AACR,MAPK,CAAA;IASN,IAAMO,WAAWX,QAAS,CAAA,YAAA;AAAA,MAAA,OAAMpB,KAAM,CAAAgC,KAAN,IAAelC,OAAMkC,KAA3B,CAAA;AAAA,KAAA,CAA1B,CAAA;IACM,IAAAC,QAAA,GAAWb,SAAS,YAAA;AAAA,MAAA,OAAM,CAAC,EAAEN,IAAM,KAAA,IAAN,IAAAA,IAAM,KAAA,KAAA,CAAN,IAAAA,IAAM,CAAAoB,KAAN,IAAeH,SAASR,KAA1B,CAAP,CAAA;AAAA,MAApB,CAAA;AACA,IAAA,IAAAY,UAAA,GAAajB,eAAe,cAA5B,CAAA;IACA,IAAAkB,UAAA,GAAahB,QAAS,CAAA,YAAA;AAAA,MAAA,OAAOiB,KAAMvC,CAAAA,MAAAA,CAAMsC,UAANtC,CAAN,GAA0BgB,IAA1B,KAA0BA,IAAAA,IAAAA,IAA1B,uBAA0BA,IAAA,CAAMsB,UAAhC,GAA6CtC,MAAAA,CAAMsC,UAA1D,CAAA;AAAA,KAAA,CAAtB,CAAA;IACA,IAAAE,UAAA,GAAalB,QAAS,CAAA,YAAA;AAAA,MAAA,OAAOiB,KAAMvC,CAAAA,MAAAA,CAAMwC,UAANxC,CAAN,GAA0BgB,IAA1B,KAA0BA,IAAAA,IAAAA,IAA1B,uBAA0BA,IAAA,CAAMwB,UAAhC,GAA6CxC,MAAAA,CAAMwC,UAA1D,CAAA;AAAA,KAAA,CAAtB,CAAA;IAEA,IAAAC,YAAA,GAAenB,SAAS,YAAA;AAAA,MAAA,IAAA,KAAA,CAAA;;AAAA,MAAA,OAAM,CAClCjB,YAAYoB,KAAZ,CAAkBS,KADgB,GAAA,KAAA,GAAA,EAAA,EAAA,eAAA,CAAA,KAAA,EAAA,EAAA,CAAA,MAAA,CAG5BG,UAAW,CAAAZ,KAHiB,EAAA,YAAA,CAAA,EAGGJ,gBAAiB,CAAAI,KAHpB,CAI5BY,EAAAA,eAAAA,CAAAA,KAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,UAAW,CAAAZ,KAJiB,EAIAU,SAAAA,CAAAA,EAAAA,QAAS,CAAAV,KAJT,oCAK5BY,UAAA,CAAWZ,KALiB,EAAA,OAAA,CAAA,EAKFQ,QAAA,CAASR,KAAT,KAAmBa,UAAW,CAAAb,KAAX,KAAqB,KAArB,IAA8B,CAACe,UAAW,CAAAf,KAA7D,CALE,CAM5BY,EAAAA,eAAAA,CAAAA,KAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,UAAA,CAAWZ,KANiB,EAMDa,QAAAA,CAAAA,EAAAA,UAAW,CAAAb,KAAX,KAAqB,MAArB,IAA+Be,UAAW,CAAAf,KANzC,CAAA,EAAA,eAAA,CAAA,KAAA,EAAA,EAAA,CAAA,MAAA,CAO5BY,UAAA,CAAWZ,KAPiB,EAOAa,SAAAA,CAAAA,EAAAA,UAAW,CAAAb,KAAX,KAAqB,OAArB,IAAgCe,UAAW,CAAAf,KAP3C,CAAN,EAAA,KAAA,EAAA,CAAA;AAAA,MAAxB,CAAA;;AAWN,IAAA,IAAMiB,cAAc,SAAdA,WAAc,GAAM;MACpB,IAAAC,MAAA,CAAOH,UAAW,CAAAf,KAAlB,CAAA,KAA6B,CAA7B,EAAgC,OAAA;MAEpC,IAAImB,aAAa,EAAjB,CAAA;;MACA,IAAIJ,UAAW,CAAAf,KAAX,IAAoBa,UAAW,CAAAb,KAAX,KAAqB,KAA7C,EAAoD;AAC9C,QAAA,IAAA,OAAOe,UAAW,CAAAf,KAAlB,KAA4B,QAA5B,EAAsC;AACxCmB,UAAAA,UAAA,GAAa;YAAEC,KAAA,EAAA,EAAA,CAAA,MAAA,CAAUL,UAAA,CAAWf,KAArB,EAAA,IAAA,CAAA;WAAf,CAAA;AACK,SAFH,MAEG;AACQmB,UAAAA,UAAA,GAAA;YAAEC,KAAO,EAAAL,UAAA,CAAWf,KAAAA;WAApB,CAAA;AACf,SAAA;AACF,OAAA;;AAEA,MAAA,OAAAqB,WAAA,CAAA,KAAA,EAAA;QAAA,OACcL,EAAAA,YAAa,CAAAhB,KAD3B;QAAA,OACyCmB,EAAAA,UAAAA;AADzC,OAAA,EAAA,CAAAE,WAAA,CAAA,OAAA,EAAA;AAAA,QAAA,KAAA,EAEgB9C;OAAYG,EAAAA,CAAAA,aAAA,CAAc,OAAd,CAF5B,CAAA,CAAA,CAAA,CAAA,CAAA;KAZF,CAAA;;AAoBA,IAAA,IAAM4C,iBAAiB,SAAjBA,cAAiB,GAAa;AAClC,MAAA,IAAMC,UAAa,GAAA,SAAbA,UAAa,CAACC,IAAD,EAAA;AAAA,QAAA,OAAAH,WAAA,CAAA,MAAA,EAAA;UAAA,OACJzC,EAAAA,WAAY,CAAAoB,KAAZ,CAAkByB,MAAAA;AADd,SAAA,EAAA,CAAAJ,WAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;OAAnB,CAAA;;AAKA,MAAA,IAAMK,OAAOC,SAAU,CAAA3B,KAAvB,CAAA;;AACI,MAAA,IAAA4B,YAAA,CAAa5B,KAAb,KAAuB6B,cAAA,CAAeC,OAAtC,EAA+C;QACjD,OAAOP,WAAWtC,wBAAlB,CAAA;AACF,OAAA;;MACA,IAAIyC,IAAJ,aAAIA,IAAJ,KAAA,KAAA,CAAA,IAAIA,KAAO,EAAX,EAAe;QACP,IAAAK,IAAA,GAAOL,IAAK,CAAA,CAAA,CAAL,CAAQK,IAAR,IAAgB,OAAvB,CAAA;AACN,QAAA,IAAMC,IACJ,GAAA;AACEC,UAAAA,KAAO,EAAA9C,uBADT;AAEE+C,UAAAA,OAAS,EAAA7C,uBAAAA;SACT0C,CAAAA,IAHF,KAGW9C,uBAJb,CAAA;QAKA,OAAOsC,WAAWS,KAAlB,CAAA;AACF,OAAA;;AACO,MAAA,OAAA,IAAA,CAAA;KAnBT,CAAA;;AAqBA,IAAA,IAAMG,mBAAmB,SAAnBA,gBAAmB,GAAM;AACvB,MAAA,IAAEC,UAAF,GAAiB7D,MAAjB,CAAE6D,UAAF,CAAA;MACN,IAAIA,UAAe,KAAA,KAAnB,EAA0B,OAAA;AAE1B,MAAA,IAAIb,aAAa7C,aAAc,CAAA,YAAA,EAAc;AAAE2D,QAAAA,WAAa,EAAAf,cAAA,EAAA;AAAf,OAAd,CAA/B,CAAA;AACI,MAAA,IAAAC,UAAA,EAAY,OAAAF,WAAA,CAAA,MAAA,EAAA;QAAA,OAAoBzC,EAAAA,YAAYoB,KAAZ,CAAkByB,MAAAA;AAAtC,OAAA,EAAA,CAA+CF,UAA/C,CAAA,CAAA,CAAA;MAChB,IAAIA,UAAe,KAAA,KAAnB,EAA0B,OAAA;MAE1BA,UAAA,GAAahC,IAAb,KAAA,IAAA,IAAaA,IAAb,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAaA,KAAMb,aAAN,CAAoB,YAApB,EAAkC;AAAE2D,QAAAA,WAAa,EAAAf,cAAA,EAAA;AAAf,OAAlC,CAAb,CAAA;MACI,IAAAC,UAAA,EAAmB,OAAAA,UAAA,CAAA;KATzB,CAAA;;AAcM,IAAA,IAAAe,YAAA,GAAezC,SAAS,YAAM;AAClC,MAAA,IAAI,CAAC0C,gBAAiB,CAAAvC,KAAtB,EAAoC,OAAA,EAAA,CAAA;;AAChC,MAAA,IAAA4B,YAAA,CAAa5B,KAAb,KAAuB6B,cAAA,CAAeC,OAAtC,EAA+C;QACjD,OAAOvD,MAAM,CAAAiE,aAANjE,GACH,CAACK,WAAA,CAAYoB,KAAZ,CAAkByC,OAAnB,EAA4B7D,WAAA,CAAYoB,KAAZ,CAAkBwC,aAA9C,CAA6DE,CAAAA,IAA7D,CAAkE,GAAlE,CADGnE,GAEHK,YAAYoB,KAAZ,CAAkByC,OAFtB,CAAA;AAGF,OAAA;;AACI,MAAA,IAAA,CAACd,UAAU3B,KAAV,CAAgBM,MAAjB,EAAyB,OAAA;MAC7B,IAAMyB,IAAO,GAAAJ,SAAA,CAAU3B,KAAV,CAAgB,CAAhB,CAAA,CAAmB+B,IAAnB,IAA2B,OAAxC,CAAA;AACA,MAAA,OAAOA,SAAS,OAAT,GAAmBnD,WAAA,CAAYoB,KAAZ,CAAkBiC,KAArC,GAA6CrD,YAAYoB,KAAZ,CAAkBkC,OAAtE,CAAA;AACD,MAVK,CAAA;IAWA,IAAAS,cAAA,GAAiB9C,SAAS,YAAA;MAAA,OAAM,CAACjB,YAAYoB,KAAZ,CAAkB4C,QAAnB,EAA6BN,YAAa,CAAAtC,KAA1C,CAAN,CAAA;AAAA,MAA1B,CAAA;AACA,IAAA,IAAA6C,YAAA,GAAehD,SAAS,YAAM;MAClC,IAAIgD,gBAAe,EAAnB,CAAA;;MACA,IAAI9B,UAAW,CAAAf,KAAX,IAAoBa,UAAW,CAAAb,KAAX,KAAqB,KAA7C,EAAoD;AAC9C,QAAA,IAAA,OAAOe,UAAW,CAAAf,KAAlB,KAA4B,QAA5B,EAAsC;AACxC6C,UAAAA,aAAe,GAAA;YAAEC,UAAY,EAAA,EAAA,CAAA,MAAA,CAAG/B,WAAWf,KAAd,EAAA,IAAA,CAAA;WAA7B6C,CAAAA;AACK,SAFH,MAEG;AACLA,UAAAA,aAAe,GAAA;YAAEC,UAAY,EAAA/B,UAAA,CAAWf,KAAAA;WAAxC6C,CAAAA;AACF,SAAA;AACF,OAAA;;AAEOA,MAAAA,OAAAA,aAAAA,CAAAA;AACR,MAXK,CAAA;AAcA,IAAA,IAAAlB,SAAA,GAAYoB,GAAqB,CAAA,EAAA,CAAjC,CAAA;AACA,IAAA,IAAAC,WAAA,GAAcD,GAAuB,CAAA,EAAA,CAArC,CAAA;AACA,IAAA,IAAAnB,YAAA,GAAemB,GAAI,CAAAlB,cAAA,CAAeoB,eAAf,CAAnB,CAAA;AACA,IAAA,IAAAC,eAAA,GAAkBH,IAAI,MAAtB,CAAA;AACA,IAAA,IAAAI,cAAA,GAAiBJ,IAAI,MAArB,CAAA;;AAEN,IAAA,IAAMK,eAAe,SAAfA,YAAe,GAAM;MACzBD,cAAA,CAAenD,KAAf,GAAuB,KAAvB,CAAA;MACA2B,SAAA,CAAU3B,KAAV,GAAkB,EAAlB,CAAA;MACAgD,WAAA,CAAYhD,KAAZ,GAAoB,EAApB,CAAA;AACA4B,MAAAA,YAAA,CAAa5B,KAAb,GAAqB6B,cAAe,CAAAoB,eAApC,CAAA;KAJF,CAAA;;AAMA,IAAA,IAAMI,gBAAgB,SAAhBA,aAAgB,GAAiB;MAC/B,IAAAtB,IAAA,GAAOuB,MAAO,CAAAC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BC,IAAUnE,SAAAA,IAAAA,IAAAA,SAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAM,CAAAoE,MAAMpF,MAAM,CAAAD,KAA3D,CAAP,CAAA;AACF,MAAA,IAAAsF,UAAA,CAAA;;MACJ,IAAI7B,SAAS,iBAAb,EAAgC;AACjB6B,QAAAA,UAAA,GAAA,EAAA,CAAA;AACf,OAAA;;MACA,IAAI7B,SAAS,gBAAb,EAA+B;AAC7B6B,QAAAA,UAAA,GAAa,EAAb,CAAA;AACF,OAAA;;MACA,IAAI7B,SAAS,iBAAb,EAAgC;AAC9B6B,QAAAA,UAAA,GAAa,EAAb,CAAA;AACF,OAAA;;AACO,MAAA,OAAAA,UAAA,CAAA;KAZT,CAAA;;AAcA,IAAA,IAAMC,UAAa,gBAAA,YAAA;MAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,QAAA,IAAA,SAAA;AAAA,YAAA,KAAA,GAAA,SAAA,CAAA;AAAA,QAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;AAAOC,gBAAAA,SAAP,2DAAoDvE,IAApD,KAAA,IAAA,IAAoDA,IAApD,KAAoDA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAA,CAAMuE,SAA1D,CAAA;;gBAAA,IACZvF,MAAM,CAAAD,IADM,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;;AAAA,gBAAA,OAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;AAAA,cAAA,KAAA,CAAA;gBAGjB,IAAIwF,SAAc,KAAA,OAAlB,EAA2BC,SAAA,CAAUxE,IAAV,aAAUA,IAAV,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAUA,IAAM,CAAAoE,IAAhB,EAAsBpF,MAAM,CAAAD,IAA5B,EAAkC+E,eAAlC,CAAA,CAA3B,KAA4E,IACnES,SAAc,KAAA,SADqD,EAC1CC,SAAA,CAAUxE,IAAV,aAAUA,IAAV,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAUA,IAAM,CAAAoE,IAAhB,EAAsBpF,MAAM,CAAAD,IAA5B,EAAkC0F,aAAahE,KAA/C,CAAA,CAAA;AAJjB,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAMXiE,QAAS,EANE,CAAA;;AAAA,cAAA,KAAA,CAAA;gBAOjB,IAAIf,gBAAgBlD,KAApB,EAA2B;kBACzBmD,cAAA,CAAenD,KAAf,GAAuB,IAAvB,CAAA;AACK,iBAFP,MAEO;kBACQoD,YAAA,EAAA,CAAA;AACf,iBAAA;;AAXiB,cAAA,KAAA,CAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,OAAA,CAAA,CAAA;OAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,OAAA,SAAbS,UAAa,GAAA;AAAA,QAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA;KAAnB,EAAA,CAAA;;IAcA,IAAMK,gBAAgBrE,QAA2B,CAAA,YAAA;AAAA,MAAA,IAAA,kBAAA,CAAA;;AAAA,MAAA,OAAA,CAAA,kBAAA,GAAMN,IAAN,KAAA,IAAA,IAAMA,IAAN,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAMA,KAAM4E,YAAZ,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,kBAAA,GAA4BpF,YAAA,CAAaiB,KAAb,CAAmBmE,YAA/C,CAAA;AAAA,KAAA,CAAjD,CAAA;AACM,IAAA,IAAAjE,UAAA,GAAaL,SAAqB,YAAM;AAAA,MAAA,IAAA,aAAA,CAAA;;MAC5C,IAAItB,CAAAA,aAAAA,GAAAA,OAAM6F,KAAV,MAAI7F,IAAAA,IAAAA,aAAAA,KAAAA,KAAAA,CAAAA,IAAAA,aAAAA,CAAa+B,MAAjB,EAAyB,OAAO/B,MAAM,CAAA6F,KAAb,CAAA;AACzB,MAAA,IAAI,CAAC7F,MAAM,CAAAD,IAAX,EAAiB,OAAO,EAAP,CAAA;AACjB,MAAA,IAAM+F,QAAQ,EAAG9F,CAAAA,MAAAA,CAAAA,MAAAA,CAAMD,IAAT,CAAgBgG,CAAAA,WAAhB,CAA4B,GAA5B,CAAoC,IAAA,CAAA,CAAlD,CAAA;AACA,MAAA,IAAMC,YAAY,EAAGhG,CAAAA,MAAAA,CAAAA,MAAAA,CAAMD,IAAT,CAAgBkG,CAAAA,KAAhB,CAAsBH,QAAQ,CAA9B,CAAlB,CAAA;AACO,MAAA,OAAAX,GAAA,CAAUnE,IAAV,KAAA,IAAA,IAAUA,IAAV,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAUA,IAAM,CAAA6E,KAAhB,EAAuB7F,MAAM,CAAAD,IAA7B,CAAA,IAAsCoF,GAAA,CAAUnE,IAAV,KAAUA,IAAAA,IAAAA,IAAV,KAAUA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAM,CAAA6E,KAAhB,EAAuBG,SAAvB,CAAtC,IAA2E,EAA3E,CAAA;AACR,MANK,CAAA;;AAQA,IAAA,IAAAE,sBAAA,gBAAA,YAAA;AAAA,MAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,CAAA,IAAA,CAAyB,kBAAOC,OAAP,EAAA;AAAA,QAAA,IAAA,aAAA,CAAA;;AAAA,QAAA,IAAA,MAAA,CAAA;AAAA,QAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;AACvBC,gBAAAA,MADuB,GACU;AACrC3B,kBAAAA,aAAa,EADwB;AAErCrB,kBAAAA,WAAW,EAF0B;AAGrCyC,kBAAAA,OAAO,EAH8B;AAIrCQ,kBAAAA,YAAY,EAJyB;AAKrCC,kBAAAA,aAAe,EAAA,KAAA;iBANY,CAAA;AAQ7BF,gBAAAA,MAAA,CAAOP,KAAP,GACEM,OAAA,KAAY,KAAZ,GACIxE,UAAA,CAAWF,KADf,GAEIE,UAAA,CAAWF,KAAX,CAAiBG,MAAjB,CAAwB,UAAC2E,IAAD,EAAA;AAAA,kBAAA,OAAC,CAAUA,IAAK,CAAAJ,OAAL,IAAgB,QAA1B,MAAwCA,OAAzC,CAAA;AAAA,iBAAxB,CAHN,CAAA;;AAR6B,gBAAA,IAAA,EAYzBxE,WAAWF,KAAX,CAAiBM,MAAjB,IAA2B,EAACqE,CAAAA,aAAAA,GAAAA,MAAA,CAAOP,KAAR,MAAC,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,IAAA,aAAA,CAAc9D,MAAf,CAZF,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;;AAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAapBqE,MAboB,CAAA,CAAA;;AAAA,cAAA,KAAA,CAAA;gBAe7BA,MAAA,CAAOE,aAAP,GAAuB,IAAvB,CAAA;AAf6B,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;gBAAA,OAgBHE,QAAA,CAAS/E,KAAM,CAAAA,KAAf,EAAsB2E,OAAOP,KAA7B,CAhBG,CAAA;;AAAA,cAAA,KAAA,CAAA;AAgB7BO,gBAAAA,MAAA,CAAOC,UAhBsB,GAAA,SAAA,CAAA,IAAA,CAAA;gBAiB7BD,MAAA,CAAOhD,SAAP,GAAmBgD,MAAA,CAAOC,UAAP,CAChBzE,MADgB,CACT,UAAC2E,IAAD,EAAA;AAAA,kBAAA,OAAUA,IAAK,CAAAH,MAAL,KAAgB,IAA1B,CAAA;AAAA,iBADS,CAEhBK,CAAAA,GAFgB,CAEZ,UAACF,IAAD,EAAyB;kBAC5BxB,MAAA,CAAO2B,IAAP,CAAYH,IAAZ,EAAkBI,OAAlB,CAA0B,UAACC,GAAD,EAAS;oBACjC,IAAI,CAACL,IAAA,CAAKM,OAAN,IAAiBlB,aAAA,CAAclE,KAAd,CAAoBmF,GAApB,CAArB,EAA+C;sBAC7C,IAAME,QAAW,GAAAC,cAAA,CAAepB,aAAc,CAAAlE,KAAd,CAAoBmF,GAApB,CAAf,CAAjB,CAAA;AACA,sBAAA,IAAM7G,QAAO,OAAOC,MAAAA,CAAMkC,KAAb,KAAuB,QAAvB,GAAkClC,MAAAA,CAAMkC,KAAxC,GAAgDlC,MAAM,CAAAD,IAAnE,CAAA;AACAwG,sBAAAA,IAAA,CAAKM,OAAL,GAAeC,QAAS,CAAA;AACtB/G,wBAAAA,IAAAA,EAAAA,KADsB;wBAEtByG,UAAUD,IAAK,CAAAK,GAAA,CAAA;AAFO,uBAAA,CAAxB,CAAA;AAIF,qBAAA;mBARF,CAAA,CAAA;AAUO,kBAAA,OAAAL,IAAA,CAAA;AACR,iBAdgB,CAAnB,CAAA;gBAgBOH,MAAA,CAAA3B,WAAA,GAAc2B,OAAOC,UAAP,CAAkBzE,MAAlB,CACnB,UAAC2E,IAAD,EAAA;AAAA,kBAAA,OAAUA,IAAK,CAAAH,MAAL,KAAgB,IAAhB,IAAwBG,IAAK,CAAAM,OAA7B,IAAwCN,KAAK/C,IAAL,KAAc,SAAhE,CAAA;AAAA,iBADmB,CAAd,CAAA;AAjCsB,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAqCtB4C,MArCsB,CAAA,CAAA;;AAAA,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,QAAA,CAAA,CAAA;OAAzB,CAAA,CAAA,CAAA;;AAAA,MAAA,OAAA,SAAAF,sBAAA,CAAA,EAAA,EAAA;AAAA,QAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA;KAAA,EAAA,CAAA;;AAuCA,IAAA,IAAAc,eAAA,gBAAA,YAAA;MAAA,IAAkB,KAAA,GAAA,iBAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CACtBb,OADsB,EAEtBnC,iBAFsB,EAAA;AAAA,QAAA,IAAA,qBAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,KAAA,EAAA,UAAA,EAAA,aAAA,CAAA;;AAAA,QAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;gBAItBW,eAAA,CAAgBlD,KAAhB,GAAwB,IAAxB,CAAA;gBAEAwF,oBAAA,CAAqBxF,KAArB,GAA6BuC,iBAA7B,CAAA;AANsB,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;gBAAA,OAaZkC,sBAAA,CAAuBC,OAAvB,CAbY,CAAA;;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,qBAAA,GAAA,SAAA,CAAA,IAAA,CAAA;AAQPe,gBAAAA,gBARO,yBAQpBzC,WARoB,CAAA;AAST0C,gBAAAA,cATS,yBASpB/D,SAToB,CAAA;AAUpByC,gBAAAA,KAVoB,yBAUpBA,KAVoB,CAAA;AAWpBQ,gBAAAA,UAXoB,yBAWpBA,UAXoB,CAAA;AAYpBC,gBAAAA,aAZoB,yBAYpBA,aAZoB,CAAA;;AAetB,gBAAA,IAAIA,aAAJ,EAAmB;kBACjB7B,WAAA,CAAYhD,KAAZ,GAAoByF,gBAApB,CAAA;kBACA9D,SAAA,CAAU3B,KAAV,GAAkB0F,cAAlB,CAAA;AACF,iBAAA;;gBAEA,IAAItB,MAAM9D,MAAV,EAAkB;AAChBsB,kBAAAA,YAAA,CAAa5B,KAAb,GAAqB0F,cAAA,CAAepF,MAAf,GAAwBuB,cAAA,CAAe8D,IAAvC,GAA8C9D,cAAe,CAAAC,OAAlF,CAAA;AACK,iBAFP,MAEO;AACLF,kBAAAA,YAAA,CAAa5B,KAAb,GAAqB6B,cAAe,CAAAoB,eAApC,CAAA;AACF,iBAAA;;gBAEA,IAAIE,eAAenD,KAAnB,EAA0B;kBACXoD,YAAA,EAAA,CAAA;AACf,iBAAA;;gBACAF,eAAA,CAAgBlD,KAAhB,GAAwB,KAAxB,CAAA;AA7BsB,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,eAAA,CAAA,EAAA,EAgCnBzB,MAAM,CAAAD,IAhCa,EAgCNoH,cAAe,CAAApF,MAAf,KAA0B,CAA1B,GAA8B,IAA9B,GAAqCsE,UAhC/B,CAAA,CAAA,CAAA;;AAAA,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,QAAA,CAAA,CAAA;OAAlB,CAAA,CAAA,CAAA;;AAAA,MAAA,OAAA,SAAAW,eAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,QAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA;KAAA,EAAA,CAAA;;AAmCA,IAAA,IAAAK,YAAA,gBAAA,YAAA;AAAA,MAAA,IAAA,KAAA,GAAA,iBAAA,eAAA,mBAAA,CAAA,IAAA,CAAe,kBAAuBlB,OAAvB,EAAA;AAAA,QAAA,IAAA,sBAAA,EAAA,cAAA,EAAA,UAAA,CAAA;;AAAA,QAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;gBAAA,OACqCD,uBAAuBC,QAD5D,CAAA;;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,sBAAA,GAAA,SAAA,CAAA,IAAA,CAAA;AACAgB,gBAAAA,cADA,0BACX/D,SADW,CAAA;AACgBiD,gBAAAA,UADhB,0BACgBA,UADhB,CAAA;AAAA,gBAAA,OAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EAAA,eAAA,CAAA,EAAA,EAIhBrG,MAAM,CAAAD,IAJU,EAIHoH,cAAe,CAAApF,MAAf,KAA0B,CAA1B,GAA8B,IAA9B,GAAqCsE,UAJlC,CAAA,CAAA,CAAA;;AAAA,cAAA,KAAA,CAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,QAAA,CAAA,CAAA;OAAf,CAAA,CAAA,CAAA;;AAAA,MAAA,OAAA,SAAAgB,YAAA,CAAA,GAAA,EAAA;AAAA,QAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA;KAAA,EAAA,CAAA;;AAQA,IAAA,IAAAC,kBAAA,GAAqB,SAArBA,kBAAqB,CAACC,eAAD,EAAgD;MACzE,IAAI,CAACA,eAAD,IAAoB,CAACC,KAAA,CAAMC,OAAN,CAAcF,eAAd,CAAzB,EAAyD,OAAA;;AACrD,MAAA,IAAAA,eAAA,CAAgBxF,MAAhB,KAA2B,CAA3B,EAA8B;QAChCqB,SAAA,CAAU3B,KAAV,GAAkB,EAAlB,CAAA;AACA4B,QAAAA,YAAA,CAAa5B,KAAb,GAAqB6B,cAAe,CAAAC,OAApC,CAAA;AACF,OAAA;;MACUH,SAAA,CAAA3B,KAAA,GAAQ8F,eAAgB,CAAAd,GAAhB,CAAoB,UAACF,IAAD,EAAA;AAAA,QAAA,OAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAgBA,IAAhB,CAAA,EAAA,EAAA,EAAA;AAAsBH,UAAAA,MAAQ,EAAA,KAAA;AAA9B,SAAA,CAAA,CAAA;AAAA,OAApB,CAAR,CAAA;AACV/C,MAAAA,YAAA,CAAa5B,KAAb,GAAqB6B,cAAe,CAAA8D,IAApC,CAAA;KAPI,CAAA;;IAUA,IAAA3F,KAAA,GAAQH,QAAoB,CAAA,YAAA;MAAA,OAAM,CAAAN,IAAM,KAAA,IAAN,IAAAA,IAAM,WAAN,GAAAA,KAAAA,CAAAA,GAAAA,IAAM,CAAAoE,IAAN,KAAcD,IAAUnE,iBAAAA,2BAAAA,IAAM,CAAAoE,MAAMpF,MAAM,CAAAD,KAAhD,CAAA;AAAA,KAAA,CAA5B,CAAA;AACA,IAAA,IAAA0F,YAAA,GAAejB,IAAe,KAAS,EAAvC,CAAA;;IACN,IAAiBkD,OAAAA,GAAAA,MAAA,CAAO1H,MAAP,CAAjB;QAAQD,IAAR,WAAQA,IAAR,CAAA;;IACA,IAAM4H,UAA2BC,QAAS,CAAA;AACxC7H,MAAAA,IAAA,EAAAA,IADwC;AAExC8E,MAAAA,YAAA,EAAAA,YAFwC;AAGxCS,MAAAA,UAAA,EAAAA,UAHwC;AAIxCkB,MAAAA,QAAU,EAAAQ,eAJ8B;AAKxCK,MAAAA,YAAA,EAAAA,YALwC;AAMxCC,MAAAA,kBAAA,EAAAA,kBAAAA;AANwC,KAAA,CAA1C,CAAA;AASAO,IAAAA,SAAA,CAAU,YAAM;MACDpC,YAAA,CAAAhE,KAAA,GAAQqG,SAAU,CAAArG,KAAA,CAAMA,KAAN,CAAlB,CAAA;MACPT,IAAA,KAAA,IAAA,IAAAA,IAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,IAAA,CAAA+G,QAAA,CAASC,IAAT,CAAcL,OAAd,CAAA,CAAA;AACP,KAHD,CAAA,CAAA;AAIAM,IAAAA,eAAA,CAAgB,YAAM;AAChB,MAAA,IAAAjH,IAAA,EAAMA,IAAA,CAAK+G,QAAL,GAAgB/G,IAAhB,KAAA,IAAA,IAAgBA,IAAhB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAgBA,IAAM,CAAA+G,QAAN,CAAenG,MAAf,CAAsB,UAACsG,GAAD,EAAA;QAAA,OAASA,QAAQP,OAAjB,CAAA;AAAA,OAAtB,CAAhB,CAAA;AACX,KAFD,CAAA,CAAA;IAGAQ,KAAA,CACE1G,KADF,eAEE,iBAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,MAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,QAAA,OAAA,CAAA,EAAA;AAAA,UAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,YAAA,KAAA,CAAA;AAAA,cAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;cAAA,OACQuF,gBAAgB,SADxB,CAAA;;AAAA,YAAA,KAAA,CAAA,CAAA;AAAA,YAAA,KAAA,KAAA;AAAA,cAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA,SAAA;AAAA,OAAA,EAAA,QAAA,CAAA,CAAA;AAAA,KAFF,CAKE,CAAA,EAAA;AAAEoB,MAAAA,MAAM,IAAA;AAAR,KALF,CAAA,CAAA;AAQM,IAAA,IAAAnB,oBAAA,GAAuBzC,IAAa,KAAS,EAA7C,CAAA;AACA,IAAA,IAAAR,gBAAA,GAAmB1C,SAAS,YAAM;MAClC,IAAA,OAAO2F,qBAAqBxF,KAA5B,KAAsC,SAAtC,EAAiD,OAAOwF,oBAAqB,CAAAxF,KAA5B,CAAA;MACjD,IAAA,OAAOzB,OAAMgE,gBAAb,KAAkC,SAAlC,EAA6C,OAAOhE,MAAM,CAAAgE,gBAAb,CAAA;AACjD,MAAA,OAAOhD,IAAP,KAAOA,IAAAA,IAAAA,IAAP,KAAOA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAM,CAAAgD,gBAAb,CAAA;AACD,MAJK,CAAA;IAMA,IAAAqE,OAAA,GAAU/G,SAAS,YAAA;AAAA,MAAA,IAAA,MAAA,CAAA;;AAAA,MAAA,OAAM,CAC7BjB,YAAYoB,KAAZ,CAAkB6G,QADW,EAE7BnH,sBAAA,CAAuBM,KAAvB,IAAgCzB,MAAAA,CAAMD,IAANC,IAAc,EAA9C,CAF6B,GAAA,MAAA,GAAA,EAAA,EAAA,eAAA,CAAA,MAAA,EAI1BK,WAAA,CAAYoB,KAAZ,CAAkB8G,gBAJQ,EAIWC,QAAS,CAAA/G,KAJpB,CAAA,EAAA,eAAA,CAAA,MAAA,EAK1BpB,WAAA,CAAYoB,KAAZ,CAAkBgH,iBALQ,EAKYC,SAAU,CAAAjH,KALtB,CAAN,EAAA,MAAA,EAAA,CAAA;AAAA,MAAnB,CAAA;AAQA,IAAA,IAAA+G,QAAA,GAAWlH,SAAgB,YAAM;AAC/B,MAAA,IAAAqH,IAAA,GAAOxI,cAAc,OAArB,CAAA;AACF,MAAA,IAAAwI,IAAA,EAAM,OAAA7F,WAAA,CAAA,KAAA,EAAA;QAAA,OAAmBzC,EAAAA,YAAYoB,KAAZ,CAAkBkH,IAAAA;AAArC,OAAA,EAAA,CAA4CA,IAA5C,CAAA,CAAA,CAAA;AACH,MAAA,OAAA,IAAA,CAAA;AACR,MAJK,CAAA;AAKA,IAAA,IAAAD,SAAA,GAAYpH,SAAgB,YAAM;AAAA,MAAA,IAAA,MAAA,CAAA;;AAChC,MAAA,IAAAsH,YAAA,GAAe,SAAfA,YAAe,CAACC,OAAD,EAAA;AAAA,QAAA,OAAA/F,WAAA,CAAA,KAAA,EAAA;UAAA,OAAiCzC,EAAAA,WAAY,CAAAoB,KAAZ,CAAkBqH,KAAAA;AAAnD,SAAA,EAAA,CAA2DD,OAA3D,CAAA,CAAA,CAAA;OAAf,CAAA;;AACN,MAAA,IAAM1F,OAAOC,SAAU,CAAA3B,KAAvB,CAAA;;AACA,MAAA,IAAIuC,gBAAiB,CAAAvC,KAAjB,IAA0B0B,IAA1B,KAA0BA,IAAAA,IAAAA,IAA1B,KAA0BA,KAAAA,CAAAA,IAAAA,CAAAA,MAAAA,GAAAA,IAAO,CAAA,CAAA,CAAjC,MAA0B,IAAA,IAAA,MAAA,KAAA,KAAA,CAAA,IAAA,MAAA,CAAW0D,OAAzC,EAAkD;QACzC,OAAA+B,YAAA,CAAazF,IAAK,CAAA,CAAA,CAAL,CAAQ0D,OAArB,CAAA,CAAA;AACT,OAAA;;AACI,MAAA,IAAApC,WAAA,CAAYhD,KAAZ,CAAkBM,MAAlB,EAA0B;QAC5B,OAAO6G,YAAa,CAAAnE,WAAA,CAAYhD,KAAZ,CAAkB,CAAlB,CAAqBoF,CAAAA,OAArB,CAApB,CAAA;AACF,OAAA;;AACO,MAAA,OAAA,IAAA,CAAA;AACR,MAVK,CAAA;;AAYN,IAAA,IAAMkC;UAAa,MAAA,GAAA,iBAAA,eAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,QAAA,OAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;gBAAA,OACX/B,gBAAgB,OADL,CAAA;;AAAA,cAAA,KAAA,CAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,QAAA,CAAA,CAAA;;;sBAAb+B;;;KAAN,EAAA,CAAA;;IAGAC,OAAA,CAAQC,oBAAR,EAA8B;AAC5BF,MAAAA,UAAA,EAAAA,UAAAA;AAD4B,KAA9B,CAAA,CAAA;IAIA,OAAO,YAAA;AAAA,MAAA,OAAAjG,WAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EACOuF,OAAQ,CAAA5G,KAAAA;AADf,OAAA,EAAA,CAEFiB,WAAY,EAFV,EAAAI,WAAA,CAAA,KAAA,EAAA;QAAA,OAGSsB,EAAAA,cAAe,CAAA3C,KAHxB;AAAA,QAAA,OAAA,EAGsC6C,YAAa,CAAA7C,KAAAA;AAHnD,OAAA,EAAA,CAAAqB,WAAA,CAAA,KAAA,EAAA;QAAA,OAIWzC,EAAAA,WAAA,CAAYoB,KAAZ,CAAkByH,eAAAA;AAJ7B,OAAA,EAAA,CAKE/I,cAAc,UALhB,EAMEyD,gBAAiB,EANnB,CAAA,CAAA,EAQA,CAAC4E,QAAA,CAAS/G,KAAV,EAAiBiH,SAAA,CAAUjH,KAA3B,CARA,CAAA,CAAA,CAAA,CAAA,CAAA;KAAP,CAAA;AAYF,GAAA;AAvV6B,CAAA,CAA/B;;;;"}