{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/table/tree-store.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\nimport get from 'lodash/get';\nimport { isRowSelectedDisabled } from './utils';\nimport { PrimaryTableCol, TableRowState, TableRowValue, TableRowData } from './types';\nimport log from '../log';\n\nexport type TableTreeDataMap = Map<string | number, TableRowState>;\n\nexport interface TableRowModel<T> extends TableRowState<T> {\n  setData?: (key: string | number, data: T) => void;\n}\n\nexport interface KeysType {\n  rowKey: string;\n  childrenKey: string;\n}\n\nexport interface SwapParams<T> {\n  current: T;\n  target: T;\n  currentIndex: number;\n  targetIndex: number;\n}\n\nexport const TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {\n  code: 1001,\n  reason: 'The same level of rows can not be swapped.',\n};\n\n/**\n * 表格树形结构处理器\n * Vue 和 React 可以通用\n * 关键函数有以下几个\n * @toggleExpandData 处理树形结构展开收起\n * @setData 更新当行数据\n * @getData 获取单行数据\n * @remove 移除行数据，及其子节点\n * @appendTo 追加子节点到末尾\n */\nclass TableTreeStore<T extends TableRowData = TableRowData> {\n  /** 树形结构 Map 存储 */\n  treeDataMap: TableTreeDataMap = new Map();\n\n  expandAllRowIndex: 0;\n\n  constructor() {\n    this.treeDataMap = new Map();\n  }\n\n  /**\n   * 初始化 treeDataMap，不会改变 dataSource\n   * @param dataSource 树形数据源\n   * @param columns 列配置\n   * @param keys 字段别名\n   */\n  initialTreeStore(dataSource: T[], columns: PrimaryTableCol[], keys: KeysType) {\n    this.treeDataMap?.clear();\n    this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);\n  }\n\n  /**\n   * 获取所有节点的唯一标识\n   */\n  getAllUniqueKeys(data: T[], keys: KeysType, arr: T[] = []) {\n    for (let i = 0, len = data.length; i < len; i++) {\n      const item = data[i];\n      arr.push(get(item, keys.rowKey));\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.getAllUniqueKeys(children, keys, arr);\n      }\n    }\n    return arr;\n  }\n\n  toggleExpandData(p: { rowIndex: number; row: T }, dataSource: T[], keys: KeysType) {\n    if (!p) {\n      log.error('EnhancedTable', 'the node you want to toggleExpand doest not exist in `data`');\n      return dataSource;\n    }\n    const rowValue = get(p.row, keys.rowKey);\n    if (rowValue === undefined) {\n      log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n      return [];\n    }\n    const childrenNodes = get(p.row, keys.childrenKey);\n    // childrenNodes = true，表示懒加载，直接返回，暂时不做展开处理\n    if (childrenNodes === true) return dataSource;\n    const r = this.treeDataMap.get(rowValue);\n    r.rowIndex = p.rowIndex;\n    r.expanded = !r.expanded;\n    this.treeDataMap.set(rowValue, r);\n    return this.updateExpandRow(r, dataSource, keys);\n  }\n\n  updateExpandRow(changeRow: TableRowState, dataSource: T[], keys: KeysType): T[] {\n    const { row, rowIndex, expanded } = changeRow;\n    const { treeDataMap } = this;\n    const childrenNodes = get(row, keys.childrenKey);\n    if (!row || !childrenNodes) return dataSource;\n    if (expanded) {\n      updateChildrenRowState(treeDataMap, changeRow, expanded, keys);\n      updateRowExpandLength(treeDataMap, row, childrenNodes.length, 'expand', keys);\n      // eslint-disable-next-line\n      dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));\n    } else {\n      updateChildrenRowState<T>(treeDataMap, changeRow, expanded, keys);\n      const len = changeRow.expandChildrenLength || childrenNodes.length;\n      updateRowExpandLength(treeDataMap, row, -1 * len, 'fold', keys);\n      dataSource.splice(rowIndex + 1, len);\n    }\n    // 展开或收起后，会影响后续节点的 rowIndex，需同步更新\n    updateRowIndex(treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: rowIndex + 1,\n    });\n    return dataSource;\n  }\n\n  /**\n   * 获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  getData(key: TableRowValue): TableRowState {\n    return this.treeDataMap.get(key);\n  }\n\n  /**\n   * 更新当前行数据，并返回当前行下标\n   * @param rowValue 当前行唯一标识值\n   * @param newRowData 新行数据\n   * @returns {number} rowIndex 设置的行下标\n   */\n  updateData(rowValue: TableRowValue, newRowData: T, dataSource: T[], keys: KeysType): number {\n    const newRowValue = get(newRowData, keys.rowKey);\n    const rowState = this.treeDataMap.get(rowValue);\n    // Map 没有查询到，或者查询到的 rowIndex 值为 -1，均表示当前数据不在 dataSource 列表中，未显示在页面中\n    if (!rowState || rowState.rowIndex === -1) {\n      updateRowData(dataSource, rowValue, newRowData, {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      return -1;\n    }\n\n    // 懒加载处理：children 为 true，则需清空子元素在 map 中的值，而后方便重新加载\n    if (get(newRowData, keys.childrenKey) === true) {\n      const oldChildren = get(rowState.row, keys.childrenKey);\n      if (oldChildren?.length) {\n        for (let i = 0, len = oldChildren.length; i < len; i++) {\n          const rowValue = get(oldChildren[i], keys.rowKey);\n          const state = this.treeDataMap.get(rowValue);\n          if (state) {\n            this.treeDataMap.delete(rowValue);\n          }\n        }\n      }\n    }\n\n    const currentRowIndex = rowState.rowIndex;\n    rowState.row = newRowData;\n    rowState.id = newRowValue;\n\n    // 更新父元素中存储的当前元素值\n    if (rowState.parent) {\n      // 更新直接子元素数组\n      const siblings = get(rowState.parent.row, keys.childrenKey);\n      const index = siblings.findIndex((item: T) => get(item, keys.rowKey) === rowValue);\n      siblings[index] = newRowData;\n    }\n\n    this.treeDataMap.set(newRowValue, rowState);\n    // rowValue 也发生了变化，需移除 旧 rowValue 数据\n    if (rowValue !== newRowValue) {\n      this.treeDataMap.delete(rowValue);\n    }\n    return currentRowIndex;\n  }\n\n  /**\n   * 移除指定节点\n   * @param key 行唯一标识\n   */\n  remove(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      // 移除当前节点时，展开的节点的子节点需同步移除\n      const removeNumber = (r.expandChildrenLength || 0) + 1;\n      dataSource.splice(r.rowIndex, removeNumber);\n\n      if (r.parent) {\n        const siblings = get(r.parent.row, keys.childrenKey);\n        const index = siblings.findIndex((item: TableRowData) => get(item, keys.rowKey) === key);\n        siblings.splice(index, 1);\n        updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, 'delete', keys);\n      }\n\n      this.treeDataMap.delete(key);\n\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: r.rowIndex,\n        rowKey: keys.rowKey,\n        type: 'remove',\n      });\n    } else {\n      log.warn('EnhancedTable', 'Do not remove this node, which is not appeared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点。允许添加单个或多个\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  appendTo(rowValue: string | number, newData: T | T[], dataSource: T[], keys: KeysType): T[] {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const children: T[] = get(state.row, keys.childrenKey);\n    // 子节点不存在，则表示为叶子节点\n    const isShowNewNode = state.expanded || !children?.length;\n    // 添加多个子节点时，需去除重复子节点\n    const tmpData = newData instanceof Array ? newData : [newData];\n    const newChildrenData: T[] = [];\n    const newChildrenStates: TableRowState[] = [];\n    let firstNewChildrenIndex = -1;\n    for (let i = 0, len = tmpData.length; i < len; i++) {\n      const oneData = tmpData[i];\n      const newRowValue = get(oneData, keys.rowKey);\n      const mapState = this.treeDataMap.get(newRowValue);\n      if (!this.validateDataDoubleExist(mapState, newRowValue)) {\n        log.warn('Table', `Duplicated Data \\`${newRowValue}\\` has been removed.`);\n      } else {\n        const rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;\n        if (i === 0) {\n          firstNewChildrenIndex = rowIndex;\n        }\n        const newState = {\n          id: newRowValue,\n          row: oneData,\n          rowIndex,\n          level: state.level + 1,\n          expanded: false,\n          expandChildrenLength: 0,\n          disabled: false,\n          path: [...state.path],\n          parent: state,\n        };\n        newState.path = newState.path.concat(newState);\n        newChildrenData.push(oneData);\n        newChildrenStates.push(newState);\n        this.treeDataMap.set(newRowValue, newState);\n      }\n    }\n    if (!newChildrenData.length) return dataSource;\n\n    if (children?.length) {\n      state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);\n    } else {\n      state.row[keys.childrenKey] = newChildrenData;\n      state.expanded = true;\n    }\n\n    // 如果当前节点为展开状态，则需要继续处理\n    if (isShowNewNode) {\n      dataSource.splice(firstNewChildrenIndex, 0, ...newChildrenData);\n      // 更新父元素及祖先元素展开子节点的数量\n      const newChildrenCount = newChildrenData.length || 1;\n      updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, 'insert', {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,\n        rowKey: keys.rowKey,\n        type: 'add',\n        count: 1,\n      });\n    }\n\n    return dataSource;\n  }\n\n  appendToRoot(newData: T | T[], dataSource: T[], keys: KeysType) {\n    const newDataSource = dataSource.concat(newData);\n    const tmpNewData = newData instanceof Array ? newData : [newData];\n    const dataSourceLen = dataSource.length;\n    for (let i = 0, len = tmpNewData.length; i < len; i++) {\n      const rowValue = get(tmpNewData[i], keys.rowKey);\n      if (!rowValue) {\n        log.error('Table', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        continue;\n      }\n      const state: TableRowState = {\n        id: rowValue,\n        row: tmpNewData[i],\n        rowIndex: dataSourceLen + i,\n        level: 0,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: false,\n      };\n      state.path = [state];\n      this.treeDataMap.set(rowValue, state);\n    }\n    return newDataSource;\n  }\n\n  /**\n   * 在当前节点后，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertAfter(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'after');\n  }\n\n  /**\n   * 在当前节点前，插入一个兄弟节点\n   * @param rowValue 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  insertBefore(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    return this.insert(rowValue, newData, dataSource, keys, 'before');\n  }\n\n  insert(rowValue: string | number, newData: T, dataSource: T[], keys: KeysType, type: 'before' | 'after') {\n    const state = this.treeDataMap.get(rowValue);\n    if (!this.validateDataExist(state, rowValue)) return dataSource;\n    const newRowValue = get(newData, keys.rowKey);\n    const mapState = this.treeDataMap.get(newRowValue);\n    if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;\n    const rowIndex = type === 'after' ? state.rowIndex + 1 : state.rowIndex;\n    const newState = {\n      id: newRowValue,\n      row: newData,\n      rowIndex,\n      level: state.level,\n      expanded: false,\n      expandChildrenLength: 0,\n      disabled: false,\n      path: state.path.slice(0, -1),\n      parent: state.parent,\n    };\n    newState.path = newState.path.concat(newState);\n    const dataIndex = type === 'after' ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;\n    dataSource.splice(dataIndex, 0, newData);\n    const distance = type === 'after' ? 1 : 0;\n    if (state.parent) {\n      const childrenIndex = state.parent.row[keys.childrenKey].findIndex(\n        (t: TableRowData) => rowValue === get(t, keys.rowKey),\n      );\n      state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);\n      updateRowExpandLength(this.treeDataMap, state.parent.row, 1, 'insert', keys);\n    }\n    this.treeDataMap.set(newRowValue, newState);\n\n    // 更新 rowIndex 之后的下标\n    updateRowIndex(this.treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: state.rowIndex + 1,\n      type: 'add',\n    });\n\n    return dataSource;\n  }\n\n  /**\n   * 交换数据行\n   * @returns 交换失败返回 false\n   */\n  swapData(\n    dataSource: T[],\n    params: SwapParams<T>,\n    keys: KeysType,\n  ): { dataSource: T[]; result: boolean; code?: number; reason?: string } {\n    const startIndex = params.currentIndex;\n    const endIndex = params.targetIndex;\n    if (startIndex === endIndex) return { dataSource, result: true };\n    const startRowValue = get(params.current, keys.rowKey);\n    const endRowValue = get(params.target, keys.rowKey);\n    const startState = this.treeDataMap.get(startRowValue);\n    const endState = this.treeDataMap.get(endRowValue);\n    if (startState.level !== endState.level) {\n      return {\n        dataSource,\n        result: false,\n        code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,\n        reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason,\n      };\n    }\n    const startLastIndex = startIndex + startState.expandChildrenLength + 1;\n    const endLastIndex = endIndex + endState.expandChildrenLength + 1;\n    const startRowList = dataSource.slice(startIndex, startLastIndex);\n    const endRowList = dataSource.slice(endIndex, endLastIndex);\n    if (startIndex > endIndex) {\n      const middleRowList = dataSource.slice(endLastIndex, startIndex);\n      const allSwapList = startRowList.concat(endRowList, middleRowList);\n      dataSource.splice(endIndex, allSwapList.length);\n      dataSource.splice(endIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: endIndex,\n        maxRowIndex: startLastIndex,\n      });\n    } else {\n      const middleRowList = dataSource.slice(startLastIndex, endIndex);\n      const allSwapList = middleRowList.concat(endRowList, startRowList);\n      dataSource.splice(startIndex, allSwapList.length);\n      dataSource.splice(startIndex, 0, ...allSwapList);\n      updateRowIndex(this.treeDataMap, dataSource, {\n        rowKey: keys.rowKey,\n        minRowIndex: startIndex,\n        maxRowIndex: endLastIndex,\n      });\n    }\n\n    // 交换父元素中的两个元素位置\n    if (startState.parent) {\n      const children = startState.parent.row[keys.childrenKey];\n      let count = 0;\n      let targetIndex = -1;\n      let currentIndex = -1;\n      for (let i = 0, len = children.length; i < len; i++) {\n        if (get(children[i], keys.rowKey) === startRowValue) {\n          targetIndex = i;\n          count += 1;\n        }\n        if (get(children[i], keys.rowKey) === endRowValue) {\n          currentIndex = i;\n          count += 1;\n        }\n        if (count >= 2) break;\n      }\n      children[targetIndex] = params.target;\n      children[currentIndex] = params.current;\n    }\n\n    return { dataSource, result: true };\n  }\n\n  /**\n   * 展开所有节点\n   */\n  expandAll(dataSource: T[], keys: KeysType) {\n    this.expandAllRowIndex = 0;\n    const expandLoop = (\n      dataSource: T[],\n      keys: KeysType,\n      newData: T[] = [],\n      parentExpanded = false,\n      parent: TableRowState = null,\n    ) => {\n      for (let i = 0, len = dataSource.length; i < len; i++) {\n        const item = dataSource[i];\n        const rowValue = get(item, keys.rowKey);\n        const state = this.treeDataMap.get(rowValue);\n        const children = get(item, keys.childrenKey);\n        const originalExpanded = state.expanded;\n        state.rowIndex = this.expandAllRowIndex;\n        if (children !== true && children?.length) {\n          state.expanded = true;\n        }\n        state.expandChildrenLength = children?.length || 0;\n        this.expandAllRowIndex += 1;\n        if (!parentExpanded) {\n          newData.push(item);\n        }\n        this.treeDataMap.set(rowValue, state);\n        if (children?.length && !originalExpanded) {\n          // 同步更新父元素的展开数量\n          let tmpParent = parent;\n          while (tmpParent?.row) {\n            tmpParent.expandChildrenLength += children.length;\n            this.treeDataMap.set(tmpParent.id, tmpParent);\n            tmpParent = tmpParent.parent;\n          }\n          // 继续子元素\n          expandLoop(children, keys, newData, originalExpanded, state);\n        }\n      }\n      return newData;\n    };\n    return expandLoop(dataSource, keys);\n  }\n\n  /**\n   * 收起所有节点\n   */\n  foldAll(dataSource: T[], keys: KeysType) {\n    const newData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      state.rowIndex = state.level === 0 ? i : -1;\n      state.expanded = false;\n      state.expandChildrenLength = 0;\n      if (state.level === 0) {\n        newData.push(item);\n      }\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.foldAll(children, keys);\n      }\n    }\n    return newData;\n  }\n\n  /** 获取整个树形结构 */\n  getTreeNode(dataSource: T[], keys: KeysType): T[] {\n    // let isStarted = false;\n    const treeData: T[] = [];\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      const state = this.treeDataMap.get(rowValue);\n      // 只需要压入第一层数据\n      if (state.level === 0) {\n        treeData.push(item);\n      }\n    }\n    return treeData;\n  }\n\n  /**\n   * 获取展开的树形节点\n   * @param dataSource 平铺的树形结构数据\n   * @param keys 行唯一标识和子节点的字段名\n   * @param type 'unique' 标识获取展开节点的行唯一标识值，'data' 表示获取展开节点的数据，'all' 表示获取行节点包含展开状态的全部数据\n   * @returns 展开的树形节点\n   */\n  getTreeExpandedRow(dataSource: T[], keys: KeysType, type: 'unique' | 'data' | 'all' = 'data') {\n    const arr: (T | any)[] = [];\n    dataSource.forEach((item) => {\n      const rowValue = get(item, keys.rowKey);\n      const rowState = this.treeDataMap.get(rowValue);\n      if (!rowState.expanded) return;\n      if (type === 'unique') {\n        arr.push(rowValue);\n      } else if (type === 'data') {\n        arr.push(item);\n      } else {\n        arr.push(rowState);\n      }\n    });\n    return arr;\n  }\n\n  /**\n   * 初始化树形结构 Map\n   * @param treeDataMap 树形结构 Map\n   * @param dataSource 数据源\n   * @param column 树形结构列\n   * @param keys 字段映射关系\n   * @param level 层级\n   * @param parent 父元素\n   * @returns void\n   */\n  initialTreeDataMap(\n    treeDataMap: TableTreeDataMap,\n    dataSource: T[],\n    column: PrimaryTableCol,\n    keys: KeysType,\n    level = 0,\n    parent: TableRowState = null,\n  ) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (rowValue === undefined) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const children = get(item, keys.childrenKey);\n      const state: TableRowState = {\n        id: rowValue,\n        row: item,\n        rowIndex: level === 0 ? i : -1,\n        level,\n        expanded: false,\n        expandChildrenLength: 0,\n        disabled: isRowSelectedDisabled(column, item, i),\n        parent,\n      };\n      state.path = parent ? parent.path.concat(state) : [state];\n      treeDataMap.set(rowValue, state);\n      if (children?.length) {\n        this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);\n      }\n    }\n  }\n\n  // column.checkProps 和 column.disabled 会影响行的禁用状态，因此当列发生变化时，需要重置禁用状态\n  updateDisabledState(dataSource: T[], column: PrimaryTableCol, keys: KeysType) {\n    for (let i = 0, len = dataSource.length; i < len; i++) {\n      const item = dataSource[i];\n      const rowValue = get(item, keys.rowKey);\n      if (rowValue === undefined) {\n        log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n        return;\n      }\n      const state = this.treeDataMap.get(rowValue);\n      state.disabled = isRowSelectedDisabled(column, item, i);\n      this.treeDataMap.set(rowValue, state);\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        this.updateDisabledState(children, column, keys);\n      }\n    }\n  }\n\n  /**\n   * 校验数据合法性\n   */\n  validateDataExist(state: TableRowState, rowValue: string | number) {\n    if (!state) {\n      log.warn('EnhancedTable', `${rowValue} does not exist.`);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 校验数据是否已存在\n   */\n  validateDataDoubleExist(state: TableRowState, rowValue: string | number) {\n    if (state) {\n      log.warn('EnhancedTable', `Duplicated Key. ${rowValue} already exists.`);\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default TableTreeStore;\n\n/**\n * 更新展开的子节点数量\n * @param rowSate 行数据和状态\n * @param distance 需要调整的展开子节点长度数量，展开时增加，收起时减少。值为负数，表示减\n * @param expanded 展开/收起\n */\nexport function updateRowExpandLength(\n  treeDataMap: TableTreeDataMap,\n  row: TableRowData,\n  distance: number,\n  type: 'expand' | 'fold' | 'delete' | 'insert',\n  keys: KeysType,\n) {\n  let tmp = row;\n  while (tmp) {\n    const state = treeDataMap.get(get(tmp, keys.rowKey));\n    const expandLen = (state.expandChildrenLength || 0) + distance;\n    state.expandChildrenLength = Math.max(0, expandLen);\n    tmp = state?.parent?.row;\n  }\n  // 如果是收起状态，子节点需全部收起，清空子节点展开行数量，设置 expandChildrenLength 为 0\n  if (type === 'fold') {\n    clearRowExpandLength(treeDataMap, row, keys);\n  }\n}\n\nexport function clearRowExpandLength<T>(treeDataMap: TableTreeDataMap, row: T, keys: KeysType) {\n  const children = get(row, keys.childrenKey);\n  if (children?.length) {\n    children.forEach((item: T[]) => {\n      const state = treeDataMap.get(get(item, keys.rowKey));\n      if (!state) return;\n      state.expandChildrenLength = 0;\n      clearRowExpandLength(treeDataMap, state.row, keys);\n    });\n  }\n}\n\n/**\n * 更新子节点行状态，行数据、父节点、层级、路径等数据\n * @param rowState 行状态数据\n * @param expanded 展开或收起\n * @param keys\n */\nexport function updateChildrenRowState<T>(\n  treeDataMap: TableTreeDataMap,\n  rowState: TableRowState,\n  expanded: boolean,\n  keys: KeysType,\n) {\n  const { row, rowIndex } = rowState;\n  const childrenNodes = get(row, keys.childrenKey);\n  childrenNodes.forEach((item: T, kidRowIndex: number) => {\n    const rowValue = get(item, keys.rowKey);\n    const index = expanded ? rowIndex + 1 + kidRowIndex : -1;\n    const curState = treeDataMap.get(rowValue);\n    const newState: TableRowState = {\n      ...curState,\n      row: item,\n      rowIndex: index,\n      expanded: false,\n      parent: rowState,\n    };\n    treeDataMap.set(rowValue, newState);\n    // 父节点展开，子节点不一定展开；父节点收起，则所有子节点收起\n    if (!expanded) {\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        updateChildrenRowState(\n          treeDataMap,\n          {\n            ...newState,\n            rowIndex: -1,\n            expanded: false,\n          } as any,\n          expanded,\n          keys,\n        );\n      }\n    }\n  });\n}\n\nexport function updateRowData<T extends TableRowData = TableRowData>(\n  data: T[],\n  key: string | number,\n  newData: T,\n  keys: KeysType,\n) {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const item = data[i];\n    if (get(item, keys.rowKey) === key) {\n      // eslint-disable-next-line no-param-reassign\n      data[i] = newData;\n      return;\n    }\n    const children: T[] = get(item, keys.childrenKey) || [];\n    if (children?.length) {\n      updateRowData(children, key, newData, keys);\n    }\n  }\n}\n\nexport function updateRowIndex<T>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  extra: {\n    rowKey: string;\n    minRowIndex?: number;\n    maxRowIndex?: number;\n    type?: 'add' | 'remove';\n    count?: number;\n  },\n) {\n  const start = extra.minRowIndex || 0;\n  const end = extra.maxRowIndex || dataSource.length;\n  for (let rowIndex = start; rowIndex < end; rowIndex++) {\n    const item = dataSource[rowIndex];\n    const state = treeDataMap.get(get(item, extra.rowKey));\n    if (!state) {\n      log.warn('Table', 'tree map went wrong');\n    }\n    state.rowIndex = rowIndex + (extra?.count || 1) - 1;\n  }\n}\n\nexport type TreeDataMapType = InstanceType<typeof TableTreeStore>['treeDataMap'];\n"],"names":["TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL","code","reason","TableTreeStore","Map","treeDataMap","dataSource","columns","keys","clear","initialTreeDataMap","data","arr","i","len","length","item","push","get","rowKey","children","childrenKey","getAllUniqueKeys","p","log","error","rowValue","row","childrenNodes","r","rowIndex","expanded","set","updateExpandRow","changeRow","updateChildrenRowState","updateRowExpandLength","splice","apply","concat","expandChildrenLength","updateRowIndex","minRowIndex","key","newRowData","newRowValue","rowState","updateRowData","oldChildren","state","currentRowIndex","id","parent","siblings","index","findIndex","removeNumber","type","warn","newData","validateDataExist","isShowNewNode","tmpData","Array","newChildrenData","newChildrenStates","firstNewChildrenIndex","oneData","mapState","validateDataDoubleExist","newState","level","disabled","path","newChildrenCount","count","newDataSource","tmpNewData","dataSourceLen","insert","slice","dataIndex","distance","childrenIndex","t","params","startIndex","currentIndex","endIndex","targetIndex","result","startRowValue","current","endRowValue","target","startState","endState","startLastIndex","endLastIndex","startRowList","endRowList","middleRowList","allSwapList","maxRowIndex","expandAllRowIndex","expandLoop","parentExpanded","originalExpanded","tmpParent","foldAll","treeData","forEach","column","isRowSelectedDisabled","updateDisabledState","tmp","expandLen","Math","max","clearRowExpandLength","kidRowIndex","curState","extra","start","end"],"mappings":";;;;;;;;;;;;;;;;;;;;AA0BO,IAAMA,oCAAuC,GAAA;AAClDC,EAAAA,IAAM,EAAA,IAD4C;AAElDC,EAAAA,MAAQ,EAAA,4CAAA;AAF0C,EAA7C;;IAeDC;EAMJ,SAAc,cAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;;IAAA,eAJkB,CAAA,IAAA,EAAA,aAAA,qBAAIC,KAItB,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACP,IAAA,IAAA,CAAAC,WAAA,sBAAkBD,KAAlB,CAAA;AACP,GAAA;;;;AAQA,IAAA,KAAA,EAAA,SAAA,gBAAA,CAAiBE,UAAjB,EAAkCC,OAAlC,EAA8DC,IAA9D,EAA8E;AAAA,MAAA,IAAA,iBAAA,CAAA;;MAC5E,CAAKH,iBAAAA,GAAAA,IAAAA,CAAAA,WAAL,wEAAkBI,KAAlB,EAAA,CAAA;AACA,MAAA,IAAA,CAAKC,kBAAL,CAAwB,IAAKL,CAAAA,WAA7B,EAA0CC,UAA1C,EAAsDC,OAAA,CAAQ,CAAR,CAAtD,EAAkEC,IAAlE,CAAA,CAAA;AACF,KAAA;;;WAKA,SAAiBG,gBAAAA,CAAAA,IAAjB,EAA4BH,IAA5B,EAA2D;MAAA,IAAfI,GAAe,uEAAJ,EAAI,CAAA;;AACzD,MAAA,KAAA,IAASC,IAAI,CAAb,EAAgBC,GAAA,GAAMH,KAAKI,MAA3B,EAAmCF,CAAA,GAAIC,GAAvC,EAA4CD,CAAK,EAAjD,EAAiD;AAC/C,QAAA,IAAMG,OAAOL,IAAK,CAAAE,CAAA,CAAlB,CAAA;QACAD,GAAA,CAAIK,IAAJ,CAASC,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAT,CAAA,CAAA;QACA,IAAMC,QAAW,GAAAF,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKa,WAAf,CAAjB,CAAA;;AACA,QAAA,IAAID,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;AACf,UAAA,IAAA,CAAAO,gBAAA,CAAiBF,QAAjB,EAA2BZ,IAA3B,EAAiCI,GAAjC,CAAA,CAAA;AACP,SAAA;AACF,OAAA;;AACO,MAAA,OAAAA,GAAA,CAAA;AACT,KAAA;;;AAEA,IAAA,KAAA,EAAA,SAAA,gBAAA,CAAiBW,CAAjB,EAAkDjB,UAAlD,EAAmEE,IAAnE,EAAmF;MACjF,IAAI,CAACe,CAAL,EAAQ;AACFC,QAAAA,GAAA,CAAAC,KAAA,CAAM,eAAN,EAAuB,6DAAvB,CAAA,CAAA;AACG,QAAA,OAAAnB,UAAA,CAAA;AACT,OAAA;;MACA,IAAMoB,QAAW,GAAAR,GAAA,CAAIK,CAAE,CAAAI,GAAN,EAAWnB,KAAKW,MAAhB,CAAjB,CAAA;;AACA,MAAA,IAAIO,aAAa,KAAW,CAA5B,EAA4B;AACtBF,QAAAA,GAAA,CAAAC,KAAA,CAAM,eAAN,EAAuB,wEAAvB,CAAA,CAAA;AACJ,QAAA,OAAO,EAAP,CAAA;AACF,OAAA;;MACA,IAAMG,aAAgB,GAAAV,GAAA,CAAIK,CAAE,CAAAI,GAAN,EAAWnB,KAAKa,WAAhB,CAAtB,CAAA;AAEA,MAAA,IAAIO,aAAkB,KAAA,IAAtB,EAAmC,OAAAtB,UAAA,CAAA;MACnC,IAAMuB,CAAI,GAAA,IAAKxB,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAV,CAAA;AACAG,MAAAA,CAAA,CAAEC,QAAF,GAAaP,CAAE,CAAAO,QAAf,CAAA;AACED,MAAAA,CAAA,CAAAE,QAAA,GAAW,CAACF,CAAE,CAAAE,QAAd,CAAA;AACG,MAAA,IAAA,CAAA1B,WAAA,CAAY2B,GAAZ,CAAgBN,QAAhB,EAA0BG,CAA1B,CAAA,CAAA;MACL,OAAO,IAAA,CAAKI,eAAL,CAAqBJ,CAArB,EAAwBvB,UAAxB,EAAoCE,IAApC,CAAP,CAAA;AACF,KAAA;;;AAEA,IAAA,KAAA,EAAA,SAAA,eAAA,CAAgB0B,SAAhB,EAA0C5B,UAA1C,EAA2DE,IAA3D,EAAgF;AAC9E,MAAA,IAAQmB,GAAR,GAAoCO,SAApC,CAAQP,GAAR;AAAA,UAAaG,QAAb,GAAoCI,SAApC,CAAaJ,QAAb;AAAA,UAAuBC,QAAvB,GAAoCG,SAApC,CAAuBH,QAAvB,CAAA;AACM,MAAA,IAAE1B,WAAF,GAAkB,IAAlB,CAAEA,WAAF,CAAA;MACN,IAAMuB,aAAgB,GAAAV,GAAA,CAAIS,GAAJ,EAASnB,IAAA,CAAKa,WAAd,CAAtB,CAAA;AACI,MAAA,IAAA,CAACM,GAAD,IAAQ,CAACC,aAAT,EAA+B,OAAAtB,UAAA,CAAA;;AACnC,MAAA,IAAIyB,QAAJ,EAAc;QACWI,sBAAA,CAAA9B,WAAA,EAAa6B,SAAb,EAAwBH,QAAxB,EAAkCvB,IAAlC,CAAA,CAAA;AACvB4B,QAAAA,qBAAA,CAAsB/B,WAAtB,EAAmCsB,GAAnC,EAAwCC,aAAc,CAAAb,MAAtD,EAA8D,QAA9D,EAAwEP,IAAxE,CAAA,CAAA;AAEWF,QAAAA,UAAA,CAAA+B,MAAA,CAAOC,KAAP,CAAahC,UAAb,EAAyB,CAACwB,QAAA,GAAW,CAAZ,EAAe,CAAf,EAAkBS,MAAlB,CAAyBX,aAAzB,CAAzB,CAAA,CAAA;AACN,OALP,MAKO;QACqBO,sBAAA,CAAA9B,WAAA,EAAa6B,SAAb,EAAwBH,QAAxB,EAAkCvB,IAAlC,CAAA,CAAA;QACpB,IAAAM,GAAA,GAAMoB,SAAU,CAAAM,oBAAV,IAAkCZ,aAAc,CAAAb,MAAtD,CAAA;AACNqB,QAAAA,qBAAA,CAAsB/B,WAAtB,EAAmCsB,GAAnC,EAAwC,CAAK,CAAL,GAAKb,GAA7C,EAAkD,MAAlD,EAA0DN,IAA1D,CAAA,CAAA;AACWF,QAAAA,UAAA,CAAA+B,MAAA,CAAOP,QAAW,GAAA,CAAlB,EAAqBhB,GAArB,CAAA,CAAA;AACb,OAAA;;AAEA2B,MAAAA,cAAA,CAAepC,WAAf,EAA4BC,UAA5B,EAAwC;QACtCa,QAAQX,IAAK,CAAAW,MADyB;QAEtCuB,aAAaZ,QAAW,GAAA,CAAA;AAFc,OAAxC,CAAA,CAAA;AAIO,MAAA,OAAAxB,UAAA,CAAA;AACT,KAAA;;;AAOA,IAAA,KAAA,EAAA,SAAA,OAAA,CAAQqC,GAAR,EAA2C;AAClC,MAAA,OAAA,KAAKtC,WAAL,CAAiBa,GAAjB,CAAqByB,GAArB,CAAA,CAAA;AACT,KAAA;;;AAQA,IAAA,KAAA,EAAA,SAAA,UAAA,CAAWjB,QAAX,EAAoCkB,UAApC,EAAmDtC,UAAnD,EAAoEE,IAApE,EAA4F;MAC1F,IAAMqC,WAAc,GAAA3B,GAAA,CAAI0B,UAAJ,EAAgBpC,IAAA,CAAKW,MAArB,CAApB,CAAA;MACA,IAAM2B,QAAW,GAAA,IAAKzC,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAjB,CAAA;;MAEA,IAAI,CAACoB,QAAD,IAAaA,QAAS,CAAAhB,QAAT,KAAsB,CAAI,CAA3C,EAA2C;AAC3BiB,QAAAA,aAAA,CAAAzC,UAAA,EAAYoB,QAAZ,EAAsBkB,UAAtB,EAAkC;UAC9CzB,QAAQX,IAAK,CAAAW,MADiC;UAE9CE,aAAab,IAAK,CAAAa,WAAAA;AAF4B,SAAlC,CAAA,CAAA;AAIP,QAAA,OAAA,CAAA,CAAA,CAAA;AACT,OAAA;;MAGA,IAAIH,GAAI,CAAA0B,UAAA,EAAYpC,IAAK,CAAAa,WAAjB,CAAJ,KAAsC,IAA1C,EAAgD;QAC9C,IAAM2B,WAAc,GAAA9B,GAAA,CAAI4B,QAAS,CAAAnB,GAAb,EAAkBnB,KAAKa,WAAvB,CAApB,CAAA;;AACA,QAAA,IAAI2B,WAAJ,KAAIA,IAAAA,IAAAA,WAAJ,eAAIA,YAAajC,MAAjB,EAAyB;AACvB,UAAA,KAAA,IAASF,IAAI,CAAb,EAAgBC,GAAA,GAAMkC,YAAYjC,MAAlC,EAA0CF,CAAA,GAAIC,GAA9C,EAAmDD,CAAK,EAAxD,EAAwD;AACtD,YAAA,IAAMa,SAAW,GAAAR,GAAA,CAAI8B,WAAY,CAAAnC,CAAA,CAAhB,EAAoBL,KAAKW,MAAzB,CAAjB,CAAA;YACA,IAAM8B,KAAQ,GAAA,IAAK5C,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,SAArB,CAAd,CAAA;;AACA,YAAA,IAAIuB,KAAJ,EAAW;cACJ,IAAA5C,CAAAA,WAAA,WAAmBqB,SAAnB,CAAA,CAAA;AACP,aAAA;AACF,WAAA;AACF,SAAA;AACF,OAAA;;AAEA,MAAA,IAAMwB,kBAAkBJ,QAAS,CAAAhB,QAAjC,CAAA;MACAgB,QAAA,CAASnB,GAAT,GAAeiB,UAAf,CAAA;MACAE,QAAA,CAASK,EAAT,GAAcN,WAAd,CAAA;;MAGA,IAAIC,SAASM,MAAb,EAAqB;AAEnB,QAAA,IAAMC,WAAWnC,GAAI,CAAA4B,QAAA,CAASM,MAAT,CAAgBzB,GAAhB,EAAqBnB,KAAKa,WAA1B,CAArB,CAAA;AACM,QAAA,IAAAiC,KAAA,GAAQD,QAAS,CAAAE,SAAT,CAAmB,UAACvC,IAAD,EAAA;UAAA,OAAaE,IAAIF,MAAMR,IAAA,CAAKW,OAAf,KAA2BO,QAAxC,CAAA;AAAA,SAAnB,CAAR,CAAA;AACN2B,QAAAA,QAAA,CAASC,KAAT,CAAA,GAAkBV,UAAlB,CAAA;AACF,OAAA;;AAEK,MAAA,IAAA,CAAAvC,WAAA,CAAY2B,GAAZ,CAAgBa,WAAhB,EAA6BC,QAA7B,CAAA,CAAA;;MAEL,IAAIpB,aAAamB,WAAjB,EAA8B;QACvB,IAAAxC,CAAAA,WAAA,WAAmBqB,QAAnB,CAAA,CAAA;AACP,OAAA;;AACO,MAAA,OAAAwB,eAAA,CAAA;AACT,KAAA;;;AAMA,IAAA,KAAA,EAAA,SAAA,MAAA,CAAOP,GAAP,EAA2BrC,UAA3B,EAA4CE,IAA5C,EAAiE;MAC/D,IAAMqB,CAAI,GAAA,IAAKxB,CAAAA,WAAL,CAAiBa,GAAjB,CAAqByB,GAArB,CAAV,CAAA;;AACI,MAAA,IAAAd,CAAA,IAAKA,CAAE,CAAAC,QAAF,IAAc,CAAnB,EAAsB;QAElB,IAAA0B,YAAA,GAAA,CAAgB3B,CAAE,CAAAW,oBAAF,IAA0B,CAA1C,IAA+C,CAA/C,CAAA;AACKlC,QAAAA,UAAA,CAAA+B,MAAA,CAAOR,CAAE,CAAAC,QAAT,EAAmB0B,YAAnB,CAAA,CAAA;;QAEX,IAAI3B,EAAEuB,MAAN,EAAc;AACZ,UAAA,IAAMC,WAAWnC,GAAI,CAAAW,CAAA,CAAEuB,MAAF,CAASzB,GAAT,EAAcnB,KAAKa,WAAnB,CAArB,CAAA;AACM,UAAA,IAAAiC,KAAA,GAAQD,QAAS,CAAAE,SAAT,CAAmB,UAACvC,IAAD,EAAA;YAAA,OAAwBE,IAAIF,MAAMR,IAAA,CAAKW,OAAf,KAA2BwB,GAAnD,CAAA;AAAA,WAAnB,CAAR,CAAA;AACGU,UAAAA,QAAA,CAAAhB,MAAA,CAAOiB,KAAP,EAAc,CAAd,CAAA,CAAA;AACalB,UAAAA,qBAAA,CAAA,IAAK/B,CAAAA,WAAL,EAAkBwB,CAAE,CAAAuB,MAAF,CAASzB,GAA3B,EAAgC,CAAK,CAAL,GAAK6B,YAArC,EAAmD,QAAnD,EAA6DhD,IAA7D,CAAA,CAAA;AACxB,SAAA;;QAEK,IAAAH,CAAAA,WAAA,WAAmBsC,GAAnB,CAAA,CAAA;AAGUF,QAAAA,cAAA,CAAA,IAAA,CAAKpC,WAAL,EAAkBC,UAAlB,EAA8B;UAC3CoC,aAAab,CAAE,CAAAC,QAD4B;UAE3CX,QAAQX,IAAK,CAAAW,MAF8B;AAG3CsC,UAAAA,IAAM,EAAA,QAAA;AAHqC,SAA9B,CAAA,CAAA;AAKV,OApBH,MAoBG;AACDjC,QAAAA,GAAA,CAAAkC,IAAA,CAAK,eAAL,EAAsB,iDAAtB,CAAA,CAAA;AACN,OAAA;;AACO,MAAA,OAAApD,UAAA,CAAA;AACT,KAAA;;;AAOA,IAAA,KAAA,EAAA,SAAA,QAAA,CAASoB,QAAT,EAAoCiC,OAApC,EAAsDrD,UAAtD,EAAuEE,IAAvE,EAA4F;MAC1F,IAAMyC,KAAQ,GAAA,IAAK5C,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAd,CAAA;MACA,IAAI,CAAC,IAAKkC,CAAAA,iBAAL,CAAuBX,KAAvB,EAA8BvB,QAA9B,CAAL,EAAqD,OAAApB,UAAA,CAAA;MACrD,IAAMc,QAAgB,GAAAF,GAAA,CAAI+B,KAAM,CAAAtB,GAAV,EAAenB,KAAKa,WAApB,CAAtB,CAAA;AAEA,MAAA,IAAMwC,aAAgB,GAAAZ,KAAA,CAAMlB,QAAN,IAAkB,EAACX,QAAD,KAAA,IAAA,IAACA,QAAD,KAAA,KAAA,CAAA,IAACA,QAAU,CAAAL,MAAX,CAAxC,CAAA;MAEA,IAAM+C,OAAU,GAAAH,OAAA,YAAmBI,KAAnB,GAA2BJ,OAA3B,GAAqC,CAACA,OAAD,CAArD,CAAA;MACA,IAAMK,kBAAuB,EAA7B,CAAA;MACA,IAAMC,oBAAqC,EAA3C,CAAA;MACA,IAAIC,qBAAwB,GAAA,CAAA,CAA5B,CAAA;;AACA,MAAA,KAAA,IAASrD,IAAI,CAAb,EAAgBC,GAAA,GAAMgD,QAAQ/C,MAA9B,EAAsCF,CAAA,GAAIC,GAA1C,EAA+CD,CAAK,EAApD,EAAoD;AAClD,QAAA,IAAMsD,UAAUL,OAAQ,CAAAjD,CAAA,CAAxB,CAAA;QACA,IAAMgC,WAAc,GAAA3B,GAAA,CAAIiD,OAAJ,EAAa3D,IAAA,CAAKW,MAAlB,CAApB,CAAA;QACA,IAAMiD,QAAW,GAAA,IAAK/D,CAAAA,WAAL,CAAiBa,GAAjB,CAAqB2B,WAArB,CAAjB,CAAA;;QACA,IAAI,CAAC,KAAKwB,uBAAL,CAA6BD,QAA7B,EAAuCvB,WAAvC,CAAL,EAA0D;AACpDrB,UAAAA,GAAA,CAAAkC,IAAA,CAAK,OAAL,6BAAmCb,WAAnC,EAAA,qBAAA,CAAA,CAAA,CAAA;AACC,SAFP,MAEO;UACC,IAAAf,QAAA,GAAW+B,gBAAgBZ,KAAM,CAAAnB,QAAN,IAAkBmB,MAAMT,oBAAN,IAA8B,CAAhD,KAAsD3B,IAAI,CAA1D,IAA+D,CAAA,CAA1F,CAAA;;UACN,IAAIA,MAAM,CAAV,EAAa;AACaqD,YAAAA,qBAAA,GAAApC,QAAA,CAAA;AAC1B,WAAA;;AACA,UAAA,IAAMwC,QAAW,GAAA;AACfnB,YAAAA,EAAI,EAAAN,WADW;AAEflB,YAAAA,GAAK,EAAAwC,OAFU;AAGfrC,YAAAA,QAAA,EAAAA,QAHe;AAIfyC,YAAAA,KAAA,EAAOtB,MAAMsB,KAAN,GAAc,CAJN;AAKfxC,YAAAA,QAAU,EAAA,KALK;AAMfS,YAAAA,oBAAsB,EAAA,CANP;AAOfgC,YAAAA,QAAU,EAAA,KAPK;AAQfC,YAAAA,IAAM,EAAIxB,kBAAAA,CAAAA,KAAA,CAAMwB,IAAV,CARS;AASfrB,YAAAA,MAAQ,EAAAH,KAAAA;WATV,CAAA;UAWAqB,QAAA,CAASG,IAAT,GAAgBH,QAAA,CAASG,IAAT,CAAclC,MAAd,CAAqB+B,QAArB,CAAhB,CAAA;UACAN,eAAA,CAAgB/C,IAAhB,CAAqBkD,OAArB,CAAA,CAAA;UACAF,iBAAA,CAAkBhD,IAAlB,CAAuBqD,QAAvB,CAAA,CAAA;AACK,UAAA,IAAA,CAAAjE,WAAA,CAAY2B,GAAZ,CAAgBa,WAAhB,EAA6ByB,QAA7B,CAAA,CAAA;AACP,SAAA;AACF,OAAA;;AACA,MAAA,IAAI,CAACN,eAAgB,CAAAjD,MAArB,EAAoC,OAAAT,UAAA,CAAA;;AAEpC,MAAA,IAAIc,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;AACdkC,QAAAA,KAAA,CAAAtB,GAAA,CAAInB,KAAKa,WAAT,IAAwB4B,KAAA,CAAMtB,GAAN,CAAUnB,IAAK,CAAAa,WAAf,EAA4BkB,MAA5B,CAAmCyB,eAAnC,CAAxB,CAAA;AACD,OAFP,MAEO;AACCf,QAAAA,KAAA,CAAAtB,GAAA,CAAInB,KAAKa,WAAT,IAAwB2C,eAAxB,CAAA;QACNf,KAAA,CAAMlB,QAAN,GAAiB,IAAjB,CAAA;AACF,OAAA;;AAGA,MAAA,IAAI8B,aAAJ,EAAmB;QACjBvD,UAAA,CAAW+B,MAAX,CAAA,KAAA,CAAA/B,UAAA,EAAA,CAAkB4D,qBAAlB,EAAyC,CAAzC,CAA+CF,CAAAA,MAAAA,CAAAA,eAA/C,CAAA,CAAA,CAAA;AAEM,QAAA,IAAAU,gBAAA,GAAmBV,gBAAgBjD,MAAhB,IAA0B,CAA7C,CAAA;QACNqB,qBAAA,CAAsB,IAAK/B,CAAAA,WAA3B,EAAwC4C,KAAM,CAAAtB,GAA9C,EAAmD+C,gBAAnD,EAAqE,QAArE,EAA+E;UAC7EvD,QAAQX,IAAK,CAAAW,MADgE;UAE7EE,aAAab,IAAK,CAAAa,WAAAA;AAF2D,SAA/E,CAAA,CAAA;AAKeoB,QAAAA,cAAA,CAAA,IAAA,CAAKpC,WAAL,EAAkBC,UAAlB,EAA8B;AAC3CoC,UAAAA,WAAA,EAAawB,qBAAwB,GAAAF,eAAA,CAAgBjD,MAAxC,GAAiD,CADnB;UAE3CI,QAAQX,IAAK,CAAAW,MAF8B;AAG3CsC,UAAAA,IAAM,EAAA,KAHqC;AAI3CkB,UAAAA,KAAO,EAAA,CAAA;AAJoC,SAA9B,CAAA,CAAA;AAMjB,OAAA;;AAEO,MAAA,OAAArE,UAAA,CAAA;AACT,KAAA;;;AAEA,IAAA,KAAA,EAAA,SAAA,YAAA,CAAaqD,OAAb,EAA+BrD,UAA/B,EAAgDE,IAAhD,EAAgE;AACxD,MAAA,IAAAoE,aAAA,GAAgBtE,UAAW,CAAAiC,MAAX,CAAkBoB,OAAlB,CAAhB,CAAA;MACN,IAAMkB,UAAa,GAAAlB,OAAA,YAAmBI,KAAnB,GAA2BJ,OAA3B,GAAqC,CAACA,OAAD,CAAxD,CAAA;AACA,MAAA,IAAMmB,gBAAgBxE,UAAW,CAAAS,MAAjC,CAAA;;AACA,MAAA,KAAA,IAASF,IAAI,CAAb,EAAgBC,GAAA,GAAM+D,WAAW9D,MAAjC,EAAyCF,CAAA,GAAIC,GAA7C,EAAkDD,CAAK,EAAvD,EAAuD;AACrD,QAAA,IAAMa,QAAW,GAAAR,GAAA,CAAI2D,UAAW,CAAAhE,CAAA,CAAf,EAAmBL,KAAKW,MAAxB,CAAjB,CAAA;;QACA,IAAI,CAACO,QAAL,EAAe;AACTF,UAAAA,GAAA,CAAAC,KAAA,CAAM,OAAN,EAAe,wEAAf,CAAA,CAAA;AACJ,UAAA,SAAA;AACF,SAAA;;AACA,QAAA,IAAMwB,KAAuB,GAAA;AAC3BE,UAAAA,EAAI,EAAAzB,QADuB;AAE3BC,UAAAA,KAAKkD,UAAW,CAAAhE,CAAA,CAFW;UAG3BiB,UAAUgD,aAAgB,GAAAjE,CAHC;AAI3B0D,UAAAA,KAAO,EAAA,CAJoB;AAK3BxC,UAAAA,QAAU,EAAA,KALiB;AAM3BS,UAAAA,oBAAsB,EAAA,CANK;AAO3BgC,UAAAA,QAAU,EAAA,KAAA;SAPZ,CAAA;AASMvB,QAAAA,KAAA,CAAAwB,IAAA,GAAO,CAACxB,KAAD,CAAP,CAAA;AACD,QAAA,IAAA,CAAA5C,WAAA,CAAY2B,GAAZ,CAAgBN,QAAhB,EAA0BuB,KAA1B,CAAA,CAAA;AACP,OAAA;;AACO,MAAA,OAAA2B,aAAA,CAAA;AACT,KAAA;;;AAOA,IAAA,KAAA,EAAA,SAAA,WAAA,CAAYlD,QAAZ,EAAuCiC,OAAvC,EAAmDrD,UAAnD,EAAoEE,IAApE,EAAyF;AACvF,MAAA,OAAO,IAAKuE,CAAAA,MAAL,CAAYrD,QAAZ,EAAsBiC,OAAtB,EAA+BrD,UAA/B,EAA2CE,IAA3C,EAAiD,OAAjD,CAAP,CAAA;AACF,KAAA;;;AAOA,IAAA,KAAA,EAAA,SAAA,YAAA,CAAakB,QAAb,EAAwCiC,OAAxC,EAAoDrD,UAApD,EAAqEE,IAArE,EAA0F;AACxF,MAAA,OAAO,IAAKuE,CAAAA,MAAL,CAAYrD,QAAZ,EAAsBiC,OAAtB,EAA+BrD,UAA/B,EAA2CE,IAA3C,EAAiD,QAAjD,CAAP,CAAA;AACF,KAAA;;;WAEA,SAAOkB,MAAAA,CAAAA,QAAP,EAAkCiC,OAAlC,EAA8CrD,UAA9C,EAA+DE,IAA/D,EAA+EiD,IAA/E,EAAyG;MACvG,IAAMR,KAAQ,GAAA,IAAK5C,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAd,CAAA;MACA,IAAI,CAAC,IAAKkC,CAAAA,iBAAL,CAAuBX,KAAvB,EAA8BvB,QAA9B,CAAL,EAAqD,OAAApB,UAAA,CAAA;MACrD,IAAMuC,WAAc,GAAA3B,GAAA,CAAIyC,OAAJ,EAAanD,IAAA,CAAKW,MAAlB,CAApB,CAAA;MACA,IAAMiD,QAAW,GAAA,IAAK/D,CAAAA,WAAL,CAAiBa,GAAjB,CAAqB2B,WAArB,CAAjB,CAAA;MACA,IAAI,CAAC,IAAKwB,CAAAA,uBAAL,CAA6BD,QAA7B,EAAuCvB,WAAvC,CAAL,EAAiE,OAAAvC,UAAA,CAAA;AACjE,MAAA,IAAMwB,WAAW2B,IAAS,KAAA,OAAT,GAAmBR,KAAM,CAAAnB,QAAN,GAAiB,CAApC,GAAwCmB,KAAM,CAAAnB,QAA/D,CAAA;AACA,MAAA,IAAMwC,QAAW,GAAA;AACfnB,QAAAA,EAAI,EAAAN,WADW;AAEflB,QAAAA,GAAK,EAAAgC,OAFU;AAGf7B,QAAAA,QAAA,EAAAA,QAHe;QAIfyC,OAAOtB,KAAM,CAAAsB,KAJE;AAKfxC,QAAAA,QAAU,EAAA,KALK;AAMfS,QAAAA,oBAAsB,EAAA,CANP;AAOfgC,QAAAA,QAAU,EAAA,KAPK;QAQfC,IAAM,EAAAxB,KAAA,CAAMwB,IAAN,CAAWO,KAAX,CAAiB,CAAjB,EAAoB,CAAE,CAAtB,CARS;QASf5B,QAAQH,KAAM,CAAAG,MAAAA;OAThB,CAAA;MAWAkB,QAAA,CAASG,IAAT,GAAgBH,QAAA,CAASG,IAAT,CAAclC,MAAd,CAAqB+B,QAArB,CAAhB,CAAA;AACM,MAAA,IAAAW,SAAA,GAAYxB,SAAS,OAAT,GAAmBR,KAAA,CAAMnB,QAAN,IAAkBmB,KAAM,CAAAT,oBAAN,GAA6B,CAA/C,CAAnB,GAAuES,KAAM,CAAAnB,QAAzF,CAAA;AACKxB,MAAAA,UAAA,CAAA+B,MAAA,CAAO4C,SAAP,EAAkB,CAAlB,EAAqBtB,OAArB,CAAA,CAAA;MACL,IAAAuB,QAAA,GAAWzB,IAAS,KAAA,OAAT,GAAmB,CAAnB,GAAuB,CAAlC,CAAA;;MACN,IAAIR,MAAMG,MAAV,EAAkB;AAChB,QAAA,IAAM+B,aAAgB,GAAAlC,KAAA,CAAMG,MAAN,CAAazB,GAAb,CAAiBnB,KAAKa,WAAtB,CAAA,CAAmCkC,SAAnC,CACpB,UAAC6B,CAAD,EAAA;UAAA,OAAqB1D,QAAA,KAAaR,GAAI,CAAAkE,CAAA,EAAG5E,KAAKW,MAAR,CAAtC,CAAA;AAAA,SADoB,CAAtB,CAAA;AAGM8B,QAAAA,KAAA,CAAAG,MAAA,CAAOzB,GAAP,CAAWnB,IAAK,CAAAa,WAAhB,CAA6BgB,CAAAA,MAA7B,CAAoC8C,aAAgB,GAAAD,QAApD,EAA8D,CAA9D,EAAiEvB,OAAjE,CAAA,CAAA;AACNvB,QAAAA,qBAAA,CAAsB,IAAA,CAAK/B,WAA3B,EAAwC4C,KAAA,CAAMG,MAAN,CAAazB,GAArD,EAA0D,CAA1D,EAA6D,QAA7D,EAAuEnB,IAAvE,CAAA,CAAA;AACF,OAAA;;AACK,MAAA,IAAA,CAAAH,WAAA,CAAY2B,GAAZ,CAAgBa,WAAhB,EAA6ByB,QAA7B,CAAA,CAAA;AAGU7B,MAAAA,cAAA,CAAA,IAAA,CAAKpC,WAAL,EAAkBC,UAAlB,EAA8B;QAC3Ca,QAAQX,IAAK,CAAAW,MAD8B;AAE3CuB,QAAAA,WAAA,EAAaO,MAAMnB,QAAN,GAAiB,CAFa;AAG3C2B,QAAAA,IAAM,EAAA,KAAA;AAHqC,OAA9B,CAAA,CAAA;AAMR,MAAA,OAAAnD,UAAA,CAAA;AACT,KAAA;;;AAMA,IAAA,KAAA,EAAA,SAAA,QAAA,CACEA,UADF,EAEE+E,MAFF,EAGE7E,IAHF,EAIwE;AACtE,MAAA,IAAM8E,aAAaD,MAAO,CAAAE,YAA1B,CAAA;AACA,MAAA,IAAMC,WAAWH,MAAO,CAAAI,WAAxB,CAAA;AACA,MAAA,IAAIH,UAAe,KAAAE,QAAnB,EAAoC,OAAA;AAAElF,QAAAA,UAAY,EAAZA,UAAF;AAAcoF,QAAAA,MAAA,EAAQ,IAAA;OAAtB,CAAA;MACpC,IAAMC,aAAgB,GAAAzE,GAAA,CAAImE,MAAO,CAAAO,OAAX,EAAoBpF,KAAKW,MAAzB,CAAtB,CAAA;MACA,IAAM0E,WAAc,GAAA3E,GAAA,CAAImE,MAAO,CAAAS,MAAX,EAAmBtF,KAAKW,MAAxB,CAApB,CAAA;MACA,IAAM4E,UAAa,GAAA,IAAK1F,CAAAA,WAAL,CAAiBa,GAAjB,CAAqByE,aAArB,CAAnB,CAAA;MACA,IAAMK,QAAW,GAAA,IAAK3F,CAAAA,WAAL,CAAiBa,GAAjB,CAAqB2E,WAArB,CAAjB,CAAA;;AACI,MAAA,IAAAE,UAAA,CAAWxB,KAAX,KAAqByB,QAAA,CAASzB,KAA9B,EAAqC;QAChC,OAAA;AACLjE,UAAAA,UAAA,EAAAA,UADK;AAELoF,UAAAA,MAAQ,EAAA,KAFH;UAGLzF,MAAMD,oCAAqC,CAAAC,IAHtC;UAILC,QAAQF,oCAAqC,CAAAE,MAAAA;SAJxC,CAAA;AAMT,OAAA;;MACM,IAAA+F,cAAA,GAAiBX,UAAa,GAAAS,UAAA,CAAWvD,oBAAxB,GAA+C,CAAhE,CAAA;MACA,IAAA0D,YAAA,GAAeV,QAAW,GAAAQ,QAAA,CAASxD,oBAApB,GAA2C,CAA1D,CAAA;MACN,IAAM2D,YAAe,GAAA7F,UAAA,CAAW0E,KAAX,CAAiBM,UAAjB,EAA6BW,cAA7B,CAArB,CAAA;MACA,IAAMG,UAAa,GAAA9F,UAAA,CAAW0E,KAAX,CAAiBQ,QAAjB,EAA2BU,YAA3B,CAAnB,CAAA;;MACA,IAAIZ,aAAaE,QAAjB,EAA2B;QACzB,IAAMa,aAAgB,GAAA/F,UAAA,CAAW0E,KAAX,CAAiBkB,YAAjB,EAA+BZ,UAA/B,CAAtB,CAAA;QACA,IAAMgB,WAAc,GAAAH,YAAA,CAAa5D,MAAb,CAAoB6D,UAApB,EAAgCC,aAAhC,CAApB,CAAA;AACW/F,QAAAA,UAAA,CAAA+B,MAAA,CAAOmD,QAAP,EAAiBc,WAAA,CAAYvF,MAA7B,CAAA,CAAA;QACXT,UAAA,CAAW+B,MAAX,CAAA,KAAA,CAAA/B,UAAA,EAAA,CAAkBkF,QAAlB,EAA4B,CAA5B,CAAkCc,CAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,WAAlC,CAAA,CAAA,CAAA,CAAA;AACe7D,QAAAA,cAAA,CAAA,IAAA,CAAKpC,WAAL,EAAkBC,UAAlB,EAA8B;UAC3Ca,QAAQX,IAAK,CAAAW,MAD8B;AAE3CuB,UAAAA,WAAa,EAAA8C,QAF8B;AAG3Ce,UAAAA,WAAa,EAAAN,cAAAA;AAH8B,SAA9B,CAAA,CAAA;AAKV,OAVP,MAUO;QACL,IAAMI,cAAgB,GAAA/F,UAAA,CAAW0E,KAAX,CAAiBiB,cAAjB,EAAiCT,QAAjC,CAAtB,CAAA;;QACA,IAAMc,YAAc,GAAAD,cAAA,CAAc9D,MAAd,CAAqB6D,UAArB,EAAiCD,YAAjC,CAApB,CAAA;;AACW7F,QAAAA,UAAA,CAAA+B,MAAA,CAAOiD,UAAP,EAAmBgB,YAAA,CAAYvF,MAA/B,CAAA,CAAA;QACXT,UAAA,CAAW+B,MAAX,CAAA,KAAA,CAAA/B,UAAA,EAAA,CAAkBgF,UAAlB,EAA8B,CAA9B,CAAoCgB,CAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,YAApC,CAAA,CAAA,CAAA,CAAA;AACe7D,QAAAA,cAAA,CAAA,IAAA,CAAKpC,WAAL,EAAkBC,UAAlB,EAA8B;UAC3Ca,QAAQX,IAAK,CAAAW,MAD8B;AAE3CuB,UAAAA,WAAa,EAAA4C,UAF8B;AAG3CiB,UAAAA,WAAa,EAAAL,YAAAA;AAH8B,SAA9B,CAAA,CAAA;AAKjB,OAAA;;MAGA,IAAIH,WAAW3C,MAAf,EAAuB;QACrB,IAAMhC,QAAW,GAAA2E,UAAA,CAAW3C,MAAX,CAAkBzB,GAAlB,CAAsBnB,IAAK,CAAAa,WAA3B,CAAjB,CAAA;QACA,IAAIsD,KAAQ,GAAA,CAAZ,CAAA;QACA,IAAIc,WAAc,GAAA,CAAA,CAAlB,CAAA;QACA,IAAIF,YAAe,GAAA,CAAA,CAAnB,CAAA;;AACA,QAAA,KAAA,IAAS1E,IAAI,CAAb,EAAgBC,GAAA,GAAMM,SAASL,MAA/B,EAAuCF,CAAA,GAAIC,GAA3C,EAAgDD,CAAK,EAArD,EAAqD;AACnD,UAAA,IAAIK,IAAIE,QAAS,CAAAP,CAAA,GAAIL,IAAK,CAAAW,OAAtB,KAAkCwE,aAAtC,EAAqD;AACrCF,YAAAA,WAAA,GAAA5E,CAAA,CAAA;AACL8D,YAAAA,KAAA,IAAA,CAAA,CAAA;AACX,WAAA;;AACA,UAAA,IAAIzD,IAAIE,QAAS,CAAAP,CAAA,GAAIL,IAAK,CAAAW,OAAtB,KAAkC0E,WAAtC,EAAmD;AAClCN,YAAAA,YAAA,GAAA1E,CAAA,CAAA;AACN8D,YAAAA,KAAA,IAAA,CAAA,CAAA;AACX,WAAA;;UACA,IAAIA,KAAS,IAAA,CAAb,EAAgB,MAAA;AAClB,SAAA;;AACAvD,QAAAA,QAAA,CAASqE,WAAT,CAAA,GAAwBJ,MAAO,CAAAS,MAA/B,CAAA;AACA1E,QAAAA,QAAA,CAASmE,YAAT,CAAA,GAAyBF,MAAO,CAAAO,OAAhC,CAAA;AACF,OAAA;;MAEO,OAAA;AAAEtF,QAAAA,UAAY,EAAZA,UAAF;AAAcoF,QAAAA,MAAA,EAAQ,IAAA;OAAtB,CAAA;AACT,KAAA;;;WAKA,SAAUpF,SAAAA,CAAAA,UAAV,EAA2BE,IAA3B,EAA2C;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;MACzC,IAAKgG,CAAAA,iBAAL,GAAyB,CAAzB,CAAA;;MACM,IAAAC,UAAA,GAAa,SAAbA,UAAa,CACjBnG,WADiB,EAEjBE,KAFiB,EAMd;QAAA,IAHHmD,OAGG,uEAHY,EAGZ,CAAA;QAAA,IAFH+C,cAEG,uEAFc,KAEd,CAAA;QAAA,IADHtD,MACG,uEADqB,IACrB,CAAA;;AACH,QAAA,KAAA,IAASvC,IAAI,CAAb,EAAgBC,GAAA,GAAMR,YAAWS,MAAjC,EAAyCF,CAAA,GAAIC,GAA7C,EAAkDD,CAAK,EAAvD,EAAuD;AACrD,UAAA,IAAMG,OAAOV,WAAW,CAAAO,CAAA,CAAxB,CAAA;UACA,IAAMa,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,KAAAA,CAAKW,MAAf,CAAjB,CAAA;;UACA,IAAM8B,KAAQ,GAAA,KAAA,CAAK5C,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAd,CAAA;;UACA,IAAMN,QAAW,GAAAF,GAAA,CAAIF,IAAJ,EAAUR,KAAAA,CAAKa,WAAf,CAAjB,CAAA;AACA,UAAA,IAAMsF,mBAAmB1D,KAAM,CAAAlB,QAA/B,CAAA;AACAkB,UAAAA,KAAA,CAAMnB,QAAN,GAAiB,KAAK,CAAA0E,iBAAtB,CAAA;;UACI,IAAApF,QAAA,KAAa,IAAb,IAAqBA,QAArB,KAAqBA,IAAAA,IAAAA,QAArB,KAAqBA,KAAAA,CAAAA,IAAAA,QAAA,CAAUL,MAA/B,EAAuC;YACzCkC,KAAA,CAAMlB,QAAN,GAAiB,IAAjB,CAAA;AACF,WAAA;;AACMkB,UAAAA,KAAA,CAAAT,oBAAA,GAAuB,CAAApB,aAAA,IAAA,IAAAA,mBAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAUL,MAAV,KAAoB,CAA3C,CAAA;UACN,KAAA,CAAKyF,iBAAL,IAA0B,CAA1B,CAAA;;UACA,IAAI,CAACE,cAAL,EAAqB;YACnB/C,OAAA,CAAQ1C,IAAR,CAAaD,IAAb,CAAA,CAAA;AACF,WAAA;;AACK,UAAA,KAAA,CAAAX,WAAA,CAAY2B,GAAZ,CAAgBN,QAAhB,EAA0BuB,KAA1B,CAAA,CAAA;;AACD,UAAA,IAAA7B,QAAA,KAAA,IAAA,IAAAA,QAAA,KAAA,KAAA,CAAA,IAAAA,QAAA,CAAUL,MAAV,IAAoB,CAAC4F,gBAArB,EAAuC;YAEzC,IAAIC,SAAY,GAAAxD,MAAhB,CAAA;;AACA,YAAA,OAAA,CAAA,UAAA,GAAOwD,SAAP,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,IAAO,UAAWjF,CAAAA,GAAlB,EAAuB;AAAA,cAAA,IAAA,UAAA,CAAA;;AACrBiF,cAAAA,SAAA,CAAUpE,oBAAV,IAAkCpB,QAAS,CAAAL,MAA3C,CAAA;;cACA,KAAA,CAAKV,WAAL,CAAiB2B,GAAjB,CAAqB4E,SAAU,CAAAzD,EAA/B,EAAmCyD,SAAnC,CAAA,CAAA;;cACAA,SAAA,GAAYA,SAAU,CAAAxD,MAAtB,CAAA;AACF,aAAA;;YAEAqD,UAAA,CAAWrF,QAAX,EAAqBZ,KAArB,EAA2BmD,OAA3B,EAAoCgD,gBAApC,EAAsD1D,KAAtD,CAAA,CAAA;AACF,WAAA;AACF,SAAA;;AACO,QAAA,OAAAU,OAAA,CAAA;OAnCH,CAAA;;AAqCC,MAAA,OAAA8C,UAAA,CAAWnG,UAAX,EAAuBE,IAAvB,CAAA,CAAA;AACT,KAAA;;;WAKA,SAAQF,OAAAA,CAAAA,UAAR,EAAyBE,IAAzB,EAAyC;MACvC,IAAMmD,UAAe,EAArB,CAAA;;AACA,MAAA,KAAA,IAAS9C,IAAI,CAAb,EAAgBC,GAAA,GAAMR,WAAWS,MAAjC,EAAyCF,CAAA,GAAIC,GAA7C,EAAkDD,CAAK,EAAvD,EAAuD;AACrD,QAAA,IAAMG,OAAOV,UAAW,CAAAO,CAAA,CAAxB,CAAA;QACA,IAAMa,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAjB,CAAA;QACA,IAAM8B,KAAQ,GAAA,IAAK5C,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAd,CAAA;AACAuB,QAAAA,KAAA,CAAMnB,QAAN,GAAiBmB,KAAA,CAAMsB,KAAN,KAAgB,CAAhB,GAAoB1D,CAApB,GAAwB,CAAA,CAAzC,CAAA;QACAoC,KAAA,CAAMlB,QAAN,GAAiB,KAAjB,CAAA;QACAkB,KAAA,CAAMT,oBAAN,GAA6B,CAA7B,CAAA;;AACI,QAAA,IAAAS,KAAA,CAAMsB,KAAN,KAAgB,CAAhB,EAAmB;UACrBZ,OAAA,CAAQ1C,IAAR,CAAaD,IAAb,CAAA,CAAA;AACF,SAAA;;QACA,IAAMI,QAAW,GAAAF,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKa,WAAf,CAAjB,CAAA;;AACA,QAAA,IAAID,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;AACf,UAAA,IAAA,CAAA8F,OAAA,CAAQzF,QAAR,EAAkBZ,IAAlB,CAAA,CAAA;AACP,SAAA;AACF,OAAA;;AACO,MAAA,OAAAmD,OAAA,CAAA;AACT,KAAA;;;WAGA,SAAYrD,WAAAA,CAAAA,UAAZ,EAA6BE,IAA7B,EAAkD;MAEhD,IAAMsG,WAAgB,EAAtB,CAAA;;AACA,MAAA,KAAA,IAASjG,IAAI,CAAb,EAAgBC,GAAA,GAAMR,WAAWS,MAAjC,EAAyCF,CAAA,GAAIC,GAA7C,EAAkDD,CAAK,EAAvD,EAAuD;AACrD,QAAA,IAAMG,OAAOV,UAAW,CAAAO,CAAA,CAAxB,CAAA;QACA,IAAMa,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAjB,CAAA;QACA,IAAM8B,KAAQ,GAAA,IAAK5C,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAd,CAAA;;AAEI,QAAA,IAAAuB,KAAA,CAAMsB,KAAN,KAAgB,CAAhB,EAAmB;UACrBuC,QAAA,CAAS7F,IAAT,CAAcD,IAAd,CAAA,CAAA;AACF,SAAA;AACF,OAAA;;AACO,MAAA,OAAA8F,QAAA,CAAA;AACT,KAAA;;;WASA,SAAmBxG,kBAAAA,CAAAA,UAAnB,EAAoCE,IAApC,EAA8F;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;MAAA,IAA1CiD,IAA0C,uEAAR,MAAQ,CAAA;MAC5F,IAAM7C,MAAmB,EAAzB,CAAA;AACWN,MAAAA,UAAA,CAAAyG,OAAA,CAAQ,UAAC/F,IAAD,EAAU;QAC3B,IAAMU,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAjB,CAAA;;QACA,IAAM2B,QAAW,GAAA,MAAA,CAAKzC,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAjB,CAAA;;AACA,QAAA,IAAI,CAACoB,QAAS,CAAAf,QAAd,EAAwB,OAAA;;QACxB,IAAI0B,SAAS,QAAb,EAAuB;UACrB7C,GAAA,CAAIK,IAAJ,CAASS,QAAT,CAAA,CAAA;AACF,SAFA,MAEA,IAAW+B,SAAS,MAApB,EAA4B;UAC1B7C,GAAA,CAAIK,IAAJ,CAASD,IAAT,CAAA,CAAA;AACK,SAFP,MAEO;UACLJ,GAAA,CAAIK,IAAJ,CAAS6B,QAAT,CAAA,CAAA;AACF,SAAA;OAVS,CAAA,CAAA;AAYJ,MAAA,OAAAlC,GAAA,CAAA;AACT,KAAA;;;AAYA,IAAA,KAAA,EAAA,SAAA,kBAAA,CACEP,WADF,EAEEC,UAFF,EAGE0G,MAHF,EAIExG,IAJF,EAOE;MAAA,IAFA+D,KAEA,uEAFQ,CAER,CAAA;MAAA,IADAnB,MACA,uEADwB,IACxB,CAAA;;AACA,MAAA,KAAA,IAASvC,IAAI,CAAb,EAAgBC,GAAA,GAAMR,WAAWS,MAAjC,EAAyCF,CAAA,GAAIC,GAA7C,EAAkDD,CAAK,EAAvD,EAAuD;AACrD,QAAA,IAAMG,OAAOV,UAAW,CAAAO,CAAA,CAAxB,CAAA;QACA,IAAMa,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAjB,CAAA;;AACA,QAAA,IAAIO,aAAa,KAAW,CAA5B,EAA4B;AACtBF,UAAAA,GAAA,CAAAC,KAAA,CAAM,eAAN,EAAuB,wEAAvB,CAAA,CAAA;AACJ,UAAA,OAAA;AACF,SAAA;;QACA,IAAML,QAAW,GAAAF,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKa,WAAf,CAAjB,CAAA;AACA,QAAA,IAAM4B,KAAuB,GAAA;AAC3BE,UAAAA,EAAI,EAAAzB,QADuB;AAE3BC,UAAAA,GAAK,EAAAX,IAFsB;UAG3Bc,QAAA,EAAUyC,KAAU,KAAA,CAAV,GAAc1D,CAAd,GAAkB,CAAA,CAHD;AAI3B0D,UAAAA,KAAA,EAAAA,KAJ2B;AAK3BxC,UAAAA,QAAU,EAAA,KALiB;AAM3BS,UAAAA,oBAAsB,EAAA,CANK;UAO3BgC,QAAU,EAAAyC,qBAAA,CAAsBD,MAAtB,EAA8BhG,IAA9B,EAAoCH,CAApC,CAPiB;AAQ3BuC,UAAAA,MAAA,EAAAA,MAAAA;SARF,CAAA;AAUMH,QAAAA,KAAA,CAAAwB,IAAA,GAAOrB,SAASA,MAAO,CAAAqB,IAAP,CAAYlC,MAAZ,CAAmBU,KAAnB,IAA4B,CAACA,KAAD,CAA5C,CAAA;AACM5C,QAAAA,WAAA,CAAA2B,GAAA,CAAIN,QAAJ,EAAcuB,KAAd,CAAA,CAAA;;AACZ,QAAA,IAAI7B,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;AACpB,UAAA,IAAA,CAAKL,kBAAL,CAAwBL,WAAxB,EAAqCe,QAArC,EAA+C4F,MAA/C,EAAuDxG,IAAvD,EAA6D+D,KAAA,GAAQ,CAArE,EAAwEtB,KAAxE,CAAA,CAAA;AACF,SAAA;AACF,OAAA;AACF,KAAA;;;AAGA,IAAA,KAAA,EAAA,SAAA,mBAAA,CAAoB3C,UAApB,EAAqC0G,MAArC,EAA8DxG,IAA9D,EAA8E;AAC5E,MAAA,KAAA,IAASK,IAAI,CAAb,EAAgBC,GAAA,GAAMR,WAAWS,MAAjC,EAAyCF,CAAA,GAAIC,GAA7C,EAAkDD,CAAK,EAAvD,EAAuD;AACrD,QAAA,IAAMG,OAAOV,UAAW,CAAAO,CAAA,CAAxB,CAAA;QACA,IAAMa,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAjB,CAAA;;AACA,QAAA,IAAIO,aAAa,KAAW,CAA5B,EAA4B;AACtBF,UAAAA,GAAA,CAAAC,KAAA,CAAM,eAAN,EAAuB,wEAAvB,CAAA,CAAA;AACJ,UAAA,OAAA;AACF,SAAA;;QACA,IAAMwB,KAAQ,GAAA,IAAK5C,CAAAA,WAAL,CAAiBa,GAAjB,CAAqBQ,QAArB,CAAd,CAAA;QACAuB,KAAA,CAAMuB,QAAN,GAAiByC,qBAAA,CAAsBD,MAAtB,EAA8BhG,IAA9B,EAAoCH,CAApC,CAAjB,CAAA;AACK,QAAA,IAAA,CAAAR,WAAA,CAAY2B,GAAZ,CAAgBN,QAAhB,EAA0BuB,KAA1B,CAAA,CAAA;QACL,IAAM7B,QAAW,GAAAF,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKa,WAAf,CAAjB,CAAA;;AACA,QAAA,IAAID,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;AACf,UAAA,IAAA,CAAAmG,mBAAA,CAAoB9F,QAApB,EAA8B4F,MAA9B,EAAsCxG,IAAtC,CAAA,CAAA;AACP,SAAA;AACF,OAAA;AACF,KAAA;;;WAKA,SAAkByC,iBAAAA,CAAAA,KAAlB,EAAwCvB,QAAxC,EAAmE;MACjE,IAAI,CAACuB,KAAL,EAAY;AACNzB,QAAAA,GAAA,CAAAkC,IAAA,CAAK,eAAL,YAAyBhC,QAAzB,EAAA,kBAAA,CAAA,CAAA,CAAA;AACG,QAAA,OAAA,KAAA,CAAA;AACT,OAAA;;AACO,MAAA,OAAA,IAAA,CAAA;AACT,KAAA;;;WAKA,SAAwBuB,uBAAAA,CAAAA,KAAxB,EAA8CvB,QAA9C,EAAyE;AACvE,MAAA,IAAIuB,KAAJ,EAAW;AACLzB,QAAAA,GAAA,CAAAkC,IAAA,CAAK,eAAL,4BAAyChC,QAAzC,EAAA,kBAAA,CAAA,CAAA,CAAA;AACG,QAAA,OAAA,KAAA,CAAA;AACT,OAAA;;AACO,MAAA,OAAA,IAAA,CAAA;AACT,KAAA;;;;;AAWK,SAASU,qBAAT,CACL/B,WADK,EAELsB,GAFK,EAGLuD,QAHK,EAILzB,IAJK,EAKLjD,IALK,EAML;EACA,IAAI2G,GAAM,GAAAxF,GAAV,CAAA;;AACA,EAAA,OAAOwF,GAAP,EAAY;AAAA,IAAA,IAAA,aAAA,CAAA;;AACV,IAAA,IAAMlE,QAAQ5C,WAAY,CAAAa,GAAZ,CAAgBA,IAAIiG,KAAK3G,IAAA,CAAKW,OAA9B,CAAd,CAAA;IACM,IAAAiG,SAAA,GAAA,CAAanE,KAAM,CAAAT,oBAAN,IAA8B,CAA3C,IAAgD0C,QAAhD,CAAA;IACNjC,KAAA,CAAMT,oBAAN,GAA6B6E,IAAA,CAAKC,GAAL,CAAS,CAAT,EAAYF,SAAZ,CAA7B,CAAA;IACAD,GAAA,GAAMlE,KAAN,KAAA,IAAA,IAAMA,KAAN,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,aAAA,GAAMA,MAAOG,MAAb,MAAM,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAezB,GAArB,CAAA;AACF,GAAA;;EAEA,IAAI8B,SAAS,MAAb,EAAqB;AACE8D,IAAAA,oBAAA,CAAAlH,WAAA,EAAasB,GAAb,EAAkBnB,IAAlB,CAAA,CAAA;AACvB,GAAA;AACF,CAAA;AAEgB,SAAA+G,oBAAA,CAAwBlH,WAAxB,EAAuDsB,GAAvD,EAA+DnB,IAA/D,EAA+E;EAC7F,IAAMY,QAAW,GAAAF,GAAA,CAAIS,GAAJ,EAASnB,IAAA,CAAKa,WAAd,CAAjB,CAAA;;AACA,EAAA,IAAID,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;AACXK,IAAAA,QAAA,CAAA2F,OAAA,CAAQ,UAAC/F,IAAD,EAAe;AAC9B,MAAA,IAAMiC,QAAQ5C,WAAY,CAAAa,GAAZ,CAAgBA,IAAIF,MAAMR,IAAA,CAAKW,OAA/B,CAAd,CAAA;MACA,IAAI,CAAC8B,KAAL,EAAY,OAAA;MACZA,KAAA,CAAMT,oBAAN,GAA6B,CAA7B,CAAA;MACqB+E,oBAAA,CAAAlH,WAAA,EAAa4C,KAAM,CAAAtB,GAAnB,EAAwBnB,IAAxB,CAAA,CAAA;KAJd,CAAA,CAAA;AAMX,GAAA;AACF,CAAA;AAQO,SAAS2B,sBAAT,CACL9B,WADK,EAELyC,QAFK,EAGLf,QAHK,EAILvB,IAJK,EAKL;AACM,EAAA,IAAEmB,GAAF,GAAoBmB,QAApB,CAAEnB,GAAF;AAAA,MAAOG,QAAP,GAAoBgB,QAApB,CAAOhB,QAAP,CAAA;EACN,IAAMF,aAAgB,GAAAV,GAAA,CAAIS,GAAJ,EAASnB,IAAA,CAAKa,WAAd,CAAtB,CAAA;AACcO,EAAAA,aAAA,CAAAmF,OAAA,CAAQ,UAAC/F,IAAD,EAAUwG,WAAV,EAAkC;IACtD,IAAM9F,QAAW,GAAAR,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKW,MAAf,CAAjB,CAAA;IACA,IAAMmC,KAAQ,GAAAvB,QAAA,GAAWD,QAAW,GAAA,CAAX,GAAe0F,WAA1B,GAAwC,CAAA,CAAtD,CAAA;AACM,IAAA,IAAAC,QAAA,GAAWpH,WAAY,CAAAa,GAAZ,CAAgBQ,QAAhB,CAAX,CAAA;;IACN,IAAM4C,QAA0B,mCAC3BmD,QAD2B,CAAA,EAAA,EAAA,EAAA;AAE9B9F,MAAAA,GAAK,EAAAX,IAFyB;AAG9Bc,MAAAA,QAAU,EAAAwB,KAHoB;AAI9BvB,MAAAA,QAAU,EAAA,KAJoB;AAK9BqB,MAAAA,MAAQ,EAAAN,QAAAA;KALV,CAAA,CAAA;;AAOYzC,IAAAA,WAAA,CAAA2B,GAAA,CAAIN,QAAJ,EAAc4C,QAAd,CAAA,CAAA;;IAEZ,IAAI,CAACvC,QAAL,EAAe;MACb,IAAMX,QAAW,GAAAF,GAAA,CAAIF,IAAJ,EAAUR,IAAA,CAAKa,WAAf,CAAjB,CAAA;;AACA,MAAA,IAAID,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;QACpBoB,sBAAA,CACE9B,WADF,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAGOiE,QAHP,CAAA,EAAA,EAAA,EAAA;UAIIxC,QAAU,EAAA,CAAA,CAJd;AAKIC,UAAAA,QAAU,EAAA,KAAA;SAEZA,CAAAA,EAAAA,QAPF,EAQEvB,IARF,CAAA,CAAA;AAUF,OAAA;AACF,KAAA;GA3BY,CAAA,CAAA;AA6BhB,CAAA;AAEO,SAASuC,aAAT,CACLpC,IADK,EAELgC,GAFK,EAGLgB,OAHK,EAILnD,IAJK,EAKL;AACA,EAAA,KAAA,IAASK,IAAI,CAAb,EAAgBC,GAAA,GAAMH,KAAKI,MAA3B,EAAmCF,CAAA,GAAIC,GAAvC,EAA4CD,CAAK,EAAjD,EAAiD;AAC/C,IAAA,IAAMG,OAAOL,IAAK,CAAAE,CAAA,CAAlB,CAAA;;IACA,IAAIK,GAAI,CAAAF,IAAA,EAAMR,IAAK,CAAAW,MAAX,CAAJ,KAA2BwB,GAA/B,EAAoC;AAElChC,MAAAA,IAAA,CAAKE,CAAL,CAAA,GAAU8C,OAAV,CAAA;AACA,MAAA,OAAA;AACF,KAAA;;IACA,IAAMvC,WAAgBF,GAAI,CAAAF,IAAA,EAAMR,IAAK,CAAAa,WAAX,CAAJ,IAA+B,EAArD,CAAA;;AACA,IAAA,IAAID,QAAJ,KAAIA,IAAAA,IAAAA,QAAJ,eAAIA,SAAUL,MAAd,EAAsB;MACNgC,aAAA,CAAA3B,QAAA,EAAUuB,GAAV,EAAegB,OAAf,EAAwBnD,IAAxB,CAAA,CAAA;AAChB,KAAA;AACF,GAAA;AACF,CAAA;AAEgB,SAAAiC,cAAA,CACdpC,WADc,EAEdC,UAFc,EAGdoH,KAHc,EAUd;AACM,EAAA,IAAAC,KAAA,GAAQD,MAAMhF,WAAN,IAAqB,CAA7B,CAAA;EACA,IAAAkF,GAAA,GAAMF,KAAM,CAAAnB,WAAN,IAAqBjG,UAAW,CAAAS,MAAtC,CAAA;;EACN,KAAA,IAASe,QAAW,GAAA6F,KAApB,EAA2B7F,QAAW,GAAA8F,GAAtC,EAA2C9F,QAAY,EAAvD,EAAuD;AACrD,IAAA,IAAMd,OAAOV,UAAW,CAAAwB,QAAA,CAAxB,CAAA;AACA,IAAA,IAAMmB,QAAQ5C,WAAY,CAAAa,GAAZ,CAAgBA,IAAIF,MAAM0G,KAAA,CAAMvG,OAAhC,CAAd,CAAA;;IACA,IAAI,CAAC8B,KAAL,EAAY;AACNzB,MAAAA,GAAA,CAAAkC,IAAA,CAAK,OAAL,EAAc,qBAAd,CAAA,CAAA;AACN,KAAA;;AACAT,IAAAA,KAAA,CAAMnB,QAAN,GAAiBA,QAAA,IAAY,CAAA4F,KAAO,KAAP,IAAA,IAAAA,KAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,KAAO,CAAA/C,KAAP,KAAgB,CAA5B,CAAA,GAAiC,CAAlD,CAAA;AACF,GAAA;AACF;;;;"}