{"version":3,"file":"set-column-width-by-drag.js","sources":["../../../../src/_common/js/table/set-column-width-by-drag.ts"],"sourcesContent":["import { BaseTableCol, ThMap } from './types';\nimport { getColWidthAttr } from './utils';\n\n/**\n * 获取某一列的所有子列\n * @param col 表格某一列\n * @returns 当前列的所有子列\n */\nconst findAllChildren = <T extends BaseTableCol<T>>(col: T): T[] => {\n  const loopQue: T[] = [];\n  const result: T[] = [];\n  if (col.children) {\n    col.children.forEach((child: T) => loopQue.push(child));\n    while (loopQue.length) {\n      const child = loopQue.shift();\n      if (!child.children || !child.children.length) {\n        result.push(child);\n      } else {\n        child.children.forEach((child: T) => loopQue.push(child));\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * 更新拖动后的列宽记录\n * @param dragCol 被拖动的列\n * @param dragWidth 拖动大小\n * @param effectCol 受影响的列\n * @param options 配置参数\n * @param callback 回调函数\n */\nexport default function setThWidthListByColumnDrag<T extends BaseTableCol<T>>(\n  dragCol: T,\n  dragWidth: number,\n  effectCol: T,\n  options: {\n    getThWidthList: () => ThMap,\n    DEFAULT_MIN_WIDTH: number\n  },\n  callback: (widthMap: ThMap, colKeys: string[]) => void\n): void {\n  const { getThWidthList, DEFAULT_MIN_WIDTH } = options;\n  const thWidthList = getThWidthList();\n\n  // 检测是否有多级表头\n  const dragChildrenCols = findAllChildren(dragCol);\n  const effectChildrenCols = findAllChildren(effectCol);\n\n  // 若有\n  if (dragChildrenCols.length || effectChildrenCols.length) {\n    let oldWidth = 0;\n    let oldEffectWidth = 0;\n    const notCalculateCols: string[] = [];\n    let effectColsMinWidth = 0;\n    const updateMap: { [key: string]: number } = {};\n\n    // 将没有多级表头的列添加到列表中方便后续计算\n    if (!dragChildrenCols.length) {\n      dragChildrenCols.push(dragCol);\n    }\n\n    if (!effectChildrenCols.length) {\n      effectChildrenCols.push(effectCol);\n    }\n\n    // 根据多级表头的叶节点计算实际宽度（拖动列）\n    dragChildrenCols.forEach((child) => {\n      oldWidth += thWidthList[child.colKey] || getColWidthAttr(child, 'width');\n      notCalculateCols.push(child.colKey);\n    });\n\n    // 根据多级表头的叶节点计算实际宽度（受影响的列）\n    effectChildrenCols.forEach((child) => {\n      oldEffectWidth += thWidthList[child.colKey] || getColWidthAttr(child, 'width');\n      notCalculateCols.push(child.colKey);\n      effectColsMinWidth += Math.max(\n        child.resize?.minWidth || DEFAULT_MIN_WIDTH,\n        getColWidthAttr(child, 'minWidth') || DEFAULT_MIN_WIDTH\n      );\n    });\n\n    // 按比例划分新宽度（拖动列）\n    dragChildrenCols.forEach((child) => {\n      updateMap[child.colKey] = (thWidthList[child.colKey] / oldWidth) * dragWidth;\n    });\n\n    // 按比例划分新宽度（受影响的列）\n    const remainWidth = Math.max(\n      effectColsMinWidth,\n      oldWidth + oldEffectWidth - dragWidth,\n      Math.max(\n        getColWidthAttr(effectCol, 'minWidth') || DEFAULT_MIN_WIDTH,\n        effectCol.resize?.minWidth || DEFAULT_MIN_WIDTH\n      ),\n    );\n    effectChildrenCols.forEach((child) => {\n      updateMap[child.colKey] = Math.max(\n        child.resize?.minWidth || DEFAULT_MIN_WIDTH,\n        getColWidthAttr(child, 'minWidth') || DEFAULT_MIN_WIDTH,\n        (thWidthList[child.colKey] / oldEffectWidth) * remainWidth,\n      );\n    });\n\n    // 更新各列宽度\n    callback(updateMap, notCalculateCols);\n  } else {\n    const oldWidth = thWidthList[dragCol.colKey] || getColWidthAttr(dragCol, 'width');\n    const oldEffectWidth = thWidthList[effectCol.colKey] || getColWidthAttr(effectCol, 'width');\n\n    callback({\n      [dragCol.colKey]: dragWidth,\n      [effectCol.colKey]: Math.max(\n        effectCol.resize?.minWidth || DEFAULT_MIN_WIDTH,\n        getColWidthAttr(effectCol, 'minWidth') || DEFAULT_MIN_WIDTH,\n        oldWidth + oldEffectWidth - dragWidth,\n      ),\n    }, [dragCol.colKey, effectCol.colKey]);\n  }\n}\n"],"names":["findAllChildren","col","loopQue","result","children","forEach","child","push","length","shift","setThWidthListByColumnDrag","dragCol","dragWidth","effectCol","options","callback","getThWidthList","DEFAULT_MIN_WIDTH","thWidthList","dragChildrenCols","effectChildrenCols","oldWidth","oldEffectWidth","notCalculateCols","effectColsMinWidth","updateMap","colKey","getColWidthAttr","Math","max","resize","minWidth","remainWidth"],"mappings":"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"}