{"version":3,"file":"number.js","sources":["../../../../src/_common/js/input-number/number.ts"],"sourcesContent":["/** 普通数相关方法 */\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport {\n  compareNumber,\n  formatENumber,\n  largeNumberToFixed,\n  isInputNumber,\n  largeNumberAdd,\n  largeNumberSubtract,\n} from './large-number';\nimport log from '../log';\n\nexport * from './large-number';\n\nexport type NumberType = number | string;\n\n// 小于最大值，才允许继续添加\nexport function canAddNumber(\n  num: NumberType,\n  max: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, max, largeNumber) < 0;\n  }\n  return num < max;\n}\n\n// 大于最小值，才允许继续减少\nexport function canReduceNumber(\n  num: NumberType,\n  min: NumberType,\n  largeNumber = false\n): boolean {\n  if (!num) return true;\n  if (largeNumber && isString(num)) {\n    return compareNumber(num, min, largeNumber) > 0;\n  }\n  return num > min;\n}\n\n/**\n * 格式化数字，如：2e3 转换为 2000\n * 如果不是数字，则不允许输入\n * decimalPlaces 小数点处理\n */\nexport function formatToNumber(\n  num: string,\n  extra?: {\n    decimalPlaces?: number;\n    largeNumber?: boolean;\n  }\n): string | number {\n  if (num === undefined || num === null || num === '') return num;\n  if (num === '-') return 0;\n  if (num[num.length - 1] === '.') return num.slice(0, -1);\n  const isLargeNumber = extra?.largeNumber && isString(num);\n  let newNumber: string | number = num;\n  if ((isString(num) && num.includes('e')) || isNumber(num)) {\n    newNumber = isLargeNumber ? formatENumber(num) : Number(num);\n  }\n  if (extra?.decimalPlaces !== undefined) {\n    newNumber = largeNumberToFixed(\n      newNumber,\n      extra.decimalPlaces,\n      extra.largeNumber\n    );\n  }\n  return isLargeNumber || extra?.decimalPlaces !== undefined\n    ? newNumber\n    : Number(newNumber);\n}\n\n/**\n * 将数字控制在 max 和 min 之间\n */\nexport function putInRangeNumber(\n  val: NumberType,\n  params: {\n    max?: NumberType;\n    min?: NumberType;\n    lastValue?: NumberType;\n    largeNumber?: boolean;\n  }\n) {\n  if (val === '') return undefined;\n  const { max, min, lastValue, largeNumber } = params;\n  if (!isInputNumber(val)) return lastValue;\n  if (largeNumber && (isString(max) || max === Infinity) && (isString(min) || min === -Infinity)) {\n    if (compareNumber(max, val, largeNumber) < 0) return max;\n    if (compareNumber(min, val, largeNumber) > 0) return min;\n    return val;\n  }\n  return Math.max(Number(min), Math.min(Number(max), Number(val)));\n}\n\n/**\n * 仅支持正数，小数加法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveAdd(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) + (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  // 整数不存在精度问题，直接返回\n  if (!r1 || !r2) return num1 + num2;\n  let newNumber1 = num1;\n  let newNumber2 = num2;\n  const diff = Math.abs(r1 - r2);\n  const digit = 10 ** Math.max(r1, r2);\n  if (diff > 0) {\n    const cm = 10 ** diff;\n    if (r1 > r2) {\n      newNumber1 = Number(num1.toString().replace('.', ''));\n      newNumber2 = Number(num2.toString().replace('.', '')) * cm;\n    } else {\n      newNumber1 = Number(num1.toString().replace('.', '')) * cm;\n      newNumber2 = Number(num2.toString().replace('.', ''));\n    }\n  } else {\n    newNumber1 = Number(num1.toString().replace('.', ''));\n    newNumber2 = Number(num2.toString().replace('.', ''));\n  }\n  return (newNumber1 + newNumber2) / digit;\n}\n\n/**\n * 正数，小数减法精度处理，小数部分和整数部分分开处理\n */\nexport function positiveSubtract(num1: number, num2: number): number {\n  if (!num1 || !num2) return (num1 || 0) - (num2 || 0);\n  const r1 = num1.toString().split('.')[1]?.length || 0;\n  const r2 = num2.toString().split('.')[1]?.length || 0;\n  const digit = 10 ** Math.max(r1, r2);\n  const n = r1 >= r2 ? r1 : r2;\n  return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));\n}\n\n/**\n * 支持正数、负数、小数等全部数字的加法\n * -0.766 + 1       =>   1 - 0.766\n * -1 + (-0.766)    =>   - (1 + 0.766)\n * 1 + (-0.766)     =>   1 - 0.766\n * 1 + 0.766        =>   1 + 0.766\n */\nexport function add(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));\n  if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;\n  if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));\n  return positiveAdd(num1, num2);\n}\n\n/**\n * 支持正数、负数、小数等全部数字的减法\n * -0.766 - 1       =>   - (1 + 0.766)\n * -1 - (-0.766)    =>   0.766 - 1\n * 1 - (-0.766)     =>   1 + 0.766\n * 1 - 0.766        =>   1 - 0.766\n */\nexport function subtract(num1: number, num2: number): number {\n  if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;\n  if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));\n  if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));\n  return positiveSubtract(num1, num2);\n}\n\nexport function getStepValue(p: {\n  op: 'add' | 'reduce';\n  step: NumberType;\n  max?: NumberType;\n  min?: NumberType;\n  lastValue?: NumberType;\n  largeNumber?: boolean;\n}) {\n  const { op, step, lastValue = 0, max, min, largeNumber } = p;\n  if (step <= 0) {\n    log.error('InputNumber', 'step must be larger than 0.');\n    return lastValue;\n  }\n  const tStep = isNumber(step) ? String(step) : step;\n  let newVal;\n  if (op === 'add') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberAdd(String(lastValue), String(tStep));\n    } else {\n      newVal = add(Number(lastValue || 0), Number(step));\n    }\n  } else if (op === 'reduce') {\n    if (largeNumber && isString(lastValue)) {\n      newVal = largeNumberSubtract(String(lastValue), String(tStep));\n    } else {\n      newVal = subtract(Number(lastValue || 0), Number(step));\n    }\n  }\n  if (lastValue === undefined) {\n    newVal = putInRangeNumber(newVal, { max, min, lastValue, largeNumber });\n  }\n  return largeNumber ? newVal : Number(newVal);\n}\n\nexport type InputNumberErrorType =\n  | 'exceed-maximum'\n  | 'below-minimum'\n  | undefined;\n\n/**\n * 最大值和最小值校验\n */\nexport function getMaxOrMinValidateResult(p: {\n  largeNumber: boolean;\n  value: NumberType;\n  max: NumberType;\n  min: NumberType;\n}): InputNumberErrorType {\n  const { largeNumber, value, max, min } = p;\n  if (largeNumber === undefined) return undefined;\n  if (largeNumber && isNumber(value)) {\n    log.warn('InputNumber', 'largeNumber value must be a string.');\n  }\n  let error: InputNumberErrorType;\n  if (compareNumber(value, max, largeNumber) > 0) {\n    error = 'exceed-maximum';\n  } else if (compareNumber(value, min, largeNumber) < 0) {\n    error = 'below-minimum';\n  } else {\n    error = undefined;\n  }\n  return error;\n}\n\n/**\n * 是否允许输入当前字符，输入字符校验\n */\nexport function canInputNumber(number: string, largeNumber: boolean) {\n  if (!number && typeof number === 'string') return true;\n  const isNumber = (largeNumber && isInputNumber(number)) || !Number.isNaN(Number(number));\n  if (!isNumber && !['-', '.', 'e', 'E'].includes(number.slice(-1))) return false;\n  return true;\n}\n"],"names":["canAddNumber","num","max","largeNumber","isString","compareNumber","canReduceNumber","min","formatToNumber","extra","length","slice","isLargeNumber","newNumber","includes","isNumber","formatENumber","Number","decimalPlaces","largeNumberToFixed","putInRangeNumber","val","params","lastValue","isInputNumber","Infinity","Math","positiveAdd","num1","num2","r1","toString","split","r2","newNumber1","newNumber2","diff","abs","digit","cm","replace","positiveSubtract","n","toFixed","add","subtract","getStepValue","p","op","step","log","error","tStep","String","newVal","largeNumberAdd","largeNumberSubtract","getMaxOrMinValidateResult","value","warn","canInputNumber","number","isNaN"],"mappings":"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"}