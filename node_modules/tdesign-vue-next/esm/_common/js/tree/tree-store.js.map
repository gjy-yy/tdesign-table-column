{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/tree/tree-store.ts"],"sourcesContent":["import difference from 'lodash/difference';\nimport camelCase from 'lodash/camelCase';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { TreeNode } from './tree-node';\nimport {\n  TreeNodeValue,\n  TypeIdMap,\n  TypeTimer,\n  TypeTargetNode,\n  TypeTreeNodeData,\n  TypeTreeStoreOptions,\n  TypeTreeFilter,\n  TypeTreeFilterOptions,\n  TypeRelatedNodesOptions,\n  TypeTreeEventState,\n  TypeTreeNodeModel,\n} from './types';\n\n// 构建一个树的数据模型\n// 基本设计思想：写入时更新，减少读取消耗，以减少未来实现虚拟滚动所需的计算量\n// 任何一次数据写入，会触发相应节点的状态更新\nexport class TreeStore {\n  // 根节点集合\n  public children: TreeNode[];\n\n  // 所有节点集合\n  public nodes: TreeNode[];\n\n  // 所有节点映射\n  public nodeMap: Map<TreeNodeValue, TreeNode>;\n\n  // 配置选项\n  public config: TypeTreeStoreOptions;\n\n  // 活动节点集合\n  public activedMap: TypeIdMap;\n\n  // 数据被更新的节点集合\n  public updatedMap: TypeIdMap;\n\n  // 选中节点集合\n  public checkedMap: TypeIdMap;\n\n  // 展开节点的集合\n  public expandedMap: TypeIdMap;\n\n  // 符合过滤条件的节点的集合\n  public filterMap: TypeIdMap;\n\n  // 数据更新计时器\n  public updateTimer: TypeTimer;\n\n  // 识别是否需要重排\n  public shouldReflow: boolean;\n\n  // 树节点过滤器\n  public prevFilter: TypeTreeFilter;\n\n  // 一个空节点 model\n  public nullNodeModel: TypeTreeNodeModel;\n\n  public constructor(options: TypeTreeStoreOptions) {\n    const config: TypeTreeStoreOptions = {\n      prefix: 't',\n      keys: {},\n      expandAll: false,\n      expandLevel: 0,\n      expandMutex: false,\n      expandParent: false,\n      activable: false,\n      activeMultiple: false,\n      checkable: false,\n      checkStrictly: false,\n      disabled: false,\n      draggable: false,\n      load: null,\n      lazy: false,\n      valueMode: 'onlyLeaf',\n      filter: null,\n      onLoad: null,\n      onReflow: null,\n      onUpdate: null,\n      allowFoldNodeOnFilter: false,\n      ...options,\n    };\n    this.config = config;\n    this.nodes = [];\n    this.children = [];\n    this.nodeMap = new Map();\n    this.activedMap = new Map();\n    this.expandedMap = new Map();\n    this.checkedMap = new Map();\n    this.updatedMap = new Map();\n    this.filterMap = new Map();\n    this.prevFilter = null;\n    // 这个计时器确保频繁的 update 事件被归纳为1次完整数据更新后的触发\n    this.updateTimer = null;\n    // 在子节点增删改查时，将此属性设置为 true，来触发视图更新\n    this.shouldReflow = false;\n    this.initNullNodeModel();\n  }\n\n  // 初始化空节点 model\n  public initNullNodeModel() {\n    // 空节点，用于判定当前的 filterText 是否为空，如果 filter(nullNode) 为 true, 那么可以判定 filterText 为空\n    // 这里初始化空节点的方式似乎不是很完美\n    const nullNode = new TreeNode(this, { value: '', label: '', children: [] });\n    this.nullNodeModel = nullNode.getModel();\n    // 需要将节点从树中移除\n    nullNode.remove();\n  }\n\n  // 配置选项\n  public setConfig(options: TypeTreeStoreOptions) {\n    let hasChanged = false;\n    Object.keys(options).forEach((key) => {\n      const val = options[key];\n      if (val !== this.config[key]) {\n        hasChanged = true;\n        this.config[key] = val;\n      }\n    });\n    if (hasChanged) {\n      // 在 td-tree 的 render 方法中调用 setConfig\n      // 这样减少了 watch 属性\n      // 仅在属性变更后刷新状态\n      // 这样可以避免触发渲染死循环\n      this.refreshState();\n    }\n  }\n\n  // 获取根孩子节点列表\n  public getChildren() {\n    return this.children;\n  }\n\n  // 获取节点对象\n  public getNode(item: TypeTargetNode): TreeNode {\n    let node = null;\n    if (typeof item === 'string' || typeof item === 'number') {\n      node = this.nodeMap.get(item);\n    } else if (item instanceof TreeNode) {\n      node = this.nodeMap.get(item.value);\n    }\n    return node;\n  }\n\n  // 获取节点在总节点列表中的位置\n  public getIndex(node: TreeNode): number {\n    return this.nodes.indexOf(node);\n  }\n\n  // 获取指定节点的父节点\n  public getParent(value: TypeTargetNode): TreeNode {\n    let parent = null;\n    const node = this.getNode(value);\n    if (node) {\n      parent = node.getParent();\n    }\n    return parent;\n  }\n\n  // 获取指定节点的所有父节点\n  public getParents(value: TypeTargetNode): TreeNode[] {\n    const node = this.getNode(value);\n    let parents: TreeNode[] = [];\n    if (node) {\n      parents = node.getParents();\n    }\n    return parents;\n  }\n\n  // 获取指定节点在其所在 children 中的位置\n  public getNodeIndex(value: TypeTargetNode): number {\n    const node = this.getNode(value);\n    let index = -1;\n    if (node) {\n      index = node.getIndex();\n    }\n    return index;\n  }\n\n  // 获取所有符合条件的节点\n  public getNodes(\n    item?: TypeTargetNode,\n    options?: TypeTreeFilterOptions,\n  ): TreeNode[] {\n    let nodes: TreeNode[] = [];\n    let val: TreeNodeValue = '';\n    if (typeof item === 'string' || typeof item === 'number') {\n      val = item;\n    } else if (item instanceof TreeNode) {\n      val = item.value;\n    }\n    if (!val) {\n      nodes = this.nodes.slice(0);\n    } else {\n      const node = this.getNode(val);\n      if (node) {\n        nodes = node.walk();\n      }\n    }\n\n    if (options) {\n      const conf: TypeTreeFilterOptions = {\n        filter: null,\n        level: Infinity,\n        ...options,\n      };\n      if (typeof conf.level === 'number' && conf.level !== Infinity) {\n        nodes = nodes.filter((node) => node.level <= conf.level);\n      }\n      if (typeof conf.filter === 'function') {\n        nodes = nodes.filter((node) => {\n          const nodeModel = node.getModel();\n          return conf.filter(nodeModel);\n        });\n      }\n      if (isPlainObject(conf.props)) {\n        nodes = nodes.filter((node) => {\n          const result = Object.keys(conf.props).every((key) => {\n            const propEqual = node[key] === conf.props[key];\n            return propEqual;\n          });\n          return result;\n        });\n      }\n    }\n    return nodes;\n  }\n\n  // 给树添加节点数据\n  public append(list: TypeTreeNodeData[]): void {\n    list.forEach((item) => {\n      const node = new TreeNode(this, item);\n      this.children.push(node);\n    });\n    this.reflow();\n  }\n\n  // 重新加载数据\n  public reload(list: TypeTreeNodeData[]): void {\n    this.expandedMap.clear();\n    this.checkedMap.clear();\n    this.activedMap.clear();\n    this.filterMap.clear();\n    this.removeAll();\n    this.append(list);\n  }\n\n  // 解析节点数据，适配多种节点类型\n  public parseNodeData(\n    para: TreeNodeValue | TreeNode | TypeTreeNodeData,\n    item: TypeTreeNodeData | TypeTreeNodeData[] | TreeNode,\n  ) {\n    let value: TreeNodeValue = '';\n    let node = null;\n    let data = null;\n\n    if (typeof para === 'string' || typeof para === 'number') {\n      value = para;\n      data = item;\n      node = this.getNode(value);\n    } else if (para instanceof TreeNode) {\n      node = para;\n      data = item;\n    } else {\n      data = para;\n    }\n    const spec = {\n      node,\n      data,\n    };\n    return spec;\n  }\n\n  /**\n   * 向指定节点追加节点或者数据\n   * 支持下列使用方式\n   * item: 节点数据, TreeNode: 节点实例, value: 节点值(ID)\n   * appendNodes(item)\n   * appendNodes(TreeNode)\n   * appendNodes(value, item)\n   * appendNodes(value, TreeNode)\n   * appendNodes(TreeNode, item)\n   * appendNodes(TreeNode, TreeNode)\n   */\n  public appendNodes(\n    para?: TypeTargetNode | TypeTreeNodeData,\n    item?: TypeTreeNodeData | TreeNode,\n  ): void {\n    const spec = this.parseNodeData(para, item);\n    if (spec.data) {\n      if (!spec.node) {\n        // 在根节点插入\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this);\n        } else if (Array.isArray(spec.data)) {\n          this.append(spec.data);\n        } else {\n          this.append([spec.data]);\n        }\n      } else {\n        // 插入到目标节点之下\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this, spec.node);\n        } else if (Array.isArray(spec.data)) {\n          spec.node.append(spec.data);\n        } else {\n          spec.node.append([spec.data]);\n        }\n        spec.node.updateRelated();\n      }\n    }\n  }\n\n  // 在目标节点之前插入节点\n  public insertBefore(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertBefore(item);\n    }\n  }\n\n  // 在目标节点之后插入节点\n  public insertAfter(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertAfter(item);\n    }\n  }\n\n  // 更新树结构\n  // 清空 nodes 数组，然后遍历所有根节点重新插入 node\n  public refreshNodes(): void {\n    const { children, nodes } = this;\n    nodes.length = 0;\n    children.forEach((node) => {\n      const list = node.walk();\n      Array.prototype.push.apply(nodes, list);\n    });\n  }\n\n  // 更新所有树节点状态\n  public refreshState(): void {\n    const { nodes } = this;\n    nodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  // 节点重排\n  // 应该仅在树节点增删改查时调用\n  public reflow(node?: TreeNode): void {\n    this.shouldReflow = true;\n    this.updated(node);\n  }\n\n  // 触发更新事件\n  // 节点属性变更时调用\n  public updated(node?: TreeNode): void {\n    if (node?.value) {\n      this.updatedMap.set(node.value, true);\n    }\n    if (this.updateTimer) return;\n    this.updateTimer = +setTimeout(() => {\n      clearTimeout(this.updateTimer);\n      this.updateTimer = null;\n\n      // 检查节点是否需要回流，重排数组\n      if (this.shouldReflow) {\n        this.refreshNodes();\n        this.emit('reflow');\n      }\n\n      // 检查节点是否有被过滤，锁定路径节点\n      // 在此之前要遍历节点生成一个经过排序的节点数组\n      // 以便于优化锁定检查算法\n      if (!this.config?.allowFoldNodeOnFilter) this.lockFilterPathNodes();\n\n      const updatedList = Array.from(this.updatedMap.keys());\n      if (updatedList.length > 0) {\n        // 统计需要更新状态的节点，派发更新事件\n        const updatedNodes = updatedList.map((value) => this.getNode(value));\n        this.emit('update', {\n          nodes: updatedNodes,\n          map: this.updatedMap,\n        });\n      } else if (this.shouldReflow) {\n        // 单纯的回流不需要更新节点状态\n        // 但需要触发更新事件\n        this.emit('update', {\n          nodes: [],\n          map: this.updatedMap,\n        });\n      }\n\n      // 每次回流检查完毕，还原检查状态\n      this.shouldReflow = false;\n      this.updatedMap.clear();\n    });\n  }\n\n  // 获取激活节点集合\n  public getActived(map?: TypeIdMap): TreeNodeValue[] {\n    const activedMap = map || this.activedMap;\n    return Array.from(activedMap.keys());\n  }\n\n  // 获取指定范围的高亮节点\n  public getActivedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isActived());\n    return nodes;\n  }\n\n  // 替换激活态\n  public replaceActived(list: TreeNodeValue[]): void {\n    this.resetActived();\n    this.setActived(list);\n  }\n\n  // 设置激活态\n  public setActived(actived: TreeNodeValue[]): void {\n    const { activeMultiple } = this.config;\n    const list = actived.slice(0);\n    if (!activeMultiple) {\n      list.length = 1;\n    }\n    list.forEach((val) => {\n      this.activedMap.set(val, true);\n      const node = this.getNode(val);\n      if (node) {\n        node.update();\n      }\n    });\n  }\n\n  // 重置激活态\n  public resetActived(): void {\n    const actived = this.getActived();\n    this.activedMap.clear();\n    const relatedNodes = this.getRelatedNodes(actived);\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取展开节点集合\n  public getExpanded(map?: TypeIdMap): TreeNodeValue[] {\n    const expandedMap = map || this.expandedMap;\n    return Array.from(expandedMap.keys());\n  }\n\n  // 替换展开节点\n  public replaceExpanded(list: TreeNodeValue[]): void {\n    const expanded = this.getExpanded();\n    const added = difference(list, expanded);\n    const removed = difference(expanded, list);\n    this.setExpandedDirectly(removed, false);\n    this.updateExpanded(removed);\n    this.setExpanded(added);\n  }\n\n  // 批量设置展开节点\n  public setExpanded(list: TreeNodeValue[]): void {\n    this.setExpandedDirectly(list);\n    this.updateExpanded(list);\n  }\n\n  // 直接设置展开节点数据，不更新节点状态\n  public setExpandedDirectly(list: TreeNodeValue[], expanded = true): void {\n    list.forEach((val) => {\n      if (expanded) {\n        this.expandedMap.set(val, true);\n        const node = this.getNode(val);\n        if (node) {\n          node.afterExpanded();\n        }\n      } else {\n        this.expandedMap.delete(val);\n      }\n    });\n  }\n\n  // 清除所有展开节点\n  public resetExpanded(): void {\n    const expanded = this.getExpanded();\n    this.expandedMap.clear();\n    this.updateExpanded(expanded);\n  }\n\n  // 更新展开节点相关节点的状态\n  public updateExpanded(list: TreeNodeValue[]): void {\n    const relatedNodes = this.getRelatedNodes(list, {\n      withParents: false,\n    });\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取选中态节点 value 数组\n  public getChecked(map?: TypeIdMap): TreeNodeValue[] {\n    const { nodes, config } = this;\n    const { valueMode, checkStrictly } = config;\n    const list: TreeNodeValue[] = [];\n    const checkedMap = map || this.checkedMap;\n    nodes.forEach((node) => {\n      if (node.isChecked(checkedMap)) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          if (!node.parent || !node.parent.isChecked(checkedMap)) {\n            list.push(node.value);\n          }\n        } else if (valueMode === 'onlyLeaf' && !checkStrictly) {\n          if (node.isLeaf()) {\n            list.push(node.value);\n          }\n        } else {\n          list.push(node.value);\n        }\n      }\n    });\n    return list;\n  }\n\n  // 获取指定节点下的选中节点\n  public getCheckedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isChecked());\n    return nodes;\n  }\n\n  // 替换选中态列表\n  public replaceChecked(list: TreeNodeValue[]): void {\n    this.resetChecked();\n    this.setChecked(list, true);\n  }\n\n  // 批量设置选中态\n  public setChecked(list: TreeNodeValue[], isFromValueChange?: boolean): void {\n    const { valueMode, checkStrictly, checkable } = this.config;\n    if (!checkable) return;\n    list.forEach((val: TreeNodeValue) => {\n      const node = this.getNode(val);\n      if (node) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          const childrenNodes = node.walk();\n          childrenNodes.forEach((childNode) => {\n            this.checkedMap.set(childNode.value, true);\n          });\n        } else {\n          this.checkedMap.set(val, true);\n          node.updateChecked(isFromValueChange);\n        }\n      }\n    });\n    if (!checkStrictly) {\n      const checked = this.getChecked();\n      const relatedNodes = this.getRelatedNodes(checked);\n      relatedNodes.forEach((node) => {\n        node.updateChecked();\n      });\n    }\n  }\n\n  // 清除所有选中节点\n  public resetChecked(): void {\n    const checked = this.getChecked();\n    const relatedNodes = this.getRelatedNodes(checked);\n    this.checkedMap.clear();\n    relatedNodes.forEach((node) => {\n      node.updateChecked();\n    });\n  }\n\n  // 更新全部节点状态\n  public updateAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 移除指定节点\n  public remove(value?: TypeTargetNode): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.remove();\n    }\n  }\n\n  // 清空所有节点\n  public removeAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  // 获取节点状态变化可能影响的周边节点\n  // 实现最小遍历集合\n  public getRelatedNodes(\n    list: TreeNodeValue[],\n    options?: TypeRelatedNodesOptions,\n  ): TreeNode[] {\n    const conf = {\n      withParents: true,\n      ...options,\n    };\n    const map = new Map();\n    list.forEach((value) => {\n      if (map.get(value)) return;\n      const node = this.getNode(value);\n      if (node) {\n        const parents = node.getParents();\n        const children = node.walk();\n        let related = [];\n        if (conf.withParents) {\n          related = parents.concat(children);\n        } else {\n          related = children;\n        }\n        related.forEach((relatedNode) => {\n          map.set(relatedNode.value, relatedNode);\n        });\n      }\n    });\n    const relatedNodes = Array.from(map.values());\n    return relatedNodes;\n  }\n\n  // 触发绑定的事件\n  public emit(name: string, state?: TypeTreeEventState): void {\n    const config = this.config || {};\n    const methodName = camelCase(`on-${name}`);\n    const method = config[methodName];\n    if (typeof method === 'function') {\n      method(state);\n    }\n  }\n\n  // 锁定过滤节点的路径节点\n  // 使得路径节点展开，可见，且不可操作\n  public lockFilterPathNodes() {\n    const { config } = this;\n    const allNodes = this.getNodes();\n\n    // 如果之前有进行过滤，则先解锁所有节点\n    if (this.prevFilter) {\n      allNodes.forEach((node: TreeNode) => {\n        node.lock(false);\n      });\n    }\n\n    const currentFilter = config.filter;\n    // 当前没有过滤器\n    // 则无需处理锁定节点\n    if (!currentFilter || typeof currentFilter !== 'function') return;\n\n    if (currentFilter(this.nullNodeModel)) return;\n\n    this.prevFilter = config.filter;\n    // 构造路径节点map\n    const map = new Map();\n\n    // 全部节点要经过排序，才能使用这个算法\n    // 比起每个过滤节点调用 getParents 方法检查父节点状态\n    // 算法复杂度 O(N*log(N)) => O(N)\n    allNodes.reverse().forEach((item: TreeNode) => {\n      const node = item;\n\n      // 被过滤节点父节点固定为展开状态\n      const parent = node.getParent();\n      if (node.vmIsRest) {\n        if (parent) {\n          // 被过滤节点的父节点固定为展开状态\n          parent.expanded = true;\n        }\n        // 被过滤节点固定为展示状态\n        node.visible = true;\n      }\n      if (node.vmIsRest || map.get(node.value)) {\n        if (parent && !parent.vmIsRest) {\n          map.set(parent.value, true);\n        }\n      }\n    });\n\n    // 锁定路径节点展示样式\n    const filterPathValues = Array.from(map.keys());\n    filterPathValues.forEach((value: TreeNodeValue) => {\n      const node = this.getNode(value);\n      if (node) {\n        node.lock(true);\n      }\n    });\n  }\n}\n\nexport default TreeStore;\n"],"names":["TreeStore","options","config","prefix","keys","expandAll","expandLevel","expandMutex","expandParent","activable","activeMultiple","checkable","checkStrictly","disabled","draggable","load","lazy","valueMode","filter","onLoad","onReflow","onUpdate","allowFoldNodeOnFilter","nodes","children","nodeMap","Map","activedMap","expandedMap","checkedMap","updatedMap","filterMap","prevFilter","updateTimer","shouldReflow","initNullNodeModel","nullNode","TreeNode","value","label","nullNodeModel","getModel","remove","hasChanged","Object","forEach","key","val","refreshState","item","node","get","indexOf","parent","getNode","getParent","parents","getParents","index","getIndex","slice","walk","conf","level","Infinity","nodeModel","isPlainObject","props","result","every","propEqual","list","push","reflow","clear","removeAll","append","para","data","spec","parseNodeData","appendTo","Array","isArray","updateRelated","insertBefore","insertAfter","length","prototype","apply","update","updateChecked","updated","set","setTimeout","clearTimeout","refreshNodes","emit","lockFilterPathNodes","updatedList","from","updatedNodes","map","getNodes","isActived","resetActived","setActived","actived","getActived","relatedNodes","getRelatedNodes","expanded","getExpanded","added","difference","removed","setExpandedDirectly","updateExpanded","setExpanded","afterExpanded","withParents","isChecked","isLeaf","resetChecked","setChecked","isFromValueChange","childrenNodes","childNode","checked","getChecked","related","concat","relatedNode","values","name","state","methodName","camelCase","method","allNodes","lock","currentFilter","reverse","vmIsRest","visible","filterPathValues"],"mappings":"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"}