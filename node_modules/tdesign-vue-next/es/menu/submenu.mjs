/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-8c39d78a.mjs';
import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, inject, ref, computed, watch, toRefs, provide, reactive, onMounted, getCurrentInstance, createVNode, mergeProps } from 'vue';
import props from './submenu-props.mjs';
import { renderContent, renderTNodeJSX } from '../utils/render-tnode.mjs';
import FakeArrow from '../common-components/fake-arrow.mjs';
import useRipple from '../hooks/useRipple.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { Popup } from '../popup/index.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/useConfig.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../popup/popup.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '@popperjs/core';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/props.mjs';
import '../popup/container.mjs';
import '../hooks/useVModel.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Submenu = defineComponent({
  name: "TSubmenu",
  props: props,
  setup: function setup(props2, ctx) {
    var classPrefix = usePrefixClass();
    var menu = inject("TdMenu");
    var theme = menu.theme,
        activeValues = menu.activeValues,
        expandValues = menu.expandValues,
        mode = menu.mode,
        isHead = menu.isHead,
        open = menu.open;
    var submenu = inject("TdSubmenu", null);
    var menuItems = ref([]);
    var isActive = computed(function () {
      return activeValues.value.indexOf(props2.value) > -1;
    });
    var popupVisible = ref(false);
    var isCursorInPopup = ref(false);
    var rippleColor = computed(function () {
      return theme.value === "light" ? "#E7E7E7" : "#383838";
    });
    var isOpen = computed(function () {
      var _expandValues$value;

      if (mode.value === "popup") {
        return popupVisible.value;
      }

      return expandValues ? (_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.includes(props2.value) : false;
    });
    var isNested = ref(false);
    var submenuRef = ref();
    useRipple(submenuRef, rippleColor);
    var classes = computed(function () {
      var _ref;

      return ["".concat(classPrefix.value, "-submenu"), (_ref = {}, _defineProperty(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty(_ref, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _ref)];
    });
    var popupClass = computed(function () {
      return ["".concat(classPrefix.value, "-menu__popup"), "".concat(classPrefix.value, "-menu__popup--").concat(theme.value), "".concat(classPrefix.value, "-is-").concat(isHead ? "horizontal" : "vertical"), _defineProperty({}, "".concat(classPrefix.value, "-is-opened"), popupVisible.value), "narrow-scrollbar"];
    });
    var submenuClass = computed(function () {
      var _ref3;

      return ["".concat(classPrefix.value, "-menu__item"), "".concat(classPrefix.value, "-menu__item-spacer"), "".concat(classPrefix.value, "-menu__item-spacer--").concat(isHead && !isNested.value ? "bottom" : "right"), (_ref3 = {}, _defineProperty(_ref3, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty(_ref3, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _defineProperty(_ref3, "".concat(classPrefix.value, "-is-active"), isActive.value), _ref3)];
    });
    var subClass = computed(function () {
      return ["".concat(classPrefix.value, "-menu__sub"), _defineProperty({}, "".concat(classPrefix.value, "-is-opened"), isOpen.value)];
    });
    var arrowClass = computed(function () {
      return [_defineProperty({}, "".concat(classPrefix.value, "-fake-arrow--active"), isOpen.value)];
    });

    var handleMouseEnter = function handleMouseEnter() {
      if (props2.disabled) return;
      setTimeout(function () {
        if (!popupVisible.value) {
          open(props2.value);
        }

        popupVisible.value = true;
      }, 0);
    };

    var handleMouseLeave = function handleMouseLeave(e) {
      setTimeout(function () {
        var _e$relatedTarget;

        var inPopup = (_e$relatedTarget = e.relatedTarget) === null || _e$relatedTarget === void 0 ? void 0 : _e$relatedTarget.classList.contains("".concat(classPrefix.value, "-menu__popup"));
        if (isCursorInPopup.value || inPopup) return;
        popupVisible.value = false;
      }, 0);
    };

    var handleMouseLeavePopup = function handleMouseLeavePopup(e) {
      var toElement = e.toElement,
          relatedTarget = e.relatedTarget;
      var target = toElement || relatedTarget;

      var isSubmenu = function isSubmenu(el) {
        return el === submenuRef.value;
      };

      while (target !== document && !isSubmenu(target)) {
        target = target.parentNode;
      }

      isCursorInPopup.value = false;

      if (!isSubmenu(target)) {
        popupVisible.value = false;
      }
    };

    var handleEnterPopup = function handleEnterPopup() {
      isCursorInPopup.value = true;
    };

    var handleSubmenuItemClick = function handleSubmenuItemClick() {
      if (props2.disabled) return;
      open(props2.value);
    };

    watch(popupVisible, function (visible) {
      menu.open(props2.value, visible ? "add" : "remove");
    });

    var _toRefs = toRefs(props2),
        value = _toRefs.value;

    provide("TdSubmenu", reactive({
      value: value,
      addMenuItem: function addMenuItem(item) {
        menuItems.value.push(item);

        if (submenu) {
          submenu.addMenuItem(item);
        }
      }
    }));
    onMounted(function () {
      var _menu$vMenu;

      menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
        value: props2.value,
        parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
        vnode: ctx.slots["default"]
      });
      var instance = getCurrentInstance();
      var node = instance.parent;

      while (node && !/^t(head)?menu/i.test((_node = node) === null || _node === void 0 ? void 0 : _node.type.name)) {
        var _node, _node2, _node3;

        if (/submenu/i.test((_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.type.name)) {
          isNested.value = true;
          break;
        }

        node = (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.parent;
      }
    });
    return {
      classPrefix: classPrefix,
      menuItems: menuItems,
      mode: mode,
      theme: theme,
      isHead: isHead,
      isNested: isNested,
      classes: classes,
      subClass: subClass,
      arrowClass: arrowClass,
      popupClass: popupClass,
      submenuClass: submenuClass,
      submenuRef: submenuRef,
      popupVisible: popupVisible,
      isCursorInPopup: isCursorInPopup,
      handleEnterPopup: handleEnterPopup,
      handleMouseEnter: handleMouseEnter,
      handleMouseLeave: handleMouseLeave,
      handleMouseLeavePopup: handleMouseLeavePopup,
      handleSubmenuItemClick: handleSubmenuItemClick
    };
  },
  methods: {
    renderPopup: function renderPopup(triggerElement) {
      var _this = this;

      var placement = "right-top";

      if (!this.isNested && this.isHead) {
        placement = "bottom-left";
      }

      var overlayInnerStyle = _defineProperty({}, "margin-".concat(this.isHead ? "top" : "left"), "20px");

      var popupWrapper = createVNode("div", {
        "class": ["".concat(this.classPrefix, "-menu__spacer"), "".concat(this.classPrefix, "-menu__spacer--").concat(!this.isNested && this.isHead ? "top" : "left")],
        "onMouseenter": this.handleEnterPopup,
        "onMouseleave": this.handleMouseLeavePopup
      }, [createVNode("ul", {
        "class": "".concat(this.classPrefix, "-menu__popup-wrapper")
      }, [renderContent(this, "default", "content")])]);

      var popupInside = createVNode("div", {
        "ref": "submenuRef",
        "class": this.submenuClass
      }, [triggerElement, createVNode("div", {
        "class": this.popupClass
      }, [popupWrapper])]);

      var slots = {
        content: function content() {
          return popupWrapper;
        }
      };

      var realPopup = createVNode(Popup, {
        "overlayInnerClassName": _toConsumableArray(this.popupClass),
        "visible": this.popupVisible,
        "placement": placement,
        "overlayInnerStyle": overlayInnerStyle
      }, _objectSpread({
        "default": function _default() {
          return [createVNode("div", {
            "ref": "submenuRef",
            "class": _this.submenuClass
          }, [triggerElement])];
        }
      }, slots));

      return this.isNested ? popupInside : realPopup;
    },
    renderHeadSubmenu: function renderHeadSubmenu() {
      var icon = renderTNodeJSX(this, "icon");
      var normalSubmenu = [createVNode("div", {
        "ref": "submenuRef",
        "class": this.submenuClass,
        "onClick": this.handleSubmenuItemClick
      }, [icon, createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderTNodeJSX(this, "title", {
        silent: true
      })])]), createVNode("ul", {
        "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
      }, [renderContent(this, "default", "content")])];
      var needRotate = this.mode === "popup" && this.isNested;
      var triggerElement = [icon, createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderTNodeJSX(this, "title", {
        silent: true
      })]), createVNode(FakeArrow, {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
        }
      }, null)];
      return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
    },
    renderSubmenu: function renderSubmenu() {
      var hasContent = this.$slots.content || this.$slots["default"];
      var icon = renderTNodeJSX(this, "icon");
      var child = renderContent(this, "default", "content");

      var _getCurrentInstance = getCurrentInstance(),
          parent = _getCurrentInstance.parent;

      var paddingLeft = 44;

      while (parent && parent.type.name !== "TMenu") {
        if (parent.type.name === "TSubmenu") {
          paddingLeft += 16;
        }

        parent = parent.parent;
      }

      var needRotate = this.mode === "popup" && this.isNested;
      var normalSubmenu = [createVNode("div", {
        "ref": "submenuRef",
        "class": this.submenuClass,
        "onClick": this.handleSubmenuItemClick
      }, [icon, createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderTNodeJSX(this, "title", {
        silent: true
      })]), hasContent && createVNode(FakeArrow, {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
        }
      }, null)]), createVNode("ul", {
        "class": this.subClass,
        "style": {
          "--padding-left": "".concat(paddingLeft, "px")
        }
      }, [child])];
      var triggerElement = [icon, createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderTNodeJSX(this, "title", {
        silent: true
      })]), createVNode(FakeArrow, {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)"),
          "margin-left": "auto"
        }
      }, null)];
      return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
    }
  },
  render: function render() {
    var child = null;
    var events = {};

    if (this.mode === "popup") {
      events = {
        onMouseenter: this.handleMouseEnter,
        onMouseleave: this.handleMouseLeave
      };
    }

    if (Object.keys(this.$slots).length > 0) {
      child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
    }

    return createVNode("li", mergeProps({
      "class": this.classes
    }, events), [child]);
  }
});

export { _Submenu as default };
//# sourceMappingURL=submenu.mjs.map
