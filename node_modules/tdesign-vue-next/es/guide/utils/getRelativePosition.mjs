/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { getWindowScroll, getElmCssPropValue, isFixed } from '../../utils/dom.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-2684fd15.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../utils/easing.mjs';

function getRelativePosition(elm) {
  var relativeElm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;

  var _getWindowScroll = getWindowScroll(),
      scrollTop = _getWindowScroll.scrollTop,
      scrollLeft = _getWindowScroll.scrollLeft;

  var _elm$getBoundingClien = elm.getBoundingClientRect(),
      elmTop = _elm$getBoundingClien.top,
      elmLeft = _elm$getBoundingClien.left;

  var _relativeElm$getBound = relativeElm.getBoundingClientRect(),
      relElmTop = _relativeElm$getBound.top,
      relElmLeft = _relativeElm$getBound.left;

  var relativeElmPosition = getElmCssPropValue(relativeElm, "position");

  if (relativeElm.tagName.toLowerCase() !== "body" && relativeElmPosition === "relative" || relativeElmPosition === "sticky") {
    return {
      top: elmTop - relElmTop,
      left: elmLeft - relElmLeft
    };
  }

  if (isFixed(elm)) {
    return {
      top: elmTop,
      left: elmLeft
    };
  }

  return {
    top: elmTop + scrollTop,
    left: elmLeft + scrollLeft
  };
}

export { getRelativePosition as default };
//# sourceMappingURL=getRelativePosition.mjs.map
