/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { defineComponent, ref, inject, createVNode } from 'vue';
import _DropdownItem from './dropdown-item.mjs';
import { pxCompat } from '../utils/helper.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { injectKey } from './const.mjs';
import '../_chunks/dep-0b4c3c44.mjs';
import 'tdesign-icons-vue-next';
import '../divider/index.mjs';
import '../divider/divider.mjs';
import '../divider/props.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../divider/type.mjs';
import './dropdown-item-props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../_chunks/dep-556a2f2c.mjs';

var _DropdownMenu = defineComponent({
  name: "TDropdownMenu",
  props: {
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    maxColumnWidth: {
      type: Number || String,
      "default": 100
    },
    minColumnWidth: {
      type: Number || String,
      "default": 10
    },
    onClick: Function
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var path = ref("");
    var renderTNode = useTNodeJSX();
    var COMPONENT_NAME = usePrefixClass("dropdown__menu");
    var dropdownProvider = inject(injectKey);
    var maxHeight = dropdownProvider.maxHeight,
        maxColumnWidth = dropdownProvider.maxColumnWidth,
        minColumnWidth = dropdownProvider.minColumnWidth;

    var handleHoverItem = function handleHoverItem(p) {
      path.value = p;
    };

    var handleItemClick = function handleItemClick(data, context, onClick) {
      var _props$onClick;

      onClick === null || onClick === void 0 ? void 0 : onClick(data, context);
      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
    };

    var isActive = function isActive(item, pathPrefix) {
      var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var itemPath = "".concat(pathPrefix, "/").concat(item.value);

      if (excludeSelf && path.value === itemPath) {
        return false;
      }

      return path.value.indexOf(itemPath) === 0;
    };

    var renderMenuColumn = function renderMenuColumn(children, showSubmenu, pathPrefix) {
      var menuClass = ["".concat(COMPONENT_NAME.value, "-column"), "narrow-scrollbar", {
        submenu__visible: showSubmenu
      }];
      return createVNode("div", {
        "class": menuClass,
        "style": {
          maxHeight: "".concat(maxHeight, "px"),
          maxWidth: pxCompat(maxColumnWidth),
          minWidth: pxCompat(minColumnWidth)
        }
      }, [children.map(function (item, idx) {
        return createVNode(_DropdownItem, {
          "key": idx,
          "disabled": item.disabled,
          "active": isActive(item, pathPrefix) || item.active,
          "value": item.value,
          "content": item.content,
          "divider": item.divider,
          "hasChildren": item.children && item.children.length > 0,
          "path": "".concat(pathPrefix, "/").concat(item.value),
          "maxColumnWidth": maxColumnWidth,
          "minColumnWidth": minColumnWidth,
          "onHover": handleHoverItem,
          "onClick": function onClick(data, context) {
            return handleItemClick(data, context, item.onClick);
          }
        }, null);
      })]);
    };

    return function () {
      var columns = [];
      var menuItems = props.options;
      var pathPrefix = "";

      if (slots["default"]) {
        return createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "-column"), "narrow-scrollbar"],
          "style": {
            maxHeight: "".concat(maxHeight, "px"),
            maxWidth: "".concat(maxColumnWidth, "px"),
            minWidth: "".concat(minColumnWidth, "px")
          }
        }, [renderTNode("default")])]);
      }

      while (menuItems && menuItems.length) {
        var activeItem = menuItems.find(function (item) {
          return isActive(item, pathPrefix, false);
        });
        columns.push(renderMenuColumn(menuItems, !!activeItem, pathPrefix));

        if (activeItem) {
          pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
          menuItems = activeItem.children || [];
        } else {
          menuItems = [];
        }
      }

      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [columns]);
    };
  }
});

export { _DropdownMenu as default };
//# sourceMappingURL=dropdown-menu.mjs.map
