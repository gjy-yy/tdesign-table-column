/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../../_chunks/dep-8c39d78a.mjs';
import { _ as _defineProperty } from '../../../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, computed, reactive, watch, createVNode, mergeProps } from 'vue';
import { t as throttle_1 } from '../../../_chunks/dep-2c582e31.mjs';
import props from '../../props.mjs';
import '../../utils/index.mjs';
import { Input } from '../../../input/index.mjs';
import { InputNumber } from '../../../input-number/index.mjs';
import { FORMAT_INPUT_CONFIG } from './config.mjs';
import { Color } from '../../../_common/js/color-picker/color.mjs';
import '../../../_chunks/dep-556a2f2c.mjs';
import '../../../_chunks/dep-a48de419.mjs';
import '../../../_chunks/dep-241fdd8c.mjs';
import '../../../_chunks/dep-d2403b2f.mjs';
import '../../../_chunks/dep-7071345f.mjs';
import '../../../_chunks/dep-0b4185fe.mjs';
import '../../../_chunks/dep-3ca5fb38.mjs';
import '../../../_chunks/dep-050b3eb2.mjs';
import '../../../_chunks/dep-977c5cdd.mjs';
import '../../../_chunks/dep-c27b1c14.mjs';
import '../../../_common/js/color-picker/index.mjs';
import '../../../_common/js/color-picker/cmyk.mjs';
import '../../../_common/js/color-picker/draggable.mjs';
import '../../../_chunks/dep-84a9ab7d.mjs';
import '../../../_chunks/dep-fda161b3.mjs';
import '../../../_chunks/dep-dcf624da.mjs';
import '../../../input/input.mjs';
import '../../../_chunks/dep-e68fd68c.mjs';
import 'tdesign-icons-vue-next';
import '../../../input/props.mjs';
import '../../../form/hooks.mjs';
import '../../../hooks/useConfig.mjs';
import '../../../config-provider/useConfig.mjs';
import '../../../_chunks/dep-bfb23a5e.mjs';
import '../../../_chunks/dep-2a7dc5c7.mjs';
import '../../../_chunks/dep-9311bf66.mjs';
import '../../../_chunks/dep-4889eb51.mjs';
import '../../../_chunks/dep-7922050a.mjs';
import '../../../_chunks/dep-169ea640.mjs';
import '../../../_chunks/dep-f6b25712.mjs';
import '../../../_chunks/dep-59545a4d.mjs';
import '../../../_chunks/dep-7d96367f.mjs';
import '../../../_chunks/dep-827c4600.mjs';
import '../../../_chunks/dep-0820e0e2.mjs';
import '../../../_chunks/dep-caad2e91.mjs';
import '../../../_chunks/dep-3d4aad09.mjs';
import '../../../_chunks/dep-8e38f523.mjs';
import '../../../_chunks/dep-469bf54b.mjs';
import '../../../_chunks/dep-8ef9fb8e.mjs';
import '../../../_chunks/dep-e769aafd.mjs';
import '../../../_chunks/dep-400798c5.mjs';
import '../../../_chunks/dep-361522ee.mjs';
import '../../../_common/js/global-config/default-config.mjs';
import '../../../_common/js/global-config/locale/zh_CN.mjs';
import '../../../config-provider/type.mjs';
import '../../../hooks/useGlobalIcon.mjs';
import '../../../hooks/tnode.mjs';
import '../../../_chunks/dep-40522c7c.mjs';
import '../../../_chunks/dep-83862ee1.mjs';
import '../../../_chunks/dep-8e451077.mjs';
import '../../../_chunks/dep-a82b01df.mjs';
import '../../../_chunks/dep-192e10f1.mjs';
import '../../../_chunks/dep-755716aa.mjs';
import '../../../_chunks/dep-82798823.mjs';
import '../../../_chunks/dep-52cbb58a.mjs';
import '../../../_chunks/dep-db11154e.mjs';
import '../../../_chunks/dep-baa4f9dc.mjs';
import '../../../utils/render-tnode.mjs';
import '../../../_chunks/dep-2684fd15.mjs';
import '../../../input/useInput.mjs';
import '../../../utils/helper.mjs';
import '../../../form/const.mjs';
import '../../../hooks/index.mjs';
import '../../../hooks/icon.mjs';
import '../../../hooks/slot.mjs';
import '../../../hooks/useCommonClassName.mjs';
import '../../../hooks/useDefaultValue.mjs';
import '../../../hooks/useDestroyOnClose.mjs';
import '../../../hooks/useKeepAnimation.mjs';
import '../../../hooks/useRipple.mjs';
import '../../../utils/set-style.mjs';
import '../../../hooks/useVirtualScroll.mjs';
import '../../../hooks/useVModel.mjs';
import '../../../input/useInputEventHandler.mjs';
import '../../../input/useInputWidth.mjs';
import '../../../input/input-group.mjs';
import '../../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../../input/type.mjs';
import '../../../input-number/input-number.mjs';
import '../../../button/index.mjs';
import '../../../button/button.mjs';
import '../../../loading/index.mjs';
import '../../../loading/directive.mjs';
import '../../../loading/plugin.mjs';
import '../../../loading/loading.mjs';
import '../../../loading/icon/gradient.mjs';
import '../../../_common/js/loading/circle-adapter.mjs';
import '../../../_common/js/utils/set-style.mjs';
import '../../../_common/js/utils/helper.mjs';
import '../../../utils/dom.mjs';
import '../../../utils/easing.mjs';
import '../../../utils/transfer-dom.mjs';
import '../../../loading/props.mjs';
import '../../../loading/type.mjs';
import '../../../button/props.mjs';
import '../../../button/type.mjs';
import '../../../input-number/props.mjs';
import '../../../input-number/useInputNumber.mjs';
import '../../../_common/js/input-number/number.mjs';
import '../../../_chunks/dep-869cd310.mjs';
import '../../../_common/js/input-number/large-number.mjs';
import '../../../_common/js/log/log.mjs';
import '../../../_common/js/log/index.mjs';
import '../../../input-number/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var FormatInputs = defineComponent({
  name: "FormatInputs",
  inheritAttrs: false,
  props: _objectSpread(_objectSpread({}, props), {}, {
    color: {
      type: Object
    },
    onInputChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var inputConfigs = computed(function () {
      var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[props2.format]);

      if (props2.enableAlpha) {
        configs.push({
          type: "inputNumber",
          key: "a",
          min: 0,
          max: 100,
          format: function format(value) {
            return "".concat(value, "%");
          },
          flex: 1.15
        });
      }

      return configs;
    });
    var modelValue = reactive({});
    var lastModelValue = reactive({});

    var getFormatColorMap = function getFormatColorMap(type) {
      var color = props2.color;

      if (type === "encode") {
        return {
          HSV: color.getHsva(),
          HSL: color.getHsla(),
          RGB: color.getRgba(),
          CMYK: color.getCmyk(),
          CSS: {
            css: color.css
          },
          HEX: {
            hex: color.hex
          }
        };
      }

      return {
        HSV: Color.object2color(modelValue, "HSV"),
        HSL: Color.object2color(modelValue, "HSL"),
        RGB: Color.object2color(modelValue, "RGB"),
        CMYK: Color.object2color(modelValue, "CMYK"),
        CSS: modelValue.css,
        HEX: modelValue.hex
      };
    };

    var updateModelValue = function updateModelValue() {
      var format = props2.format,
          color = props2.color;
      var values = getFormatColorMap("encode")[format];
      values.a = Math.round(color.alpha * 100);
      Object.keys(values).forEach(function (key) {
        modelValue[key] = values[key];
        lastModelValue[key] = values[key];
      });
    };

    updateModelValue();
    var throttleUpdate = throttle_1(updateModelValue, 100);
    watch(function () {
      var _props2$color = props2.color,
          saturation = _props2$color.saturation,
          hue = _props2$color.hue,
          value = _props2$color.value,
          alpha = _props2$color.alpha;
      return [saturation, hue, value, alpha, props2.format];
    }, throttleUpdate);

    var handleChange = function handleChange(key, v) {
      if (v === lastModelValue[key]) {
        return;
      }

      var value = getFormatColorMap("decode")[props2.format];
      props2.onInputChange(value, modelValue.a / 100, key, v);
    };

    return {
      modelValue: modelValue,
      inputConfigs: inputConfigs,
      handleChange: handleChange
    };
  },
  render: function render() {
    var _this = this;

    var inputProps = _objectSpread({}, this.inputProps || {});

    return createVNode("div", {
      "class": "input-group"
    }, [this.inputConfigs.map(function (config) {
      return createVNode("div", {
        "class": "input-group__item",
        "key": config.key,
        "style": {
          flex: config.flex || 1
        }
      }, [config.type === "input" ? createVNode(Input, mergeProps(inputProps, {
        "align": "center",
        "size": "small",
        "disabled": _this.disabled,
        "modelValue": _this.modelValue[config.key],
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.modelValue[config.key] = $event;
        },
        "maxlength": _this.format === "HEX" ? 9 : void 0,
        "title": _this.modelValue[config.key],
        "onBlur": function onBlur(v) {
          return _this.handleChange(config.key, v);
        },
        "onEnter": function onEnter(v) {
          return _this.handleChange(config.key, v);
        }
      }), null) : createVNode(InputNumber, mergeProps(inputProps, {
        "align": "center",
        "size": "small",
        "disabled": _this.disabled,
        "modelValue": _this.modelValue[config.key],
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.modelValue[config.key] = $event;
        },
        "title": _this.modelValue[config.key],
        "min": config.min,
        "max": config.max,
        "step": 1,
        "format": config.format,
        "theme": "normal",
        "onBlur": function onBlur(v) {
          return _this.handleChange(config.key, v);
        },
        "onEnter": function onEnter(v) {
          return _this.handleChange(config.key, v);
        }
      }), null)]);
    })]);
  }
});

export { FormatInputs as default };
//# sourceMappingURL=inputs.mjs.map
