/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-0b4c3c44.mjs';
import { isVNode, defineComponent, ref, watch, createVNode } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import props from '../props.mjs';
import '../const.mjs';
import { RadioGroup, RadioButton } from '../../radio/index.mjs';
import { useBaseClassName } from '../hooks.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import { COLOR_MODES } from '../../_common/js/color-picker/constants.mjs';
import '../../radio/radio.mjs';
import '../../_chunks/dep-8c39d78a.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../_chunks/dep-dcf624da.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-e68fd68c.mjs';
import '../../_chunks/dep-8e451077.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-192e10f1.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_chunks/dep-755716aa.mjs';
import '../../_chunks/dep-82798823.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../_chunks/dep-db11154e.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-baa4f9dc.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-40522c7c.mjs';
import '../../_chunks/dep-83862ee1.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-2684fd15.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-9262ea29.mjs';
import '../../_chunks/dep-869cd310.mjs';
import '../../_chunks/dep-88e40e6a.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/radio-button.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../radio/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var PanelHeader = defineComponent({
  name: "PanelHeader",
  props: _objectSpread(_objectSpread({}, props), {}, {
    mode: {
      type: String,
      "default": "color"
    },
    togglePopup: {
      type: Function
    },
    onModeChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var baseClassName = useBaseClassName();

    var _useGlobalIcon = useGlobalIcon({
      CloseIcon: CloseIcon
    }),
        CloseIcon$1 = _useGlobalIcon.CloseIcon;

    var modeValue = ref(props2.mode);

    var handleModeChange = function handleModeChange(v) {
      return props2.onModeChange(v);
    };

    watch(function () {
      return props2.mode;
    }, function (v) {
      return modeValue.value = v;
    });
    return {
      baseClassName: baseClassName,
      CloseIcon: CloseIcon$1,
      modeValue: modeValue,
      handleModeChange: handleModeChange
    };
  },
  render: function render() {
    var _slot;

    var _this$colorModes,
        _this$colorModes2,
        _this = this;

    if (((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1) {
      return null;
    }

    var baseClassName = this.baseClassName,
        CloseIcon = this.CloseIcon;
    return createVNode("div", {
      "class": "".concat(baseClassName, "__head")
    }, [createVNode("div", {
      "class": "".concat(baseClassName, "__mode")
    }, [((_this$colorModes2 = this.colorModes) === null || _this$colorModes2 === void 0 ? void 0 : _this$colorModes2.length) === 1 ? COLOR_MODES[this.colorModes[0]] : createVNode(RadioGroup, {
      "variant": "default-filled",
      "size": "small",
      "modelValue": _this.modeValue,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.modeValue = $event;
      },
      "onChange": this.handleModeChange
    }, _isSlot(_slot = Object.keys(COLOR_MODES).map(function (key) {
      return createVNode(RadioButton, {
        "key": key,
        "value": key
      }, {
        "default": function _default() {
          return [COLOR_MODES[key]];
        }
      });
    })) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    })])]);
  }
});

export { PanelHeader as default };
//# sourceMappingURL=header.mjs.map
