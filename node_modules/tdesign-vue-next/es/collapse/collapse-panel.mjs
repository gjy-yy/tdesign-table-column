/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { isVNode, defineComponent, toRefs, inject, computed, ref, createVNode, withDirectives, vShow, Transition } from 'vue';
import props from './collapse-panel-props.mjs';
import FakeArrow from '../common-components/fake-arrow.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import useCollapseAnimation from './useCollapseAnimation.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var _CollapsePanel = defineComponent({
  name: "TCollapsePanel",
  props: props,
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();
    var componentName = usePrefixClass("collapse-panel");
    var disableClass = usePrefixClass("is-disabled");
    var clickableClass = usePrefixClass("is-clickable");
    var transitionClass = usePrefixClass("slide-down");

    var _toRefs = toRefs(props2),
        value = _toRefs.value,
        disabled = _toRefs.disabled,
        destroyOnCollapse = _toRefs.destroyOnCollapse,
        expandIcon = _toRefs.expandIcon;

    var collapseValue = inject("collapseValue");
    var updateCollapseValue = inject("updateCollapseValue");
    var getUniqId = inject("getUniqId", function () {
      return void 0;
    }, false);

    var _inject = inject("collapseProps"),
        defaultExpandAll = _inject.defaultExpandAll,
        disableAll = _inject.disabled,
        expandIconPlacement = _inject.expandIconPlacement,
        expandOnRowClick = _inject.expandOnRowClick,
        expandIconAll = _inject.expandIcon;

    var innerValue = value.value || getUniqId();
    var showExpandIcon = computed(function () {
      return expandIcon.value === void 0 ? expandIconAll.value : expandIcon.value;
    });

    if (defaultExpandAll.value) {
      updateCollapseValue(innerValue);
    }

    var _useCollapseAnimation = useCollapseAnimation(),
        beforeEnter = _useCollapseAnimation.beforeEnter,
        enter = _useCollapseAnimation.enter,
        afterEnter = _useCollapseAnimation.afterEnter,
        beforeLeave = _useCollapseAnimation.beforeLeave,
        leave = _useCollapseAnimation.leave,
        afterLeave = _useCollapseAnimation.afterLeave;

    var headRef = ref();
    var isDisabled = computed(function () {
      return disabled.value || disableAll.value;
    });
    var isActive = computed(function () {
      return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
    });
    var classes = computed(function () {
      return [componentName.value, _defineProperty({}, disableClass.value, isDisabled.value)];
    });

    var handleClick = function handleClick(e) {
      var canExpand = expandOnRowClick.value && e.target === headRef.value || e.target.getAttribute("name") === "arrow";

      if (canExpand && !isDisabled.value) {
        updateCollapseValue(innerValue);
      }
    };

    var renderIcon = function renderIcon(direction) {
      return createVNode(FakeArrow, {
        "name": "arrow",
        "isActive": isActive.value,
        "overlayClassName": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(direction)
      }, null);
    };

    var renderBlank = function renderBlank() {
      return createVNode("div", {
        "class": "".concat(componentName.value, "__header--blank")
      }, null);
    };

    var renderHeader = function renderHeader() {
      var cls = ["".concat(componentName.value, "__header"), _defineProperty({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
      return createVNode("div", {
        "ref": headRef,
        "class": cls,
        "onClick": handleClick
      }, [showExpandIcon.value && expandIconPlacement.value === "left" ? renderIcon(expandIconPlacement.value) : null, renderTNodeJSX("header"), renderBlank(), renderTNodeJSX("headerRightContent"), showExpandIcon.value && expandIconPlacement.value === "right" ? renderIcon(expandIconPlacement.value) : null]);
    };

    var renderBodyByNormal = function renderBodyByNormal() {
      return withDirectives(createVNode("div", {
        "class": "".concat(componentName.value, "__body")
      }, [createVNode("div", {
        "class": "".concat(componentName.value, "__content")
      }, [renderTNodeJSX("default")])]), [[vShow, isActive.value]]);
    };

    var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse() {
      return isActive.value ? createVNode("div", {
        "class": "".concat(componentName.value, "__body")
      }, [createVNode("div", {
        "class": "".concat(componentName.value, "__content")
      }, [renderTNodeJSX("default")])]) : null;
    };

    var renderBody = function renderBody() {
      return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
    };

    return function () {
      var _slot;

      return createVNode("div", {
        "class": classes.value
      }, [createVNode("div", {
        "class": "".concat(componentName.value, "__wrapper")
      }, [renderHeader(), createVNode(Transition, {
        "name": transitionClass.value,
        "onBeforeEnter": beforeEnter,
        "onEnter": enter,
        "onAfterEnter": afterEnter,
        "onBeforeLeave": beforeLeave,
        "onLeave": leave,
        "onAfterLeave": afterLeave
      }, _isSlot(_slot = renderBody()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })])]);
    };
  }
});

export { _CollapsePanel as default };
//# sourceMappingURL=collapse-panel.mjs.map
