/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { toRefs, inject, ref } from 'vue';
import { t as throttle_1 } from '../../_chunks/dep-2c582e31.mjs';
import { dragInjectKey } from '../constants.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-241fdd8c.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-050b3eb2.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';

function useDraggable(props) {
  var _toRefs = toRefs(props),
      nodeRef = _toRefs.nodeRef,
      node = _toRefs.node;

  var onDrag = inject(dragInjectKey);
  var isDragOver = ref(false);
  var isDragging = ref(false);
  var dropPosition = ref(0);
  var updateDropPosition = throttle_1(function (e) {
    if (!nodeRef.value) return;
    var rect = nodeRef.value.getBoundingClientRect();
    var offsetY = window.pageYOffset + rect.top;
    var pageY = e.pageY;
    var gapHeight = rect.height / 4;
    var diff = pageY - offsetY;

    if (diff < gapHeight) {
      dropPosition.value = -1;
    } else if (diff < rect.height - gapHeight) {
      dropPosition.value = 0;
    } else {
      dropPosition.value = 1;
    }
  });

  var setDragStatus = function setDragStatus(status, e) {
    var _onDrag$onDragStart, _onDrag$onDragEnd, _onDrag$onDragOver, _onDrag$onDragLeave, _onDrag$onDrop;

    switch (status) {
      case "dragStart":
        isDragging.value = true;
        dropPosition.value = 0;
        (_onDrag$onDragStart = onDrag.onDragStart) === null || _onDrag$onDragStart === void 0 ? void 0 : _onDrag$onDragStart.call(onDrag, {
          node: node.value,
          e: e
        });
        break;

      case "dragEnd":
        isDragging.value = false;
        isDragOver.value = false;
        dropPosition.value = 0;
        updateDropPosition.cancel();
        (_onDrag$onDragEnd = onDrag.onDragEnd) === null || _onDrag$onDragEnd === void 0 ? void 0 : _onDrag$onDragEnd.call(onDrag, {
          node: node.value,
          e: e
        });
        break;

      case "dragOver":
        isDragOver.value = true;
        updateDropPosition(e);
        (_onDrag$onDragOver = onDrag.onDragOver) === null || _onDrag$onDragOver === void 0 ? void 0 : _onDrag$onDragOver.call(onDrag, {
          node: node.value,
          e: e
        });
        break;

      case "dragLeave":
        isDragOver.value = false;
        dropPosition.value = 0;
        updateDropPosition.cancel();
        (_onDrag$onDragLeave = onDrag.onDragLeave) === null || _onDrag$onDragLeave === void 0 ? void 0 : _onDrag$onDragLeave.call(onDrag, {
          node: node.value,
          e: e
        });
        break;

      case "drop":
        (_onDrag$onDrop = onDrag.onDrop) === null || _onDrag$onDrop === void 0 ? void 0 : _onDrag$onDrop.call(onDrag, {
          node: node.value,
          dropPosition: dropPosition.value,
          e: e
        });
        isDragOver.value = false;
        updateDropPosition.cancel();
        break;

      default:
        break;
    }
  };

  return {
    isDragOver: isDragOver,
    isDragging: isDragging,
    dropPosition: dropPosition,
    setDragStatus: setDragStatus
  };
}

export { useDraggable as default };
//# sourceMappingURL=useDraggable.mjs.map
