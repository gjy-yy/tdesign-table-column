/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { u as upperFirst_1 } from '../../_chunks/dep-755716aa.mjs';
import { getNode } from '../util.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-82798823.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-192e10f1.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-0b4c3c44.mjs';
import 'vue';
import '../../_chunks/dep-32e8a48d.mjs';
import '../../_chunks/dep-0c515b62.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-759eacca.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-544fb8fd.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-72359af2.mjs';
import '../../_chunks/dep-ad0cc3b4.mjs';
import '../../_chunks/dep-e769aafd.mjs';

function useExposeFunc(treeStore, expose) {
  var setItem = function setItem(value, options) {
    var node = treeStore.value.getNode(value);
    var spec = options;
    var keys = Object.keys(spec);

    if (node && spec) {
      ["expanded", "actived", "checked"].forEach(function (name) {
        if (keys.includes(name)) {
          node["set".concat(upperFirst_1(name))](spec[name], {
            directly: true
          });
        }
      });
    }
  };

  var getItem = function getItem(value) {
    var node = treeStore.value.getNode(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };

  var getItems = function getItems(value) {
    var nodes = treeStore.value.getNodes(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };

  var appendTo = function appendTo(para, item) {
    var list = [];

    if (Array.isArray(item)) {
      list = item;
    } else {
      list = [item];
    }

    list.forEach(function (item2) {
      var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
      var node = getNode(treeStore.value, val);

      if (node) {
        treeStore.value.appendNodes(para, node);
      } else {
        treeStore.value.appendNodes(para, item2);
      }
    });
  };

  var insertBefore = function insertBefore(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);

    if (node) {
      treeStore.value.insertBefore(value, node);
    } else {
      treeStore.value.insertBefore(value, item);
    }
  };

  var insertAfter = function insertAfter(value, item) {
    var val = (item === null || item === void 0 ? void 0 : item.value) || "";
    var node = getNode(treeStore.value, val);

    if (node) {
      treeStore.value.insertAfter(value, node);
    } else {
      treeStore.value.insertAfter(value, item);
    }
  };

  var remove = function remove(value) {
    return treeStore.value.remove(value);
  };

  var getIndex = function getIndex(value) {
    return treeStore.value.getNodeIndex(value);
  };

  var getParent = function getParent(value) {
    var node = treeStore.value.getParent(value);
    return node === null || node === void 0 ? void 0 : node.getModel();
  };

  var getParents = function getParents(value) {
    var nodes = treeStore.value.getParents(value);
    return nodes.map(function (node) {
      return node.getModel();
    });
  };

  var getPath = function getPath(value) {
    var node = treeStore.value.getNode(value);
    var pathNodes = [];

    if (node) {
      pathNodes = node.getPath().map(function (node2) {
        return node2.getModel();
      });
    }

    return pathNodes;
  };

  expose({
    setItem: setItem,
    getItem: getItem,
    getItems: getItems,
    appendTo: appendTo,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    remove: remove,
    getIndex: getIndex,
    getParent: getParent,
    getParents: getParents,
    getPath: getPath
  });
}

export { useExposeFunc as default };
//# sourceMappingURL=useExposeFunc.mjs.map
