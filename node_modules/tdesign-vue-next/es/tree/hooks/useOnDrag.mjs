/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { ref, getCurrentInstance, provide } from 'vue';
import { dragInjectKey } from '../constants.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';

function useOnDrag(treeStore) {
  var dragNode = ref();

  var _getCurrentInstance = getCurrentInstance(),
      emit = _getCurrentInstance.emit;

  var onDragStart = function onDragStart(context) {
    dragNode.value = context.node;
    emit === null || emit === void 0 ? void 0 : emit("dragStart", context);
  };

  var onDragEnd = function onDragEnd(context) {
    dragNode.value = context.node;
    emit === null || emit === void 0 ? void 0 : emit("dragEnd", context);
  };

  var onDragOver = function onDragOver(context) {
    emit === null || emit === void 0 ? void 0 : emit("dragOver", context);
  };

  var onDragLeave = function onDragLeave(context) {
    emit === null || emit === void 0 ? void 0 : emit("dragLeave", context);
  };

  var onDrop = function onDrop(context) {
    var node = context.node,
        dropPosition = context.dropPosition;
    if (node.value === dragNode.value.value || node.getParents().some(function (_node) {
      return _node.value === dragNode.value.value;
    })) return;
    var nodes = treeStore.value.getNodes();
    nodes.some(function (_node, _index) {
      if (_node.value === node.value) {
        if (dropPosition === 0) {
          dragNode.value.appendTo(treeStore.value, _node);
        } else if (dropPosition < 0) {
          node.insertBefore(dragNode.value);
        } else {
          node.insertAfter(dragNode.value);
        }

        return true;
      }

      return false;
    });
    emit === null || emit === void 0 ? void 0 : emit("drop", context);
  };

  provide(dragInjectKey, {
    onDragStart: onDragStart,
    onDragEnd: onDragEnd,
    onDragOver: onDragOver,
    onDragLeave: onDragLeave,
    onDrop: onDrop
  });
}

export { useOnDrag as default };
//# sourceMappingURL=useOnDrag.mjs.map
