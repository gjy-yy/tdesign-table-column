/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-dcf624da.mjs';
import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, ref, toRefs, getCurrentInstance, onMounted, computed, watch, createVNode, mergeProps } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-0b4185fe.mjs';
import props from './props.mjs';
import popupProps from '../popup/props.mjs';
import { Popup } from '../popup/index.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { useMouse } from './util.mjs';
import useVModel from '../hooks/useVModel.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../utils/dom.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../utils/easing.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Tooltip = defineComponent({
  name: "TTooltip",
  props: _objectSpread(_objectSpread({}, popupProps), props),
  setup: function setup(props2, ctx) {
    var timer = ref(null);
    var popupRef = ref(null);

    var _toRefs = toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;

    var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];

    var vm = getCurrentInstance();
    var innerTooltipVisible = ref(props2.visible || props2.defaultVisible);
    var classPrefix = usePrefixClass();
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();

    var _useMouse = useMouse(),
        x = _useMouse.x;

    var offsetX = ref(x.value);
    onMounted(function () {
      if (props2.duration && innerTooltipVisible.value) {
        timer.value = setTimeout(function () {
          innerTooltipVisible.value = false;
          clearTimeout(timer.value);
          timer.value = null;
        }, props2.duration);
      }
    });

    var onTipVisibleChange = function onTipVisibleChange(val, ctx2) {
      if (timer.value && (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.trigger) !== "document") return;

      if (val) {
        offsetX.value = x.value;
      }

      setInnerVisible(val, ctx2);
    };

    var tooltipOverlayClassName = computed(function () {
      return ["".concat(classPrefix.value, "-tooltip"), _defineProperty({}, "".concat(classPrefix.value, "-tooltip--").concat(props2.theme), props2.theme), props2.overlayClassName];
    });
    var popupProps2 = computed(function () {
      return _objectSpread(_objectSpread({}, (vm === null || vm === void 0 ? void 0 : vm.vnode.props) || {}), {}, {
        placement: props2.placement === "mouse" ? "bottom-left" : props2.placement,
        showArrow: props2.placement === "mouse" ? false : props2.showArrow,
        content: function content() {
          return renderTNodeJSX("content");
        },
        "default": function _default() {
          return renderContent("default", "triggerElement");
        },
        overlayClassName: tooltipOverlayClassName.value,
        onVisibleChange: onTipVisibleChange
      });
    });
    var overlayInnerStyle = computed(function () {
      if (props2.placement !== "mouse" || offsetX.value === 0) {
        return props2.overlayInnerStyle;
      }

      var offsetStyle = function offsetStyle(triggerEl) {
        return {
          transform: "translateX(".concat(offsetX.value - triggerEl.getBoundingClientRect().left, "px)")
        };
      };

      if (props2.overlayInnerStyle) {
        return function (triggerEl, popupEl) {
          return _objectSpread(_objectSpread({}, offsetStyle(triggerEl)), isFunction_1(props2.overlayInnerStyle) ? props2.overlayInnerStyle(triggerEl, popupEl) : props2.overlayInnerStyle);
        };
      }

      return offsetStyle;
    });
    watch(function () {
      return innerTooltipVisible.value;
    }, function () {
      if (timer.value && !innerTooltipVisible.value) {
        clearTimeout(timer.value);
        timer.value = null;
      }
    });

    var onPopupUpdate = function onPopupUpdate() {
      var _popupRef$value, _popupRef$value$updat;

      (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : (_popupRef$value$updat = _popupRef$value.updatePopper) === null || _popupRef$value$updat === void 0 ? void 0 : _popupRef$value$updat.call(_popupRef$value);
    };

    ctx.expose({
      updatePopper: onPopupUpdate
    });
    return function () {
      return createVNode(Popup, mergeProps({
        "ref": popupRef,
        "visible": innerVisible.value
      }, popupProps2.value, {
        "overlayInnerStyle": overlayInnerStyle.value
      }), null);
    };
  }
});

export { _Tooltip as default };
//# sourceMappingURL=tooltip.mjs.map
