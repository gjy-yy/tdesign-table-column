/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { isVNode, defineComponent, provide, createVNode } from 'vue';
import props from './avatar-group-props.mjs';
import _Avatar from './avatar.mjs';
import { useContent, useTNodeJSX } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import './props.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-2684fd15.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var _AvatarGroup = defineComponent({
  name: "TAvatarGroup",
  props: props,
  setup: function setup(props2) {
    provide("avatarGroup", props2);
    var renderContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var AVATAR_NAME = usePrefixClass("avatar");
    var COMPONENT_NAME = usePrefixClass("avatar-group");

    var isIcon = function isIcon() {
      var content = renderTNodeJSX("collapseAvatar");
      return content;
    };

    var renderIcon = function renderIcon() {
      return isIcon() && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
    };

    var renderEllipsisAvatar = function renderEllipsisAvatar(children) {
      if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
        var content = setEllipsisContent(children);
        var outAvatar = children.slice(0, props2.max);
        outAvatar.push(createVNode(_Avatar, {
          "size": props2.size,
          "icon": renderIcon()
        }, _isSlot(content) ? content : {
          "default": function _default() {
            return [content];
          }
        }));
        return [outAvatar];
      }

      return [children];
    };

    var setEllipsisContent = function setEllipsisContent(children) {
      var content = "";

      if (props2.collapseAvatar) {
        if (!isIcon()) {
          content = renderContent("collapseAvatar", "content");
        }
      } else {
        content = "+".concat(children.length - props2.max);
      }

      return content;
    };

    return function () {
      var _ref;

      var children = renderTNodeJSX("default");
      var cascading = props2.cascading,
          max = props2.max;
      var groupClass = ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty(_ref, "".concat(AVATAR_NAME.value, "--offset-right"), cascading === "right-up"), _defineProperty(_ref, "".concat(AVATAR_NAME.value, "--offset-left"), cascading === "left-up"), _ref)];
      var content = [children];

      if (max && max >= 0) {
        content = [renderEllipsisAvatar(children)];
      }

      return createVNode("div", {
        "class": groupClass
      }, [content]);
    };
  }
});

export { _AvatarGroup as default };
//# sourceMappingURL=group.mjs.map
