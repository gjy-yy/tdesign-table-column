{"version":3,"file":"format.mjs","sources":["../../../../src/_common/js/date-picker/format.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport { extractTimeFormat } from './utils';\nimport log from '../log';\n\ntype DateValue = string | number | Date;\n\nexport const TIME_FORMAT = 'HH:mm:ss';\n\n// 统一解析日期格式字符串成 Dayjs 对象\nexport function parseToDayjs(\n  value: string | Date | number,\n  format: string,\n  timeOfDay?: string\n) {\n  if (value === '') return dayjs();\n\n  let dateText = value;\n  // format week\n  if (/[w|W]/g.test(format)) {\n    if (typeof dateText !== 'string') {\n      dateText = dayjs(dateText).format(format) as string;\n    }\n\n    const yearStr = dateText.split(/[-/.]/)[0];\n    const weekStr = dateText.split(/[-/.]/)[1];\n    const weekFormatStr = format.split(/[-/.]/)[1];\n    const firstWeek = dayjs(yearStr, 'YYYY').startOf('year');\n    for (let i = 0; i <= 52; i += 1) {\n      let nextWeek = firstWeek.add(i, 'week');\n      // 重置为周的第一天\n      if (timeOfDay === 'start') nextWeek = nextWeek.subtract(5, 'day');\n      if (nextWeek.format(weekFormatStr) === weekStr) {\n        return nextWeek;\n      }\n    }\n  }\n\n  // format quarter\n  if (/Q/g.test(format)) {\n    if (typeof dateText !== 'string') {\n      dateText = dayjs(dateText).format(format) as string;\n    }\n\n    const yearStr = dateText.split(/[-/.]/)[0];\n    const quarterStr = dateText.split(/[-/.]/)[1];\n    const quarterFormatStr = format.split(/[-/.]/)[1];\n    const firstWeek = dayjs(yearStr, 'YYYY').startOf('year');\n    for (let i = 0; i <= 52; i += 1) {\n      const nextQuarter = firstWeek.add(i, 'quarter');\n      if (nextQuarter.format(quarterFormatStr) === quarterStr) {\n        return nextQuarter;\n      }\n    }\n  }\n\n  // 兼容数据格式不标准场景 YYYY-MM-D\n  return dayjs(dateText, format).isValid()\n    ? dayjs(dateText, format)\n    : dayjs(dateText);\n}\n\n// 格式化 range\nfunction formatRange({\n  newDate,\n  format,\n  targetFormat,\n}: {\n  newDate: any;\n  format: string;\n  targetFormat: string;\n}) {\n  if (!newDate || !Array.isArray(newDate)) return [];\n\n  let dayjsDateList = newDate.map((d) => d && parseToDayjs(d, format));\n\n  // 保证后面的时间大于前面的时间\n  if (\n    dayjsDateList[0]\n    && dayjsDateList[1]\n    && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()\n  ) {\n    // 数据兼容规则\n    dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];\n  }\n\n  // 格式化失败提示\n  if (dayjsDateList.some((r) => r && !r.isValid())) {\n    log.error(\n      'DatePicker',\n      `请检查 format、valueType、value 格式是否有效.\\nformat: '${format}' valueType: '${targetFormat}' value: '${newDate}'`\n    );\n    return [];\n  }\n\n  // valueType = 'time-stamp' 返回时间戳\n  if (targetFormat === 'time-stamp') {\n    return dayjsDateList.map((da) => da && da.toDate().getTime());\n  }\n\n  return dayjsDateList.map((da) => da && da.format(targetFormat));\n}\n\n// 格式化单选\nfunction formatSingle({\n  newDate,\n  format,\n  targetFormat,\n}: {\n  newDate: any;\n  format: string;\n  targetFormat: string;\n}) {\n  if (!newDate) return '';\n\n  const dayJsDate = parseToDayjs(newDate, format);\n\n  // 格式化失败提示\n  if (!dayJsDate.isValid()) {\n    log.error(\n      'DatePicker',\n      `请检查 format、valueType、value 格式是否有效.\\nformat: '${format}' valueType: '${targetFormat}' value: '${newDate}'`\n    );\n    return '';\n  }\n\n  // valueType = 'time-stamp' 返回时间戳\n  if (targetFormat === 'time-stamp') return dayJsDate.toDate().getTime();\n\n  return dayJsDate.format(targetFormat);\n}\n\n// 检测日期是否合法\nexport function isValidDate(value: DateValue | DateValue[], format: string) {\n  if (Array.isArray(value)) {\n    if (format === 'time-stamp') return value.every((v) => dayjs(v).isValid());\n    return value.every((v) => dayjs(v, format).isValid() || dayjs(v).isValid());\n  }\n\n  if (format === 'time-stamp') return dayjs(value).isValid();\n  return dayjs(value, format).isValid() || dayjs(value).isValid();\n}\n\n// 日期格式化\nexport function formatDate(\n  newDate: DateValue | DateValue[],\n  { format, targetFormat }: { format: string; targetFormat: string }\n) {\n  let result;\n\n  if (Array.isArray(newDate)) {\n    result = formatRange({ newDate, format, targetFormat });\n  } else {\n    result = formatSingle({ newDate, format, targetFormat });\n  }\n\n  return result;\n}\n\n// 格式化时间\nexport function formatTime(value: DateValue | DateValue[], timeFormat: string) {\n  let result;\n\n  if (Array.isArray(value)) {\n    result = value.map((v) => dayjs(v).format(timeFormat));\n  } else {\n    result = dayjs((value || new Date()) as DateValue).format(timeFormat);\n  }\n\n  return result;\n}\n\n// 根据不同 mode 给出格式化默认值\nexport function getDefaultFormat({\n  mode = 'date',\n  format,\n  valueType,\n  enableTimePicker,\n}: {\n  mode?: string;\n  format?: string;\n  valueType?: string;\n  enableTimePicker?: boolean;\n}) {\n  if (mode === 'year') {\n    return {\n      format: format || 'YYYY',\n      valueType: valueType || format || 'YYYY',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'month') {\n    return {\n      format: format || 'YYYY-MM',\n      valueType: valueType || format || 'YYYY-MM',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'quarter') {\n    return {\n      format: format || 'YYYY-[Q]Q',\n      valueType: valueType || format || 'YYYY-[Q]Q',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'week') {\n    return {\n      format: format || 'YYYY-wo',\n      valueType: valueType || format || 'YYYY-wo',\n      timeFormat: TIME_FORMAT,\n    };\n  }\n  if (mode === 'date') {\n    return {\n      format: format || `YYYY-MM-DD${enableTimePicker ? ' HH:mm:ss' : ''}`,\n      valueType: valueType || format || `YYYY-MM-DD${enableTimePicker ? ' HH:mm:ss' : ''}`,\n      timeFormat: extractTimeFormat(format || `YYYY-MM-DD${enableTimePicker ? ' HH:mm:ss' : ''}`) || TIME_FORMAT,\n    };\n  }\n  log.error('DatePicker', `Invalid mode: ${mode}`);\n  return {};\n}\n"],"names":["TIME_FORMAT","parseToDayjs","value","format","timeOfDay","dayjs","dateText","test","yearStr","split","weekStr","weekFormatStr","firstWeek","startOf","i","nextWeek","add","subtract","quarterStr","quarterFormatStr","nextQuarter","isValid","formatRange","newDate","targetFormat","Array","isArray","dayjsDateList","map","d","toDate","getTime","some","r","log","error","da","formatSingle","dayJsDate","isValidDate","every","v","formatDate","result","formatTime","timeFormat","Date","getDefaultFormat","mode","valueType","enableTimePicker","extractTimeFormat"],"mappings":"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"}