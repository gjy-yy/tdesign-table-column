{"version":3,"file":"tree-node-model.mjs","sources":["../../../../src/_common/js/tree/tree-node-model.ts"],"sourcesContent":["import pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport { TreeNode } from './tree-node';\nimport { OptionData } from '../common';\nimport {\n  TreeNodeValue,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TreeNodeModelProps,\n} from './types';\nimport log from '../log/log';\n\n// 获取节点需要暴露的属性\nfunction getExposedProps(node: TreeNode): TreeNodeModelProps {\n  const props = pick(node, [\n    'value',\n    'label',\n    'data',\n    'actived',\n    'expanded',\n    'checked',\n    'indeterminate',\n    'loading',\n  ]) as TreeNodeModelProps;\n  return props;\n}\n\n// 封装对外暴露的对象\nexport function createNodeModel(node: TreeNode): TypeTreeNodeModel {\n  const props = getExposedProps(node);\n\n  const model: TypeTreeNodeModel = {\n    ...props,\n\n    // 获取节点所处层级\n    getLevel() {\n      return node.getLevel();\n    },\n\n    // 获取节点在 children 中的位置\n    getIndex() {\n      return node.getIndex();\n    },\n\n    // 判断节点是否为 children 中的第一个节点\n    isFirst() {\n      return node.isFirst();\n    },\n\n    // 判断节点是否为 children 中的最后一个节点\n    isLast() {\n      return node.isLast();\n    },\n\n    // 判断节点是否为叶节点\n    isLeaf() {\n      return node.isLeaf();\n    },\n\n    // 插入数据到节点之前\n    insertBefore(newData: TypeTreeItem) {\n      return node.insertBefore(newData);\n    },\n\n    // 插入数据到节点之后\n    insertAfter(newData: TypeTreeItem) {\n      return node.insertAfter(newData);\n    },\n\n    // 给当前节点添加子节点数据\n    appendData(data: TypeTreeNodeData | TypeTreeNodeData[]) {\n      return node.append(data);\n    },\n\n    // 返回路径节点数据集合\n    getPath(): TypeTreeNodeModel[] {\n      const nodes = node.getPath();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取单个父节点数据\n    getParent(): TypeTreeNodeModel {\n      return node.parent?.getModel();\n    },\n\n    // 获取所有父节点数据\n    getParents(): TypeTreeNodeModel[] {\n      const nodes = node.getParents();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取根节点\n    getRoot(): TypeTreeNodeModel {\n      const root = node.getRoot();\n      return root?.getModel();\n    },\n\n    // 获取兄弟节点，包含自己在内\n    getSiblings(): TypeTreeNodeModel[] {\n      const nodes = node.getSiblings();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 返回当前节点的第一层子节点数据集合\n    getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n      let childrenModel: boolean | TypeTreeNodeModel[] = false;\n      const { children } = node;\n      if (Array.isArray(children)) {\n        if (children.length > 0) {\n          if (deep) {\n            const nodes = node.walk();\n            nodes.shift();\n            childrenModel = nodes.map((item) => item.getModel());\n          } else {\n            childrenModel = children.map((item) => item.getModel());\n          }\n        } else {\n          childrenModel = false;\n        }\n      } else if (typeof children === 'boolean') {\n        childrenModel = children;\n      }\n      return childrenModel;\n    },\n\n    // 删除本节点，或者 value 指定的子节点\n    remove(value?: TreeNodeValue) {\n      if (!value) {\n        node.remove();\n        return;\n      }\n\n      const { tree } = node;\n      const targetNode = tree.getNode(value);\n      if (!targetNode) {\n        log.warnOnce('Tree', `\\`${value}\\` is not exist`);\n        return;\n      }\n\n      const parents = targetNode.getParents();\n      const parentValues = parents.map((pnode) => (pnode.value));\n      if (parentValues.indexOf(node.value) < 0) {\n        log.warnOnce('Tree', `\\`${value}\\` is not a childNode of current node`);\n        return;\n      }\n      targetNode.remove();\n    },\n\n    // 设置本节点携带的元数据\n    setData(data: OptionData) {\n      // 详细细节可见 https://github.com/Tencent/tdesign-common/issues/655\n      const _data = omit(data, ['children', 'value', 'label']);\n      const { keys } = node.tree.config;\n      const dataValue = data[keys?.value || 'value'];\n      const dataLabel = data[keys?.label || 'label'];\n      if (dataValue !== undefined) _data.value = dataValue;\n      if (dataLabel !== undefined) _data.label = dataLabel;\n\n      Object.assign(node.data, _data);\n      Object.assign(node, _data);\n    },\n  };\n\n  return model;\n}\n\n// 更新封装对象\nexport function updateNodeModel(model: TypeTreeNodeModel, node: TreeNode) {\n  // 同步节点属性\n  const props = getExposedProps(node);\n  Object.assign(model, props);\n}\n"],"names":["getExposedProps","node","props","pick","createNodeModel","model","getLevel","getIndex","isFirst","isLast","isLeaf","insertBefore","newData","insertAfter","appendData","data","append","getPath","nodes","map","item","getModel","getParent","parent","getParents","getRoot","root","getSiblings","getChildren","deep","childrenModel","children","Array","isArray","length","walk","shift","remove","value","tree","targetNode","getNode","log","warnOnce","parents","parentValues","pnode","indexOf","setData","_data","omit","keys","config","dataValue","dataLabel","label","Object","assign","updateNodeModel"],"mappings":"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"}