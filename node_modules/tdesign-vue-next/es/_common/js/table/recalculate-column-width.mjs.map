{"version":3,"file":"recalculate-column-width.mjs","sources":["../../../../src/_common/js/table/recalculate-column-width.ts"],"sourcesContent":["import { BaseTableCol, ThMap } from './types';\nimport { getColWidthAttr } from './utils';\n\n/**\n * 填充未设置width属性的列\n * @param columns 当前表格所有列\n * @param missingWidthCols 未设置width属性的列\n * @param thWidthList 列宽记录字典\n * @param tableLayout 表格布局\n * @param actualWidth 各列实际总列宽\n * @param tableWidth 表格总宽度\n */\nconst setMissingColumnWidth = <T extends BaseTableCol<T>>(\n  columns: T[],\n  missingWidthCols: T[],\n  thWidthList: ThMap,\n  tableLayout: string,\n  actualWidth: number,\n  tableWidth: number\n) : void => {\n  const thMap = thWidthList;\n  // 当前列宽总宽度小于表宽，将剩余宽度平均分配给未指定宽度的列\n  if (actualWidth < tableWidth) {\n    let widthDiff = tableWidth - actualWidth;\n    const remainCols: T[] = [];\n    // 优先保证设置了minWidth的列满足最小宽度\n    missingWidthCols.forEach((col) => {\n      const minWidth = getColWidthAttr(col, 'minWidth');\n      if (minWidth) {\n        thMap[col.colKey] = minWidth;\n        widthDiff -= minWidth;\n      } else {\n        remainCols.push(col);\n      }\n    });\n\n    // 如果剩余宽度 > 0\n    if (widthDiff > 0) {\n      // 如果存在未设置minWidth的列，这些列均分剩余宽度\n      if (remainCols.length) {\n        const avgWidth = widthDiff / remainCols.length;\n        remainCols.forEach((col) => {\n          thMap[col.colKey] = avgWidth;\n        });\n      } else {\n        // 否则所有列均分剩余宽度\n        const avgWidth = widthDiff / missingWidthCols.length;\n        missingWidthCols.forEach((col) => {\n          thMap[col.colKey] += avgWidth;\n        });\n      }\n    } else {\n      // 剩余宽度 <= 0, 所有剩余列默认填充100px\n      remainCols.forEach((col) => {\n        thMap[col.colKey] = 100;\n      });\n    }\n  } else if (tableLayout === 'fixed') {\n    // 当前列表总宽度大于等于表宽，且当前排版模式为fixed，默认填充minWidth || 100px\n    missingWidthCols.forEach((col) => {\n      thMap[col.colKey] = getColWidthAttr(col, 'minWidth') || 100;\n    });\n  } else {\n    // 当前列表总宽度大于等于表宽，且当前排版模式为aut\n    // 默认填充minWidth || 100px，然后按比例重新分配各列宽度\n    let extraWidth = 0;\n    missingWidthCols.forEach((col) => {\n      extraWidth += getColWidthAttr(col, 'minWidth') || 100;\n    });\n    const totalWidth = extraWidth + actualWidth;\n    columns.forEach((col) => {\n      if (!thMap[col.colKey]) {\n        const colWidth = getColWidthAttr(col, 'minWidth') || 100;\n        thMap[col.colKey] = (colWidth / totalWidth) * tableWidth;\n      } else {\n        thMap[col.colKey] = (thMap[col.colKey] / totalWidth) * tableWidth;\n      }\n    });\n  }\n};\n\n/**\n * 设置所有列的宽度\n * @param columns 当前表格所有列\n * @param thWidthList 列宽记录字典\n * @param actualWidth 各列实际总列宽\n * @param tableWidth 表格总宽度\n * @param notCalculateWidthCols 不需要参与计算的列id\n */\nconst setNormalColumnWidth = <T extends BaseTableCol<T>>(\n  columns: T[],\n  thWidthList: ThMap,\n  actualWidth: number,\n  tableWidth: number,\n  notCalculateWidthCols: string[]\n) : void => {\n  const thMap = thWidthList;\n  columns.forEach((col) => {\n    if (notCalculateWidthCols.includes(col.colKey)) return;\n    thMap[col.colKey] = (thMap[col.colKey] / actualWidth) * tableWidth;\n  });\n};\n\n/**\n * 表格未初始化时默认填充各列宽度\n * @param missingWidthCols 未设置width属性的列\n * @param thWidthList 列宽记录字典\n */\nconst setInitialColumnWidth = <T extends BaseTableCol<T>>(\n  missingWidthCols: T[],\n  thWidthList: { [colKey: string]: number },\n) : void => {\n  const thMap = thWidthList;\n  // 表格宽度未初始化，默认填充minWidth || 100px\n  missingWidthCols.forEach((col) => {\n    thMap[col.colKey] = getColWidthAttr(col, 'minWidth') || 100;\n  });\n};\n\n/**\n * 重新按规则分配各列宽度\n * @param columns 当前表格所有列\n * @param thWidthList 列宽记录字典\n * @param tableLayout 表格布局\n * @param tableElmWidth 表格宽度\n * @param notCalculateWidthCols 不需要参与计算的列\n * @param callback 回调函数\n */\nexport default function recalculateColumnWidth<T extends BaseTableCol<T>>(\n  columns: T[],\n  thWidthList: ThMap,\n  tableLayout: string,\n  tableElmWidth: number,\n  notCalculateWidthCols: string[],\n  callback: (widthMap: { [colKey: string]: number }) => void\n): void {\n  let actualWidth = 0;\n  const missingWidthCols: T[] = [];\n  const thMap: ThMap = {};\n\n  // 计算现有列的列宽总和\n  columns.forEach((col) => {\n    if (!thWidthList[col.colKey]) {\n      thMap[col.colKey] = getColWidthAttr(col, 'width');\n    } else {\n      thMap[col.colKey] = thWidthList[col.colKey];\n    }\n    const originWidth = thMap[col.colKey];\n    if (originWidth) {\n      actualWidth += originWidth;\n    } else {\n      missingWidthCols.push(col);\n    }\n  });\n\n  let tableWidth = tableElmWidth;\n  let needUpdate = false;\n  // 表宽没有初始化时，默认给没有指定列宽的列指定宽度为100px\n  if (tableWidth > 0) {\n    // 存在没有指定列宽的列\n    if (missingWidthCols.length) {\n      setMissingColumnWidth(\n        columns,\n        missingWidthCols,\n        thMap,\n        tableLayout,\n        actualWidth,\n        tableWidth\n      );\n      needUpdate = true;\n    } else {\n      // 所有列都已经指定宽度\n      if (notCalculateWidthCols.length) {\n        // 存在不允许重新计算宽度的列（一般是resize后的两列），这些列不参与后续计算\n        let sum = 0;\n        notCalculateWidthCols.forEach((colKey) => {\n          sum += thMap[colKey];\n        });\n        actualWidth -= sum;\n        tableWidth -= sum;\n      }\n      // 重新计算其他列的宽度，按表格剩余宽度进行按比例分配\n      if (actualWidth !== tableWidth || notCalculateWidthCols.length) {\n        setNormalColumnWidth(\n          columns,\n          thMap,\n          actualWidth,\n          tableWidth,\n          notCalculateWidthCols\n        );\n        needUpdate = true;\n      }\n    }\n  } else {\n    setInitialColumnWidth(missingWidthCols, thMap);\n    needUpdate = true;\n  }\n\n  // 列宽转为整数\n  if (needUpdate) {\n    let addon = 0;\n    Object.keys(thMap).forEach((key) => {\n      const width = thMap[key];\n      addon += width - Math.floor(width);\n      thMap[key] = Math.floor(width) + (addon > 1 ? 1 : 0);\n      if (addon > 1) {\n        addon -= 1;\n      }\n    });\n    if (addon > 0.5) {\n      thMap[columns[0].colKey] += 1;\n    }\n  }\n\n  // 回调处理\n  callback(thMap);\n}\n"],"names":["setMissingColumnWidth","columns","missingWidthCols","thWidthList","tableLayout","actualWidth","tableWidth","thMap","widthDiff","remainCols","forEach","col","minWidth","getColWidthAttr","colKey","push","length","avgWidth","extraWidth","totalWidth","colWidth","setNormalColumnWidth","notCalculateWidthCols","includes","setInitialColumnWidth","recalculateColumnWidth","tableElmWidth","callback","originWidth","needUpdate","sum","addon","Object","keys","key","width","Math","floor"],"mappings":"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"}