{"version":3,"file":"large-number.mjs","sources":["../../../../src/_common/js/input-number/large-number.ts"],"sourcesContent":["import log from '../log/log';\n\nexport function fillZero(length: number) {\n  return new Array(length).fill(0).join('');\n}\n\n/**\n * 大数，是否是一个数字，数字字符包括 - . e [0-9]\n */\nexport function isInputNumber(num: number | string): boolean {\n  if (!num) return true;\n  if (typeof num === 'number') return Number.isNaN(num);\n  const r = /^[0-9|e|E|-]+\\.*[0-9|e|E|-]*$/.test(num);\n  if (!r) return false;\n  // only allow one [.e] and two [-]\n  let eCount = 0;\n  let negativeCount = 0;\n  let dotCount = 0;\n  for (let i = 0, len = num.length; i < len; i++) {\n    if (num[i] === '.') {\n      dotCount += 1;\n      if (dotCount > 1) return false;\n    }\n    if (/(e|E)+/.test(num[i])) {\n      eCount += 1;\n      if (eCount > 1) return false;\n    }\n    if (num[i] === '-') {\n      negativeCount += 1;\n      if (negativeCount > 2) return false;\n    }\n  }\n  return true;\n}\n\n// 整数，去除前面的无效 0（本身是 0 除外）；小数去除末尾的无效 0\nexport function removeInvalidZero(num: string, decimal = false) {\n  if (num.indexOf('.') !== -1) {\n    log.error('InputNumber', 'num is not a integer number.');\n    return num;\n  }\n  if (!num || (num === '0' && decimal)) return '';\n  if (num === '0') return num;\n  return (decimal ? num.replace(/0+$/, '') : num.replace(/^0+/, '')) || '0';\n}\n\n/**\n * 大数加法，仅支持正整数（没有精度问题）\n * @param num1 被加数\n * @param num2 加数\n */\nexport function largeIntNumberAdd(num1: string, num2: string, decimal = false): string {\n  const number1 = removeInvalidZero(num1, decimal);\n  const number2 = removeInvalidZero(num2, decimal);\n  const isFirstLarger = number1.length > number2.length;\n  const maxNumber = isFirstLarger ? number1 : number2;\n  const minNumber = isFirstLarger ? number2 : number1;\n  const newNumber: string[] = [];\n  const step = [];\n  const diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  const len = decimal ? minNumber.length : maxNumber.length;\n  for (let i = len - 1; i >= 0; i--) {\n    const minIndex = i - diff;\n    // 第一个数，加第二个数，加进位\n    const count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);\n    if (count >= 10) {\n      step[i - 1] = 1;\n    }\n    newNumber.unshift(String(count % 10));\n  }\n  // 999 + 1 = 1000，之类的进位\n  if (step[-1]) {\n    newNumber.unshift('1');\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join('');\n  }\n  return newNumber.join('');\n}\n\n/**\n * 大数加法，支持小数和整数（没有精度问题）\n * @param num1 被加数\n * @param num2 加数\n */\nexport function largePositiveNumberAdd(num1: string, num2: string): string {\n  const [intNumber1 = '0', decimalNumber1 = '0'] = num1.split('.');\n  const [intNumber2 = '0', decimalNumber2 = '0'] = num2.split('.');\n  const integerSum = largeIntNumberAdd(intNumber1, intNumber2);\n  // 如果不存在小数，则直接返回整数相加结果\n  if (decimalNumber1 === '0' && decimalNumber2 === '0') return integerSum;\n  const newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);\n  const newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);\n  // 小数点相加\n  const decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);\n  // 组合整数部分和小数部分\n  const decimalLength = decimalNumberSum.length;\n  // 如果小数相加进位\n  if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {\n    return [\n      removeInvalidZero(largeIntNumberAdd(integerSum, '1')),\n      removeInvalidZero(decimalNumberSum.slice(1), true),\n    ].filter((v: string) => v).join('.');\n  }\n  return [\n    removeInvalidZero(integerSum),\n    removeInvalidZero(decimalNumberSum, true)\n  ].filter((v: string) => v).join('.');\n}\n\n/**\n * 比较两个大数的大小，仅正整数有效\n */\nfunction compareLargeIntegerNumber(num1: string, num2: string): 1 | -1 | 0 {\n  const number1 = removeInvalidZero(num1);\n  const number2 = removeInvalidZero(num2);\n  if (number1.length === number2.length) {\n    for (let i = 0, len = number1.length; i < len; i++) {\n      if (number1[i] > number2[i]) return 1;\n      if (number1[i] < number2[i]) return -1;\n    }\n    return 0;\n  }\n  return number1.length > number2.length ? 1 : -1;\n}\n\nfunction compareLargeDecimalNumber(num1: string, num2: string) {\n  const number1 = num1 && num1 !== '0' ? num1.replace(/0+$/, '') : '0';\n  const number2 = num2 && num2 !== '0' ? num2.replace(/0+$/, '') : '0';\n  const maxLength = Math.max(number1.length, number2.length);\n  for (let i = 0, len = maxLength; i < len; i++) {\n    if ((number1[i] || 0) > (number2[i] || 0)) return 1;\n    if ((number1[i] || 0) < (number2[i] || 0)) return -1;\n  }\n  return 0;\n}\n\n/**\n * 比较两个大数的大小\n */\nexport function compareLargeNumber(\n  num1: string,\n  num2: string,\n): 1 | -1 | 0 {\n  const [integer1, decimal1] = num1.split('.');\n  const [integer2, decimal2] = num2.split('.');\n  const result = compareLargeIntegerNumber(integer1.replace('-', ''), integer2.replace('-', ''));\n  const integer1IsNegative = integer1.includes('-');\n  const integer2IsNegative = integer2.includes('-');\n  if (integer1IsNegative && !integer2IsNegative) return -1;\n  if (!integer1IsNegative && integer2IsNegative) return 1;\n  if (integer1IsNegative && integer2IsNegative) {\n    if (result === 0) return 0;\n    return result > 0 ? -1 : 1;\n  }\n  if (result === 0) {\n    return compareLargeDecimalNumber(decimal1, decimal2);\n  }\n  return result;\n}\n\n// 确认是否为无限大/小\nexport function isInfinity(num: number| string) {\n  return [-Infinity, Infinity].includes(Number(num));\n}\n\n// 确认是否是大数\nexport function isSafeNumber(num: string | number) {\n  return Number(num) < Number.MAX_SAFE_INTEGER && Number(num) > Number.MIN_SAFE_INTEGER;\n}\n\n/**\n * 比较两个数的大小\n */\nexport function compareNumber(\n  num1: string | number,\n  num2: string | number,\n  largeNumber?: boolean,\n) {\n  const isSafeNumberCompare = isSafeNumber(num1) && isSafeNumber(num2) && !largeNumber;\n  const isInfinityCompare = isInfinity(num1) || isInfinity(num2);\n  if (isSafeNumberCompare || isInfinityCompare) {\n    // 比较两个非大数或涉及无穷的大小\n    if (Number(num1) === Number(num2)) return 0;\n    return Number(num1) > Number(num2) ? 1 : -1;\n  }\n  // 比较两个大数的大小\n  return compareLargeNumber(String(num1), String(num2));\n}\n\n/**\n * 大数减法，仅支持整数\n * @param num1 被减数\n * @param num2 减数\n * @param decimal 是否为小数位相减\n */\nexport function largeIntegerNumberSubtract(\n  num1: string, num2: string, p?: { decimal?: boolean, stayZero?: boolean }\n): string {\n  if (num1 === num2) return '0';\n  const { decimal, stayZero } = p || {};\n  const number1 = removeInvalidZero(num1);\n  const number2 = removeInvalidZero(num2);\n  const isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;\n  const maxNumber = isFirstLarger ? number1 : number2;\n  const minNumber = isFirstLarger ? number2 : number1;\n  const newNumber: string[] = [];\n  // step 存储借位信息\n  const step = [];\n  const diff = decimal ? 0 : maxNumber.length - minNumber.length;\n  const len = decimal ? minNumber.length : maxNumber.length;\n  for (let i = len - 1; i >= 0; i--) {\n    const minIndex = i - diff;\n    // 第一个数，减第二个数，减借位\n    let count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);\n    if (count < 0) {\n      step[i - 1] = 1;\n      count += 10;\n    }\n    newNumber.unshift(String(count));\n  }\n  if (decimal) {\n    return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join('');\n  }\n  let finalNumber = newNumber.join('');\n  if (!stayZero) {\n    finalNumber = finalNumber.replace(/^0+/, '');\n  }\n  return removeInvalidZero(isFirstLarger ? finalNumber : `-${finalNumber}`);\n}\n\n/**\n * 大数减法，支持整数和小数（无精度问题）\n * @param num1 被减数\n * @param num2 减数\n * @param decimal 是否为小数位相减\n */\nexport function largePositiveNumberSubtract(num1: string, num2: string): string {\n  if (num1 === num2) return '0';\n  const isFirstLarger = compareNumber(num1, num2, true) > 0;\n  const maxNumber = isFirstLarger ? num1 : num2;\n  const minNumber = isFirstLarger ? num2 : num1;\n  // 整数部分和小数部分分开处理\n  const [intNumber1, decimalNumber1 = '0'] = maxNumber.split('.');\n  const [intNumber2, decimalNumber2 = '0'] = minNumber.split('.');\n  let integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);\n  // 如果不存在小数，则直接返回整数相加结果\n  if (decimalNumber1 === '0' && decimalNumber2 === '0') {\n    return isFirstLarger ? integerNumber : `-${integerNumber}`;\n  }\n  // 小数点相减\n  let decimalNumber = '';\n  let addOneNumber = decimalNumber1;\n  // 第一个数字的小数位数比第二个少，需补足 0\n  if (decimalNumber1.length < decimalNumber2.length) {\n    addOneNumber = `${decimalNumber1}${fillZero(decimalNumber2.length - decimalNumber1.length)}`;\n  }\n  // 第一个小数位更小，是否需要借位\n  if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {\n    decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, { decimal: true });\n  } else {\n    if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === '0') {\n      decimalNumber = largeIntegerNumberSubtract(`1${addOneNumber}`, decimalNumber2, { stayZero: true });\n      decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;\n    } else {\n      decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, { decimal: true });\n    }\n    integerNumber = largeIntegerNumberSubtract(integerNumber, '1');\n  }\n  const finalNumber = decimalNumber ? [integerNumber, decimalNumber].join('.') : integerNumber;\n  return isFirstLarger ? finalNumber : `-${finalNumber}`;\n}\n\n/**\n * -0.6 - 0.8        =>  -(0.6 + 0.8)\n * -0.6 - (-0.8)     =>  0.8 - 0.6\n * 0.6 - (-0.8)      => 0.6 + 0.8\n * 0.6 - 0.8         => 0.6 - 0.8\n */\nexport function largeNumberSubtract(num1: string, num2: string): string {\n  const isFirstNegative = num1[0] === '-';\n  const isSecondNegative = num2[0] === '-';\n  if (isFirstNegative && !isSecondNegative) {\n    const r = largePositiveNumberAdd(num1.slice(1), num2);\n    return `-${r}`;\n  }\n  if (isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberAdd(num1, num2.slice(1));\n  }\n  return largePositiveNumberSubtract(num1, num2);\n}\n\n/**\n * -0.6 + 0.8        =>  0.8 - 0.6\n * -0.6 + (-0.8)     =>  -(0.6 + 0.8)\n * 0.6 + (-0.8)      => 0.6 - 0.8\n * 0.6 + 0.8         => 0.6 + 0.8\n */\nexport function largeNumberAdd(num1: string, num2: string): string {\n  const isFirstNegative = num1[0] === '-';\n  const isSecondNegative = num2[0] === '-';\n  if (isFirstNegative && !isSecondNegative) {\n    return largePositiveNumberSubtract(num2, num1.slice(1));\n  }\n  if (isFirstNegative && isSecondNegative) {\n    const r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));\n    return `-${r}`;\n  }\n  if (!isFirstNegative && isSecondNegative) {\n    return largePositiveNumberSubtract(num1, num2.slice(1));\n  }\n  return largePositiveNumberAdd(num1, num2);\n}\n\n/**\n * 大数保留 N 位小数（没有精度问题）\n * @param {String} number 大数（只能使用字符串表示）\n * @param {Number} decimalPlaces 保留的小数位数\n * @param {Boolean} largeNumber 是否为大数\n */\nexport function largeNumberToFixed(\n  number: string | number, decimalPlaces: number = 0, largeNumber = true,\n): string {\n  if (!largeNumber) return Number(number).toFixed(decimalPlaces);\n  if (typeof number !== 'string') return String(number);\n  const [num1, num2] = number.split('.');\n  // 如果不存在小数点，则补足位数\n  if (!num2) {\n    return decimalPlaces ? [number, (fillZero(decimalPlaces))].join('.') : number;\n  }\n  // 存在小数点，保留 0 位小数，四舍五入\n  if (decimalPlaces === 0) {\n    return Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, '1') : num1;\n  }\n  // 存在小数点，保留 > 0 位小数，四舍五入（此时，整数位不会发生任何变化，只需关注小数位数）\n  let decimalNumber = num2.slice(0, decimalPlaces);\n  if (num2.length < decimalPlaces) {\n    decimalNumber += (fillZero(decimalPlaces - num2.length));\n  } else {\n    decimalNumber = Number(num2[decimalPlaces]) >= 5\n      ? largePositiveNumberAdd(decimalNumber, '1')\n      : decimalNumber;\n  }\n  return [num1, decimalNumber].join('.');\n}\n\n/**\n * 2e3 => 2000\n * 0.2e3 => 200\n */\nexport function formatENumber(num: string): string {\n  const [num1, num2] = num.split('e');\n  const [integer, initDecimal = ''] = num.split('.');\n  const zeroCount = Number(num2);\n  const [decimal] = initDecimal.split('e');\n  if (zeroCount > decimal.length) {\n    const multipleZero = fillZero(zeroCount - decimal.length);\n    return num1.replace(/(^0+|\\.)/g, '') + multipleZero;\n  }\n  const n1 = integer.replace(/^0+/, '') + decimal.slice(0, zeroCount);\n  const d2 = decimal.slice(zeroCount);\n  return d2 ? [n1, d2].join('.') : n1;\n}\n"],"names":["fillZero","length","Array","fill","join","isInputNumber","num","Number","isNaN","r","test","eCount","negativeCount","dotCount","i","len","removeInvalidZero","decimal","indexOf","log","error","replace","largeIntNumberAdd","num1","num2","number1","number2","isFirstLarger","maxNumber","minNumber","newNumber","step","diff","minIndex","count","unshift","String","concat","slice","largePositiveNumberAdd","split","intNumber1","decimalNumber1","intNumber2","decimalNumber2","integerSum","newDecimalNumber1","newDecimalNumber2","decimalNumberSum","decimalLength","filter","v","compareLargeIntegerNumber","compareLargeDecimalNumber","maxLength","Math","max","compareLargeNumber","integer1","decimal1","integer2","decimal2","result","integer1IsNegative","includes","integer2IsNegative","isInfinity","Infinity","isSafeNumber","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","compareNumber","largeNumber","isSafeNumberCompare","isInfinityCompare","largeIntegerNumberSubtract","p","stayZero","finalNumber","largePositiveNumberSubtract","integerNumber","decimalNumber","addOneNumber","largeNumberSubtract","isFirstNegative","isSecondNegative","largeNumberAdd","largeNumberToFixed","number","decimalPlaces","toFixed","formatENumber","integer","initDecimal","zeroCount","multipleZero","n1","d2"],"mappings":"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"}