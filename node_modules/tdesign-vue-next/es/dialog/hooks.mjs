/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _typeof } from '../_chunks/dep-7071345f.mjs';
import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { getCurrentInstance, createVNode, mergeProps } from 'vue';
import { i as isString_1 } from '../_chunks/dep-2684fd15.mjs';
import { i as isObject_1 } from '../_chunks/dep-d2403b2f.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { Button } from '../button/index.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/render-tnode.mjs';
import '../button/button.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../form/hooks.mjs';
import '../button/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useAction(action) {
  var instance = getCurrentInstance();
  var renderTNodeJSX = useTNodeJSX();

  var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps(options) {
    var globalConfirm = options.globalConfirm,
        theme = options.theme,
        globalConfirmBtnTheme = options.globalConfirmBtnTheme;
    var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
    var props = {
      theme: defaultTheme,
      size: options.size,
      onClick: function onClick(e) {
        action.confirmBtnAction(e);
      }
    };

    if (isString_1(globalConfirm)) {
      props.content = globalConfirm;
    } else if (isObject_1(globalConfirm)) {
      props = _objectSpread(_objectSpread({}, props), globalConfirm);
    }

    return props;
  };

  var getDefaultCancelBtnProps = function getDefaultCancelBtnProps(options) {
    var globalCancel = options.globalCancel;
    var props = {
      theme: "default",
      size: options.size,
      onClick: function onClick(e) {
        action.cancelBtnAction(e);
      }
    };

    if (isString_1(globalCancel)) {
      props.content = globalCancel;
    } else if (isObject_1(globalCancel)) {
      props = _objectSpread(_objectSpread({}, props), globalCancel);
    }

    return props;
  };

  var getButtonByProps = function getButtonByProps(button, defaultButton, className) {
    var newOptions = defaultButton;

    if (isString_1(button)) {
      newOptions.content = button;
    } else if (isObject_1(button)) {
      newOptions = _objectSpread(_objectSpread({}, newOptions), button);
    }

    return createVNode(Button, mergeProps({
      "class": className
    }, newOptions), null);
  };

  var getConfirmBtn = function getConfirmBtn(options) {
    var confirmBtn = options.confirmBtn,
        className = options.className;
    if (confirmBtn === null) return null;

    if (confirmBtn && instance.slots.confirmBtn) {
      console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
    }

    var defaultButtonProps = getDefaultConfirmBtnProps(options);

    if (!confirmBtn && !instance.slots.confirmBtn) {
      return createVNode(Button, mergeProps({
        "class": className
      }, defaultButtonProps), null);
    }

    if (confirmBtn && ["string", "object"].includes(_typeof(confirmBtn))) {
      return getButtonByProps(confirmBtn, defaultButtonProps, className);
    }

    return renderTNodeJSX("confirmBtn");
  };

  var getCancelBtn = function getCancelBtn(options) {
    var cancelBtn = options.cancelBtn,
        className = options.className;
    if (cancelBtn === null) return null;

    if (cancelBtn && instance.slots.cancelBtn) {
      console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
    }

    var defaultButtonProps = getDefaultCancelBtnProps(options);

    if (!cancelBtn && !instance.slots.cancelBtn) {
      return createVNode(Button, mergeProps({
        "class": className
      }, defaultButtonProps), null);
    }

    if (cancelBtn && ["string", "object"].includes(_typeof(cancelBtn))) {
      return getButtonByProps(cancelBtn, defaultButtonProps);
    }

    return renderTNodeJSX("cancelBtn");
  };

  return {
    getConfirmBtn: getConfirmBtn,
    getCancelBtn: getCancelBtn
  };
}

export { useAction };
//# sourceMappingURL=hooks.mjs.map
