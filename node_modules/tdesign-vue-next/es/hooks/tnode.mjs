/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { getCurrentInstance, h } from 'vue';
import { i as isEmpty_1 } from '../_chunks/dep-40522c7c.mjs';
import { i as isFunction_1 } from '../_chunks/dep-0b4185fe.mjs';
import { c as camelCase_1 } from '../_chunks/dep-8e451077.mjs';
import { k as kebabCase_1 } from '../_chunks/dep-baa4f9dc.mjs';
import { getParams, getDefaultNode } from '../utils/render-tnode.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-2684fd15.mjs';

function handleSlots(instance, name, params) {
  var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;

  var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase_1(name)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, params);
  if (node) return node;
  node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase_1(name)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, params);
  if (node) return node;
  return null;
}

var useTNodeJSX = function useTNodeJSX() {
  var instance = getCurrentInstance();
  return function (name, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var propsNode;

    if (Object.keys(instance.props).includes(name)) {
      propsNode = instance.props[name];
    }

    if (propsNode === false) return;

    if (propsNode === true) {
      return handleSlots(instance, name, params) || defaultNode;
    }

    if (isFunction_1(propsNode)) return propsNode(h, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);

    if (isPropsEmpty && (instance.slots[camelCase_1(name)] || instance.slots[kebabCase_1(name)])) {
      return handleSlots(instance, name, params);
    }

    return propsNode;
  };
};
var useTNodeDefault = function useTNodeDefault() {
  var renderTNodeJSX = useTNodeJSX();
  return function (name, options) {
    var defaultNode = getDefaultNode(options);
    return renderTNodeJSX(name, options) || defaultNode;
  };
};
var useContent = function useContent() {
  var renderTNodeJSX = useTNodeJSX();
  return function (name1, name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(name1, toParams);
    var node2 = renderTNodeJSX(name2, toParams);
    var res = isEmpty_1(node1) ? node2 : node1;
    return isEmpty_1(res) ? defaultNode : res;
  };
};

export { useContent, useTNodeDefault, useTNodeJSX };
//# sourceMappingURL=tnode.mjs.map
