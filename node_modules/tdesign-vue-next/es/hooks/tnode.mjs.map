{"version":3,"file":"tnode.mjs","sources":["../../src/hooks/tnode.ts"],"sourcesContent":["import { h, getCurrentInstance, ComponentInternalInstance, VNode } from 'vue';\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport camelCase from 'lodash/camelCase';\nimport kebabCase from 'lodash/kebabCase';\nimport { getDefaultNode, getParams, OptionsType, JSXRenderContext } from '../utils/render-tnode';\n\n// 兼容处理插槽名称，同时支持驼峰命名和中划线命名，示例：value-display 和 valueDisplay\nfunction handleSlots(instance: ComponentInternalInstance, name: string, params: Record<string, any>) {\n  // 检查是否存在 驼峰命名 的插槽\n  let node = instance.slots[camelCase(name)]?.(params);\n  if (node) return node;\n  // 检查是否存在 中划线命名 的插槽\n  node = instance.slots[kebabCase(name)]?.(params);\n  if (node) return node;\n  return null;\n}\n\n/**\n * 通过 JSX 的方式渲染 TNode，props 和 插槽同时处理，也能处理默认值为 true 则渲染默认节点的情况\n * 优先级：Props 大于插槽\n * 如果 props 值为 true ，则使用插槽渲染。如果也没有插槽的情况下，则使用 defaultNode 渲染\n * @example const renderTNodeJSX = useTNodeJSX()\n * @return () => {}\n * @param name 插槽和属性名称\n * @param options 值可能为默认渲染节点，也可能是默认渲染节点和参数的集合\n * @example renderTNodeJSX('closeBtn')  优先级 props function 大于 插槽\n * @example renderTNodeJSX('closeBtn', <close-icon />)。 当属性值为 true 时则渲染 <close-icon />\n * @example renderTNodeJSX('closeBtn', { defaultNode: <close-icon />, params })。 params 为渲染节点时所需的参数\n */\nexport const useTNodeJSX = () => {\n  const instance = getCurrentInstance();\n  return function (name: string, options?: OptionsType) {\n    // assemble params && defaultNode\n    const params = getParams(options);\n    const defaultNode = getDefaultNode(options);\n\n    // 处理 props 类型的Node\n    let propsNode;\n    if (Object.keys(instance.props).includes(name)) {\n      propsNode = instance.props[name];\n    }\n\n    // 是否静默日志\n    // const isSilent = Boolean(isObject(options) && 'silent' in options && options.silent);\n    // // 同名插槽和属性同时存在，则提醒用户只需要选择一种方式即可\n    // if (instance.slots[name] && propsNode && propsNode !== true && !isSilent) {\n    //   log.warn('', `Both slots.${name} and props.${name} exist, props.${name} is preferred`);\n    // }\n    // propsNode 为 false 不渲染\n    if (propsNode === false) return;\n    if (propsNode === true) {\n      return handleSlots(instance, name, params) || defaultNode;\n    }\n\n    // 同名 props 和 slot 优先处理 props\n    if (isFunction(propsNode)) return propsNode(h, params);\n    const isPropsEmpty = [undefined, params, ''].includes(propsNode);\n    if (isPropsEmpty && (instance.slots[camelCase(name)] || instance.slots[kebabCase(name)])) {\n      return handleSlots(instance, name, params);\n    }\n    return propsNode;\n  };\n};\n\n/**\n * 在setup中，通过JSX的方式 TNode，props 和 插槽同时处理。与 renderTNodeJSX 区别在于属性值为 undefined 时会渲染默认节点\n * @example const renderTNodeJSXDefault = useTNodeDefault()\n * @return () => {}\n * @param name 插槽和属性名称\n * @example renderTNodeJSXDefault('closeBtn')\n * @example renderTNodeJSXDefault('closeBtn', <close-icon />) closeBtn 为空时，则兜底渲染 <close-icon />\n * @example renderTNodeJSXDefault('closeBtn', { defaultNode: <close-icon />, params }) 。params 为渲染节点时所需的参数\n */\nexport const useTNodeDefault = () => {\n  const renderTNodeJSX = useTNodeJSX();\n  return function (name: string, options?: VNode | JSXRenderContext) {\n    const defaultNode = getDefaultNode(options);\n    return renderTNodeJSX(name, options) || defaultNode;\n  };\n};\n\n/**\n * 在setup中，用于处理相同名称的 TNode 渲染\n * @example const renderContent = useContent()\n * @return () => {}\n * @param name1 第一个名称，优先级高于 name2\n * @param name2 第二个名称\n * @param defaultNode 默认渲染内容：当 name1 和 name2 都为空时会启动默认内容渲染\n * @example renderContent('default', 'content')\n * @example renderContent('default', 'content', '我是默认内容')\n * @example renderContent('default', 'content', { defaultNode: '我是默认内容', params })\n */\nexport const useContent = () => {\n  const renderTNodeJSX = useTNodeJSX();\n  return function (name1: string, name2: string, options?: VNode | JSXRenderContext) {\n    // assemble params && defaultNode\n    const params = getParams(options);\n    const defaultNode = getDefaultNode(options);\n\n    const toParams = params ? { params } : undefined;\n\n    const node1 = renderTNodeJSX(name1, toParams);\n    const node2 = renderTNodeJSX(name2, toParams);\n\n    const res = isEmpty(node1) ? node2 : node1;\n    return isEmpty(res) ? defaultNode : res;\n  };\n};\n"],"names":["handleSlots","instance","name","params","node","slots","camelCase","kebabCase","useTNodeJSX","getCurrentInstance","options","getParams","defaultNode","getDefaultNode","propsNode","Object","keys","props","includes","isFunction","h","isPropsEmpty","useTNodeDefault","renderTNodeJSX","useContent","name1","name2","toParams","node1","node2","res","isEmpty"],"mappings":"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"}