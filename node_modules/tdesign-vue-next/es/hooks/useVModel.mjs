/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { getCurrentInstance, ref } from 'vue';
import { k as kebabCase_1 } from '../_chunks/dep-baa4f9dc.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-c27b1c14.mjs';

function useVModel(value, modelValue, defaultValue, onChange) {
  var propName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "value";

  var _getCurrentInstance = getCurrentInstance(),
      emit = _getCurrentInstance.emit,
      vnode = _getCurrentInstance.vnode;

  var internalValue = ref();
  var vProps = vnode.props || {};
  var isVM = Object.prototype.hasOwnProperty.call(vProps, "modelValue");
  var isVMP = Object.prototype.hasOwnProperty.call(vProps, propName) || Object.prototype.hasOwnProperty.call(vProps, kebabCase_1(propName));

  if (isVM) {
    return [modelValue, function (newValue) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      vProps["onUpdate:modelValue"] && emit.apply(void 0, ["update:modelValue", newValue].concat(args));
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  if (isVMP) {
    return [value, function (newValue) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      vProps["onUpdate:".concat(propName)] && emit.apply(void 0, ["update:".concat(propName), newValue].concat(args));
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  internalValue.value = defaultValue;
  return [internalValue, function (newValue) {
    internalValue.value = newValue;

    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
  }];
}

export { useVModel as default };
//# sourceMappingURL=useVModel.mjs.map
