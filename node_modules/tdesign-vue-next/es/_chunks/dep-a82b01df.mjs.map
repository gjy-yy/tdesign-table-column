{"version":3,"file":"dep-a82b01df.mjs","sources":["../../node_modules/lodash/_baseToString.js","../../node_modules/lodash/toString.js"],"sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n"],"names":["Symbol","require$$0","arrayMap","require$$1","isArray","require$$2","isSymbol","require$$3","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","_baseToString","toString_1"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,OAAM,GAAGC,SAAb;AAAA,IACIC,QAAQ,GAAGC,SADf;AAAA,IAEIC,OAAO,GAAGC,SAFd;AAAA,IAGIC,QAAQ,GAAGC,UAHf,CAAA;AAKA;;AACA,IAAIC,QAAQ,GAAG,CAAA,GAAI,CAAnB,CAAA;AAEA;;AACA,IAAIC,WAAW,GAAGT,OAAM,GAAGA,OAAM,CAACU,SAAV,GAAsBC,SAA9C;AAAA,IACIC,cAAc,GAAGH,WAAW,GAAGA,WAAW,CAACI,QAAf,GAA0BF,SAD1D,CAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,cAAT,CAAsBC,KAAtB,EAA6B;AAC7B;AACE,EAAA,IAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,IAAA,OAAOA,KAAP,CAAA;AACD,GAAA;;AACD,EAAA,IAAIX,OAAO,CAACW,KAAD,CAAX,EAAoB;AACtB;AACI,IAAA,OAAOb,QAAQ,CAACa,KAAD,EAAQD,cAAR,CAAR,GAAgC,EAAvC,CAAA;AACD,GAAA;;AACD,EAAA,IAAIR,QAAQ,CAACS,KAAD,CAAZ,EAAqB;IACnB,OAAOH,cAAc,GAAGA,cAAc,CAACI,IAAf,CAAoBD,KAApB,CAAH,GAAgC,EAArD,CAAA;AACD,GAAA;;AACD,EAAA,IAAIE,MAAM,GAAIF,KAAK,GAAG,EAAtB,CAAA;AACA,EAAA,OAAQE,MAAM,IAAI,GAAV,IAAkB,CAAIF,GAAAA,KAAL,IAAe,CAACP,QAAlC,GAA8C,IAA9C,GAAqDS,MAA5D,CAAA;AACD,CAAA;;AAEDC,IAAAA,aAAc,GAAGJ;;ACpCjB,IAAIA,YAAY,GAAGb,aAAnB,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASY,QAAT,CAAkBE,KAAlB,EAAyB;EACvB,OAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBD,YAAY,CAACC,KAAD,CAAxC,CAAA;AACD,CAAA;;AAEDI,IAAAA,UAAc,GAAGN;;;;"}