/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-dcf624da.mjs';
import { defineComponent, toRefs, computed, createVNode, mergeProps } from 'vue';
import { InfoCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-vue-next';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { Popup } from '../popup/index.mjs';
import props from './props.mjs';
import { useAction } from '../dialog/hooks.mjs';
import { useTNodeJSX, useTNodeDefault, useContent } from '../hooks/tnode.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../popup/popup.mjs';
import '../_chunks/dep-7071345f.mjs';
import '@popperjs/core';
import '../utils/dom.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../utils/easing.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../_common/js/utils/set-style.mjs';
import '../popup/props.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../form/hooks.mjs';
import '../button/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _Popconfirm = defineComponent({
  name: "TPopconfirm",
  props: props,
  setup: function setup(props2) {
    var _useConfig = useConfig("popconfirm"),
        globalConfig = _useConfig.globalConfig;

    var COMPONENT_NAME = usePrefixClass("popconfirm");

    var _useGlobalIcon = useGlobalIcon({
      InfoCircleFilledIcon: InfoCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
        InfoCircleFilledIcon$1 = _useGlobalIcon.InfoCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

    var _toRefs = toRefs(props2),
        visible = _toRefs.visible,
        modelValue = _toRefs.modelValue;

    var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerVisible = _useVModel2[0],
        setInnerVisible = _useVModel2[1];

    var confirmBtnAction = function confirmBtnAction(e) {
      var _props2$onConfirm;

      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
        e: e
      });
      setInnerVisible(false, {
        e: e
      });
    };

    var cancelBtnAction = function cancelBtnAction(e) {
      var _props2$onCancel;

      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
        e: e
      });
      setInnerVisible(false, {
        e: e
      });
    };

    var _useAction = useAction({
      confirmBtnAction: confirmBtnAction,
      cancelBtnAction: cancelBtnAction
    }),
        getConfirmBtn = _useAction.getConfirmBtn,
        getCancelBtn = _useAction.getCancelBtn;

    var renderTNodeJSX = useTNodeJSX();
    var innerPopupProps = computed(function () {
      return _objectSpread({
        showArrow: props2.showArrow,
        overlayClassName: COMPONENT_NAME.value,
        trigger: "click",
        destroyOnClose: props2.destroyOnClose,
        placement: props2.placement
      }, props2.popupProps);
    });
    var renderTNodeDefault = useTNodeDefault();

    var renderContent = function renderContent() {
      var cancelBtn = getCancelBtn({
        cancelBtn: props2.cancelBtn,
        globalCancel: globalConfig.value.cancel,
        className: "".concat(COMPONENT_NAME.value, "__cancel"),
        size: "small"
      });
      var confirmBtn = getConfirmBtn({
        theme: props2.theme,
        confirmBtn: props2.confirmBtn,
        globalConfirm: globalConfig.value.confirm,
        globalConfirmBtnTheme: globalConfig.value.confirmBtnTheme,
        className: "".concat(COMPONENT_NAME.value, "__confirm"),
        size: "small"
      });

      var renderIcon = function renderIcon() {
        var Icon = {
          "default": InfoCircleFilledIcon$1,
          warning: ErrorCircleFilledIcon$1,
          danger: ErrorCircleFilledIcon$1
        }[props2.theme];
        var theme = props2.theme || "default";
        return renderTNodeDefault("icon", createVNode(Icon, {
          "class": "".concat(COMPONENT_NAME.value, "__icon--").concat(theme)
        }, null));
      };

      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__content")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__body")
      }, [renderIcon(), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner")
      }, [renderTNodeJSX("content")])]), Boolean(cancelBtn || confirmBtn) && createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__buttons")
      }, [cancelBtn, confirmBtn])]);
    };

    var onPopupVisibleChange = function onPopupVisibleChange(val, context) {
      setInnerVisible(val, context);
    };

    var renderTNodeContent = useContent();
    return function () {
      return createVNode(Popup, mergeProps({
        "visible": innerVisible.value
      }, innerPopupProps.value, {
        "onVisibleChange": onPopupVisibleChange
      }), {
        "default": function _default() {
          return [renderTNodeContent("default", "triggerElement")];
        },
        content: renderContent
      });
    };
  }
});

export { _Popconfirm as default };
//# sourceMappingURL=popconfirm.mjs.map
