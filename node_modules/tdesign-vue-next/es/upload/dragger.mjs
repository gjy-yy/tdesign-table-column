/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, ref, computed, createVNode } from 'vue';
import { CheckCircleFilledIcon, ErrorCircleFilledIcon } from 'tdesign-icons-vue-next';
import { Button } from '../button/index.mjs';
import { Loading } from '../loading/index.mjs';
import props from './props.mjs';
import { abridgeName, returnFileSize, getCurrentDate } from './util.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../button/button.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../utils/set-style.mjs';
import '../config-provider/type.mjs';
import '../form/hooks.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../utils/dom.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../utils/easing.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../loading/type.mjs';
import '../button/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Dragger = defineComponent({
  name: "TUploadDragger",
  props: {
    file: {
      type: Object,
      "default": function _default() {
        return null;
      }
    },
    loadingFile: {
      type: Object,
      "default": function _default() {
        return null;
      }
    },
    percent: {
      type: Number
    },
    locale: {
      type: Object,
      "default": function _default() {
        return null;
      }
    },
    autoUpload: props.autoUpload,
    theme: props.theme,
    onCancel: Function,
    onClick: Function,
    onRemove: Function,
    onUpload: Function,
    onChange: Function,
    onDragleave: Function,
    onDragenter: Function
  },
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();
    var target = ref(null);
    var dragActive = ref(false);

    var _useConfig = useConfig("upload"),
        globalConfig = _useConfig.globalConfig;

    var UPLOAD_NAME = usePrefixClass("upload");

    var _useGlobalIcon = useGlobalIcon({
      CheckCircleFilledIcon: CheckCircleFilledIcon,
      ErrorCircleFilledIcon: ErrorCircleFilledIcon
    }),
        CheckCircleFilledIcon$1 = _useGlobalIcon.CheckCircleFilledIcon,
        ErrorCircleFilledIcon$1 = _useGlobalIcon.ErrorCircleFilledIcon;

    var _useCommonClassName = useCommonClassName(),
        SIZE = _useCommonClassName.SIZE;

    var imageUrl = computed(function () {
      return props2.loadingFile && props2.loadingFile.url || props2.file && props2.file.url;
    });
    var inputName = computed(function () {
      return props2.loadingFile && props2.loadingFile.name || props2.file && props2.file.name || "";
    });
    var classes = computed(function () {
      return ["".concat(UPLOAD_NAME.value, "__dragger"), _defineProperty({}, "".concat(UPLOAD_NAME.value, "__dragger-center"), !props2.loadingFile && !props2.file), _defineProperty({}, "".concat(UPLOAD_NAME.value, "__dragger-error"), props2.loadingFile && props2.loadingFile.status === "fail")];
    });
    var size = computed(function () {
      return props2.loadingFile && props2.loadingFile.size || props2.file && props2.file.size;
    });
    var showResultOperate = computed(function () {
      var _props2$file, _props2$loadingFile;

      return Boolean(!props2.loadingFile && ((_props2$file = props2.file) === null || _props2$file === void 0 ? void 0 : _props2$file.name)) || ["success", "fail"].includes((_props2$loadingFile = props2.loadingFile) === null || _props2$loadingFile === void 0 ? void 0 : _props2$loadingFile.status);
    });

    var handleDrop = function handleDrop(event) {
      var _props2$onChange, _props2$onDragleave;

      event.preventDefault();
      (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, event.dataTransfer.files);
      (_props2$onDragleave = props2.onDragleave) === null || _props2$onDragleave === void 0 ? void 0 : _props2$onDragleave.call(props2, event);
      dragActive.value = false;
    };

    var handleDragenter = function handleDragenter(event) {
      var _props2$onDragenter;

      event.preventDefault();
      target.value = event.target;
      (_props2$onDragenter = props2.onDragenter) === null || _props2$onDragenter === void 0 ? void 0 : _props2$onDragenter.call(props2, event);
      dragActive.value = true;
    };

    var handleDragleave = function handleDragleave(event) {
      var _props2$onDragleave2;

      if (target.value !== event.target) return;
      event.preventDefault();
      (_props2$onDragleave2 = props2.onDragleave) === null || _props2$onDragleave2 === void 0 ? void 0 : _props2$onDragleave2.call(props2, event);
      dragActive.value = false;
    };

    var renderImage = function renderImage() {
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-img-wrap")
      }, [imageUrl.value && createVNode("img", {
        "src": imageUrl.value
      }, null)]);
    };

    var renderUploading = function renderUploading() {
      if (props2.loadingFile.status === "fail") return createVNode(ErrorCircleFilledIcon$1, null, null);

      if (props2.loadingFile.status === "progress") {
        return createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-progress")
        }, [createVNode(Loading, null, null), createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-percent")
        }, [Math.min(props2.percent, 99), "%"])]);
      }
    };

    var renderProgress = function renderProgress() {
      var _props2$loadingFile2, _props2$locale, _props2$loadingFile3, _props2$locale2, _props2$locale2$trigg, _props2$locale3, _props2$locale3$trigg, _props2$locale4, _props2$locale4$trigg;

      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress")
      }, [props2.theme === "image" && renderImage(), createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-info")
      }, [createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-text")
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-name")
      }, [abridgeName(inputName.value)]), props2.loadingFile && renderUploading(), !props2.loadingFile && !!props2.file && createVNode(CheckCircleFilledIcon$1, null, null)]), createVNode("small", {
        "class": "".concat(SIZE.value.small)
      }, [globalConfig.value.file.fileSizeText, "\uFF1A", returnFileSize(size.value)]), createVNode("small", {
        "class": "".concat(SIZE.value.small)
      }, [globalConfig.value.file.fileOperationDateText, "\uFF1A", getCurrentDate()]), createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
      }, [["progress", "waiting"].includes((_props2$loadingFile2 = props2.loadingFile) === null || _props2$loadingFile2 === void 0 ? void 0 : _props2$loadingFile2.status) && createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
        "onClick": props2.onCancel
      }, {
        "default": function _default() {
          return [((_props2$locale = props2.locale) === null || _props2$locale === void 0 ? void 0 : _props2$locale.cancelUploadText) || globalConfig.value.cancelUploadText];
        }
      }), !props2.autoUpload && ((_props2$loadingFile3 = props2.loadingFile) === null || _props2$loadingFile3 === void 0 ? void 0 : _props2$loadingFile3.status) === "waiting" && createVNode(Button, {
        "variant": "text",
        "theme": "primary",
        "onClick": function onClick(e) {
          return props2.onUpload(_objectSpread({}, props2.loadingFile), e);
        }
      }, {
        "default": function _default() {
          return [((_props2$locale2 = props2.locale) === null || _props2$locale2 === void 0 ? void 0 : (_props2$locale2$trigg = _props2$locale2.triggerUploadText) === null || _props2$locale2$trigg === void 0 ? void 0 : _props2$locale2$trigg.normal) || globalConfig.value.triggerUploadText.normal];
        }
      })]), showResultOperate.value && createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
      }, [createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
        "onClick": function onClick(e) {
          props2.onRemove(e);
          props2.onClick(e);
        }
      }, {
        "default": function _default() {
          return [((_props2$locale3 = props2.locale) === null || _props2$locale3 === void 0 ? void 0 : (_props2$locale3$trigg = _props2$locale3.triggerUploadText) === null || _props2$locale3$trigg === void 0 ? void 0 : _props2$locale3$trigg.reupload) || globalConfig.value.triggerUploadText.reupload];
        }
      }), createVNode(Button, {
        "theme": "danger",
        "variant": "text",
        "onClick": props2.onRemove
      }, {
        "default": function _default() {
          return [((_props2$locale4 = props2.locale) === null || _props2$locale4 === void 0 ? void 0 : (_props2$locale4$trigg = _props2$locale4.triggerUploadText) === null || _props2$locale4$trigg === void 0 ? void 0 : _props2$locale4$trigg["delete"]) || globalConfig.value.triggerUploadText["delete"]];
        }
      })])])]);
    };

    var renderDefaultDragElement = function renderDefaultDragElement() {
      var _props2$locale5, _props2$locale5$trigg;

      var unActiveElement = createVNode("div", null, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "--highlight")
      }, [((_props2$locale5 = props2.locale) === null || _props2$locale5 === void 0 ? void 0 : (_props2$locale5$trigg = _props2$locale5.triggerUploadText) === null || _props2$locale5$trigg === void 0 ? void 0 : _props2$locale5$trigg.normal) || globalConfig.value.triggerUploadText.normal]), createVNode("span", null, ["\xA0\xA0/\xA0\xA0", globalConfig.value.dragger.draggingText])]);

      var activeElement = createVNode("div", null, [globalConfig.value.dragger.dragDropText]);

      return dragActive.value ? activeElement : unActiveElement;
    };

    return function () {
      var content = null;

      if ((props2.loadingFile || props2.file) && props2.theme !== "custom") {
        content = renderProgress();
      } else {
        content = createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__trigger"),
          "onClick": props2.onClick
        }, [renderTNodeJSX("default") || renderDefaultDragElement()]);
      }

      return createVNode("div", {
        "class": classes.value,
        "onDrop": handleDrop,
        "onDragenter": handleDragenter,
        "onDragleave": handleDragleave,
        "onDragover": function onDragover(event) {
          event.preventDefault();
        }
      }, [content]);
    };
  }
});

export { Dragger as default };
//# sourceMappingURL=dragger.mjs.map
