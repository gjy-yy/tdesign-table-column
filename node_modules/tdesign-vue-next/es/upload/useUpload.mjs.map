{"version":3,"file":"useUpload.mjs","sources":["../../node_modules/lodash/without.js","../../src/upload/useUpload.tsx"],"sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `_.pull`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.difference, _.xor\n * @example\n *\n * _.without([2, 1, 2, 3], 1, 2);\n * // => [3]\n */\nvar without = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, values)\n    : [];\n});\n\nmodule.exports = without;\n","import { ref } from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport without from 'lodash/without';\nimport { TdUploadProps, UploadFile, RequestMethodResponse, SizeLimitObj } from './type';\nimport { SuccessContext, InnerProgressContext, UploadCtxType } from './interface';\n\nimport { useConfig } from '../hooks/useConfig';\n\nimport { isOverSizeLimit } from './util';\nimport xhr from '../_common/js/upload/xhr';\nimport log from '../_common/js/log/index';\n\nexport const useUploadProgress = (props: TdUploadProps, uploadCtx: UploadCtxType) => {\n  const handleProgress = ({ event, file, files: currentFiles, percent, type = 'real' }: InnerProgressContext) => {\n    const innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];\n    if (innerFiles?.length <= 0) return log.error('Uploader', 'Progress Error files');\n\n    innerFiles.forEach((file) => {\n      file.percent = Math.min(percent, 100);\n      uploadCtx.loadingFile = file;\n      uploadCtx.percent = file.percent;\n    });\n\n    const progressCtx = {\n      percent,\n      e: event,\n      file,\n      type,\n      currentFiles: innerFiles,\n    };\n    props.onProgress?.(progressCtx);\n  };\n\n  const onError = (options: {\n    event?: ProgressEvent;\n    file: UploadFile;\n    files: UploadFile[];\n    response?: any;\n    resFormatted?: boolean;\n  }) => {\n    const { event, file, files, response, resFormatted } = options;\n    const innerFiles = Array.isArray(files) ? files : [file];\n\n    innerFiles.forEach((file) => {\n      file.status = 'fail';\n      uploadCtx.loadingFile = file;\n    });\n\n    let res = response;\n    if (!resFormatted && typeof props.formatResponse === 'function') {\n      res = props.formatResponse(response, { file, currentFiles: files });\n    }\n    uploadCtx.errorMsg = res?.error;\n    const context = { e: event, file: uploadCtx.uploadInOneRequest ? null : innerFiles[0], currentFiles: innerFiles };\n    props.onFail?.(context);\n    uploadCtx.loadingFile = null;\n  };\n\n  const handleSuccess = ({ event, file, files: currentFiles, response }: SuccessContext) => {\n    const innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];\n    if (innerFiles?.length <= 0) return log.error('Uploader', 'success no files');\n\n    innerFiles.forEach((file) => {\n      file.status = 'success';\n    });\n\n    let res = response;\n    if (typeof props.formatResponse === 'function') {\n      res = props.formatResponse(response, {\n        file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],\n        currentFiles: innerFiles,\n      });\n    }\n    // 如果返回值存在 error，则认为当前接口上传失败\n    if (res?.error) {\n      onError({\n        event,\n        file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],\n        files: innerFiles,\n        response: res,\n        resFormatted: true,\n      });\n      return;\n    }\n    if (!uploadCtx.uploadInOneRequest) {\n      innerFiles[0].url = res.url || innerFiles[0].url;\n    }\n\n    uploadCtx.toUploadFiles = without(uploadCtx.toUploadFiles, ...innerFiles);\n\n    // 上传成功的文件发送到 files\n    const newFiles = innerFiles.map((file) => ({ ...file, response: res }));\n    const uploadedFiles = props.multiple ? uploadCtx.uploadValue.concat(newFiles) : newFiles;\n    const context = { e: event, response: res, trigger: 'upload-success' };\n    // 更新数据\n    uploadCtx.setUploadValue(uploadedFiles, context);\n\n    const sContext = {\n      file: uploadCtx.uploadInOneRequest ? null : newFiles[0],\n      fileList: uploadedFiles,\n      currentFiles: newFiles,\n      e: event,\n      response: res,\n    };\n    props.onSuccess?.(sContext);\n    uploadCtx.loadingFile = null;\n  };\n\n  const handleMockProgress = (files: UploadFile[]) => {\n    const timer = setInterval(() => {\n      files.forEach((file) => {\n        if (file.status === 'success' || file.percent >= 99) {\n          clearInterval(timer);\n          return;\n        }\n        file.percent += 1;\n      });\n      const { percent } = files[0];\n      handleProgress({\n        files,\n        percent,\n        type: 'mock',\n      });\n    }, 10);\n  };\n\n  return {\n    handleProgress,\n    handleMockProgress,\n    handleSuccess,\n    onError,\n  };\n};\n\nexport const useUpload = (props: TdUploadProps, uploadCtx: UploadCtxType) => {\n  const xhrReq = ref<XMLHttpRequest>(null);\n  const { globalConfig, t } = useConfig('upload');\n  // 上传状态\n  const { handleProgress, handleMockProgress, handleSuccess, onError } = useUploadProgress(props, uploadCtx);\n\n  const handleSizeLimit = (fileSize: number) => {\n    const sizeLimit: SizeLimitObj =\n      typeof props.sizeLimit === 'number' ? { size: props.sizeLimit, unit: 'KB' } : props.sizeLimit;\n\n    const rSize = isOverSizeLimit(fileSize / 1024, sizeLimit.size, sizeLimit.unit);\n    if (!rSize) {\n      // 有参数 message 则使用，没有就使用全局 locale 配置\n      uploadCtx.errorMsg = sizeLimit.message\n        ? t(sizeLimit.message, { sizeLimit: sizeLimit.size })\n        : `${t(globalConfig.value.sizeLimitMessage, { sizeLimit: sizeLimit.size })} ${sizeLimit.unit}`;\n    }\n    return rSize;\n  };\n\n  const handleBeforeUpload = (file: File | UploadFile): Promise<boolean> => {\n    uploadCtx.errorMsg = '';\n    if (typeof props.beforeUpload === 'function') {\n      const r = props.beforeUpload(file);\n      if (r instanceof Promise) return r;\n      // eslint-disable-next-line no-promise-executor-return\n      return new Promise((resolve) => resolve(r));\n    }\n    return new Promise((resolve) => {\n      if (props.sizeLimit) {\n        resolve(handleSizeLimit(file.size));\n      }\n      resolve(true);\n    });\n  };\n\n  const handleRequestMethodResponse = (res: RequestMethodResponse) => {\n    if (!res) {\n      log.error('Upload', '`requestMethodResponse` is required.');\n      return false;\n    }\n    if (!res.status) {\n      log.error('Upload', '`requestMethodResponse.status` is missing, which value is `success` or `fail`');\n      return false;\n    }\n    if (!['success', 'fail'].includes(res.status)) {\n      log.error('Upload', '`requestMethodResponse.status` must be `success` or `fail`');\n      return false;\n    }\n    if (res.status === 'success' && (!res.response || !res.response.url)) {\n      log.warn('Upload', '`requestMethodResponse.response.url` is required, when `status` is `success`');\n    }\n    return true;\n  };\n\n  const handleRequestMethod = (files: UploadFile[]) => {\n    if (!isFunction(props.requestMethod)) {\n      log.warn('Upload', '`requestMethod` must be a function.');\n      return;\n    }\n    // requestMethod first argument can be file or currentFiles\n    const requestMethodParam = uploadCtx.uploadInOneRequest ? files : files[0];\n\n    props.requestMethod(requestMethodParam).then((res: RequestMethodResponse) => {\n      if (!handleRequestMethodResponse(res)) return;\n      if (res.status === 'success') {\n        handleSuccess({ files, response: res.response });\n      } else if (res.status === 'fail') {\n        const r = res.response || {};\n        onError({\n          event: null,\n          file: uploadCtx.uploadInOneRequest ? null : files[0],\n          files,\n          response: { ...r, error: res.error },\n        });\n      }\n    });\n  };\n\n  const upload = async (currentFiles: UploadFile | UploadFile[]): Promise<void> => {\n    const innerFiles = Array.isArray(currentFiles) ? currentFiles : [currentFiles];\n    if (!props.action && !props.requestMethod) {\n      log.error('Upload', 'one of action and requestMethod must be exist.');\n      return;\n    }\n    innerFiles.forEach((file) => {\n      file.status = 'progress';\n      uploadCtx.loadingFile = file;\n    });\n\n    // requestMethod 为父组件定义的自定义上传方法\n    if (props.requestMethod) {\n      handleRequestMethod(innerFiles);\n    } else {\n      // 模拟进度条\n      if (props.useMockProgress) {\n        handleMockProgress(innerFiles);\n      }\n      const request = xhr;\n      xhrReq.value = request({\n        action: props.action,\n        data: props.data,\n        files: innerFiles,\n        name: props.name,\n        headers: props.headers,\n        withCredentials: props.withCredentials,\n        onError,\n        onProgress: handleProgress,\n        onSuccess: handleSuccess,\n        method: props.method,\n      });\n    }\n  };\n\n  const uploadFiles = (files: FileList) => {\n    // 合并上传前则需要清空已上传列表\n    if (uploadCtx.canBatchUpload && uploadCtx.uploadValue?.length > 0) {\n      const context = { trigger: 'batch-clear' };\n      uploadCtx.setUploadValue([], context);\n    }\n\n    props.onSelectChange?.([...files]);\n\n    let tmpFiles = [...files];\n    if (props.max) {\n      tmpFiles = tmpFiles.slice(0, props.max - uploadCtx.uploadValue.length);\n      if (tmpFiles.length !== files.length) {\n        console.warn(`TDesign Upload Warn: you can only upload ${props.max} files`);\n      }\n    }\n\n    tmpFiles.forEach((fileRaw: File) => {\n      let file: UploadFile | File = fileRaw;\n      if (typeof props.format === 'function') {\n        file = props.format(fileRaw);\n      }\n      const uploadFile: UploadFile = {\n        raw: fileRaw,\n        lastModified: fileRaw.lastModified,\n        name: fileRaw.name,\n        size: fileRaw.size,\n        type: fileRaw.type,\n        percent: 0,\n        status: 'waiting',\n        ...file,\n      };\n\n      const reader = new FileReader();\n      reader.readAsDataURL(fileRaw);\n      reader.onload = (event: ProgressEvent<FileReader>) => {\n        uploadFile.url = event.target.result as string;\n      };\n      handleBeforeUpload(file).then((canUpload) => {\n        if (!canUpload) return;\n        const newFiles = uploadCtx.toUploadFiles.concat();\n        // 判断是否为重复文件条件，已选是否存在检验\n        if (props.allowUploadDuplicateFile || !uploadCtx.toUploadFiles.find((file) => file.name === uploadFile.name)) {\n          newFiles.push(uploadFile);\n        }\n        uploadCtx.toUploadFiles = [...new Set(newFiles)];\n        uploadCtx.loadingFile = uploadFile;\n        if (props.autoUpload) {\n          upload(uploadFile);\n        }\n      });\n    });\n  };\n\n  return {\n    uploadFiles,\n    upload,\n    xhrReq,\n  };\n};\n"],"names":["baseDifference","require$$0","baseRest","require$$1","isArrayLikeObject","require$$2","without","array","values","without_1","useUploadProgress","props","uploadCtx","handleProgress","event","file","currentFiles","files","percent","type","innerFiles","Array","isArray","length","log","error","forEach","Math","min","loadingFile","progressCtx","e","onProgress","onError","options","response","resFormatted","status","res","formatResponse","errorMsg","context","uploadInOneRequest","onFail","handleSuccess","url","toUploadFiles","newFiles","map","uploadedFiles","multiple","uploadValue","concat","trigger","setUploadValue","sContext","fileList","onSuccess","handleMockProgress","timer","setInterval","clearInterval","useUpload","xhrReq","ref","useConfig","globalConfig","t","handleSizeLimit","fileSize","sizeLimit","size","unit","rSize","isOverSizeLimit","message","value","sizeLimitMessage","handleBeforeUpload","beforeUpload","r","Promise","resolve","handleRequestMethodResponse","includes","warn","handleRequestMethod","isFunction","requestMethod","requestMethodParam","then","upload","_regeneratorRuntime","action","useMockProgress","request","xhr","data","name","headers","withCredentials","method","uploadFiles","canBatchUpload","onSelectChange","tmpFiles","max","slice","console","fileRaw","format","uploadFile","raw","lastModified","reader","FileReader","readAsDataURL","onload","target","result","canUpload","allowUploadDuplicateFile","find","push","Set","autoUpload"],"mappings":"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"}