/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-0b4c3c44.mjs';
import { ref, computed, createVNode, watchEffect } from 'vue';
import { CalendarIcon } from 'tdesign-icons-vue-next';
import { d as dayjs } from '../../_chunks/dep-f362c0f2.mjs';
import { useFormDisabled } from '../../form/hooks.mjs';
import { usePrefixClass } from '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import { getDefaultFormat, formatDate, isValidDate, formatTime } from '../../_common/js/date-picker/format.mjs';
import useSingleValue from './useSingleValue.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../_common/js/date-picker/utils.mjs';
import '../../_chunks/dep-dcf624da.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../_chunks/dep-faa6c58f.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../_chunks/dep-3568c22b.mjs';
import '../../_chunks/dep-050b3eb2.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-baa4f9dc.mjs';
import '../../_chunks/dep-db11154e.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-192e10f1.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useSingle(props) {
  var COMPONENT_NAME = usePrefixClass("date-picker");

  var _useConfig = useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;

  var _useGlobalIcon = useGlobalIcon({
    CalendarIcon: CalendarIcon
  }),
      CalendarIcon$1 = _useGlobalIcon.CalendarIcon;

  var disabled = useFormDisabled();
  var inputRef = ref();

  var _useSingleValue = useSingleValue(props),
      value = _useSingleValue.value,
      onChange = _useSingleValue.onChange,
      time = _useSingleValue.time,
      month = _useSingleValue.month,
      year = _useSingleValue.year,
      cacheValue = _useSingleValue.cacheValue;

  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    });
  });
  var popupVisible = ref(false);
  var isHoverCell = ref(false);
  var inputValue = ref(formatDate(value.value, {
    format: formatRef.value.format,
    targetFormat: formatRef.value.format
  }));
  var inputProps = computed(function () {
    return _objectSpread(_objectSpread({}, props.inputProps), {}, {
      ref: inputRef,
      prefixIcon: props.prefixIcon,
      readonly: !props.allowInput,
      placeholder: props.placeholder || globalConfig.value.placeholder[props.mode],
      suffixIcon: props.suffixIcon || function () {
        return createVNode(CalendarIcon$1, null, null);
      },
      "class": [_defineProperty({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value)],
      onClear: function onClear(context) {
        var _context$e;

        context === null || context === void 0 ? void 0 : (_context$e = context.e) === null || _context$e === void 0 ? void 0 : _context$e.stopPropagation();
        popupVisible.value = false;
        onChange === null || onChange === void 0 ? void 0 : onChange("", {
          dayjsValue: dayjs(""),
          trigger: "clear"
        });
      },
      onBlur: function onBlur(val, context) {
        var _props$onBlur;

        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
          value: val,
          e: context.e
        });
      },
      onFocus: function onFocus(_, _ref2) {
        var _props$onFocus;

        var e = _ref2.e;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
          value: value.value,
          e: e
        });
      },
      onChange: function onChange(val) {
        inputValue.value = val;
        if (!isValidDate(val, formatRef.value.format)) return;
        var newMonth = dayjs(val).month();
        var newYear = dayjs(val).year();
        var newTime = formatTime(val, formatRef.value.timeFormat);
        !Number.isNaN(newYear) && (year.value = newYear);
        !Number.isNaN(newMonth) && (month.value = newMonth);
        !Number.isNaN(newTime) && (time.value = newTime);
      },
      onEnter: function onEnter(val) {
        if (!isValidDate(val, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
        popupVisible.value = false;

        if (isValidDate(val, formatRef.value.format)) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(val, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: dayjs(val),
            trigger: "enter"
          });
        } else if (isValidDate(value.value, formatRef.value.format)) {
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.format
          });
        } else {
          inputValue.value = "";
        }
      }
    });
  });
  var popupProps = computed(function () {
    var _props$popupProps$ove, _props$popupProps, _props$popupProps2;

    return _objectSpread(_objectSpread({
      expandAnimation: true
    }, props.popupProps), {}, {
      disabled: disabled.value,
      overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
        width: "auto"
      },
      overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
      onVisibleChange: function onVisibleChange(visible, context) {
        if (disabled.value) return;

        if (context.trigger === "trigger-element-click") {
          popupVisible.value = true;
          return;
        }

        if (!visible) {
          isHoverCell.value = false;
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.format
          });
        }

        popupVisible.value = visible;
      }
    });
  });
  watchEffect(function () {
    if (!value.value) {
      inputValue.value = "";
      return;
    }

    if (!isValidDate(value.value, formatRef.value.valueType)) return;
    inputValue.value = formatDate(value.value, {
      format: formatRef.value.format,
      targetFormat: formatRef.value.format
    });
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    inputValue: inputValue,
    popupVisible: popupVisible,
    inputProps: inputProps,
    popupProps: popupProps,
    inputRef: inputRef,
    cacheValue: cacheValue,
    isHoverCell: isHoverCell,
    onChange: onChange
  };
}

export { useSingle as default };
//# sourceMappingURL=useSingle.mjs.map
