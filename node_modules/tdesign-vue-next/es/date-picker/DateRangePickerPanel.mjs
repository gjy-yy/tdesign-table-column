/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-8c39d78a.mjs';
import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, computed, ref, createVNode } from 'vue';
import { d as dayjs } from '../_chunks/dep-f362c0f2.mjs';
import dateRangePickerPanelProps from './date-range-picker-panel-props.mjs';
import dateRangePickerProps from './date-range-picker-props.mjs';
import TRangePanel from './panel/RangePanel.mjs';
import useRangeValue from './hooks/useRangeValue.mjs';
import { getDefaultFormat, formatDate } from '../_common/js/date-picker/format.mjs';
import { subtractMonth, addMonth, extractTimeObj } from '../_common/js/date-picker/utils.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../hooks/useConfig.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import './panel/PanelContent.mjs';
import './base/Header.mjs';
import '../jumper/index.mjs';
import '../jumper/jumper.mjs';
import 'tdesign-icons-vue-next';
import '../jumper/props.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../utils/dom.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../utils/easing.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../form/hooks.mjs';
import '../hooks/tnode.mjs';
import '../button/type.mjs';
import '../jumper/type.mjs';
import '../select/select.mjs';
import '../_chunks/dep-32e8a48d.mjs';
import '../_chunks/dep-0c515b62.mjs';
import '../_chunks/dep-759eacca.mjs';
import '../_chunks/dep-544fb8fd.mjs';
import '../_chunks/dep-72359af2.mjs';
import '../_chunks/dep-ad0cc3b4.mjs';
import '../_chunks/dep-241fdd8c.mjs';
import '../_chunks/dep-050b3eb2.mjs';
import '../_chunks/dep-ef911020.mjs';
import '../_chunks/dep-efb50e88.mjs';
import '../_chunks/dep-10db0930.mjs';
import '../_chunks/dep-6d14fb16.mjs';
import 'lodash';
import '../common-components/fake-arrow.mjs';
import '../select-input/index.mjs';
import '../select-input/select-input.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../popup/props.mjs';
import '../popup/container.mjs';
import '../hooks/useVModel.mjs';
import '../popup/type.mjs';
import '../select-input/props.mjs';
import '../select-input/useSingle.mjs';
import '../input/index.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../input/useInput.mjs';
import '../utils/helper.mjs';
import '../form/const.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../input/input-group.mjs';
import '../input/type.mjs';
import '../select-input/useMultiple.mjs';
import '../tag-input/index.mjs';
import '../tag-input/tag-input.mjs';
import '../tag-input/props.mjs';
import '../tag-input/hooks/useTagScroll.mjs';
import '../tag-input/useTagList.mjs';
import '../tag/index.mjs';
import '../tag/tag.mjs';
import '../tag/props.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../tag/type.mjs';
import '../tag-input/hooks/useHover.mjs';
import '../tag-input/hooks/useDragSorter.mjs';
import '../tag-input/type.mjs';
import '../select-input/useOverlayInnerStyle.mjs';
import '../select-input/type.mjs';
import '../select/select-panel.mjs';
import '../_chunks/dep-f1423dd2.mjs';
import '../select/option.mjs';
import '../select/option-props.mjs';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-2ca0e5ff.mjs';
import '../_chunks/dep-c5bb3a66.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/type.mjs';
import '../select/helper.mjs';
import '../select/optionGroup.mjs';
import '../select/option-group-props.mjs';
import '../select/props.mjs';
import '../select/hooks/usePanelVirtualScroll.mjs';
import '../select/hooks/useSelectOptions.mjs';
import './base/Table.mjs';
import './base/Cell.mjs';
import '../time-picker/panel/time-picker-panel.mjs';
import '../_chunks/dep-faa6c58f.mjs';
import '../_common/js/time-picker/const.mjs';
import '../time-picker/panel/props.mjs';
import '../time-picker/props.mjs';
import '../time-picker/panel/single-panel.mjs';
import '../_chunks/dep-3568c22b.mjs';
import '../_chunks/dep-a25f46ac.mjs';
import '../_common/js/time-picker/utils.mjs';
import './panel/ExtraContent.mjs';
import './base/Footer.mjs';
import './hooks/useTableData.mjs';
import './hooks/useDisableDate.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _DateRangePickerPanel = defineComponent({
  name: "TDateRangePickerPanel",
  props: _objectSpread({
    value: dateRangePickerProps.value,
    defaultValue: dateRangePickerProps.defaultValue,
    modelValue: dateRangePickerProps.modelValue,
    valueType: dateRangePickerProps.valueType,
    disabled: dateRangePickerProps.disabled,
    disableDate: dateRangePickerProps.disableDate,
    enableTimePicker: dateRangePickerProps.enableTimePicker,
    firstDayOfWeek: dateRangePickerProps.firstDayOfWeek,
    format: dateRangePickerProps.format,
    mode: dateRangePickerProps.mode,
    presets: dateRangePickerProps.presets,
    presetsPlacement: dateRangePickerProps.presetsPlacement,
    timePickerProps: dateRangePickerProps.timePickerProps,
    panelPreselection: dateRangePickerProps.panelPreselection
  }, dateRangePickerPanelProps),
  setup: function setup(props) {
    var _useRangeValue = useRangeValue(props),
        value = _useRangeValue.value,
        year = _useRangeValue.year,
        month = _useRangeValue.month,
        time = _useRangeValue.time,
        cacheValue = _useRangeValue.cacheValue,
        isFirstValueSelected = _useRangeValue.isFirstValueSelected,
        onChange = _useRangeValue.onChange;

    var formatRef = computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        enableTimePicker: props.enableTimePicker,
        format: props.format,
        valueType: props.valueType
      });
    });
    var isSelected = ref(false);
    var isHoverCell = ref(false);
    var hoverValue = ref([]);
    var activeIndex = computed(function () {
      return isFirstValueSelected.value ? 1 : 0;
    });

    function onCellMouseEnter(date) {
      isHoverCell.value = true;

      var nextValue = _toConsumableArray(hoverValue.value);

      nextValue[activeIndex.value] = formatDate(date, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
      hoverValue.value = nextValue;
    }

    function onCellMouseLeave() {
      isHoverCell.value = false;
      hoverValue.value = cacheValue.value;
    }

    function onCellClick(date, _ref) {
      var _props$onCellClick;

      var e = _ref.e;
      (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
        e: e,
        partial: activeIndex.value ? "end" : "start",
        date: value.value.map(function (v) {
          return dayjs(v).toDate();
        })
      });
      isHoverCell.value = false;
      isSelected.value = true;

      var nextValue = _toConsumableArray(cacheValue.value);

      nextValue[activeIndex.value] = formatDate(date, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
      cacheValue.value = nextValue;
      if (props.enableTimePicker) return;

      if (nextValue.length === 2 && isFirstValueSelected.value) {
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return dayjs(v);
          }),
          trigger: "pick"
        });
        isFirstValueSelected.value = false;
      } else {
        isFirstValueSelected.value = true;
      }
    }

    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger,
          partial = _ref2.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      var triggerMap = {
        prev: "arrow-previous",
        next: "arrow-next"
      };
      var monthCountMap = {
        date: 1,
        month: 12,
        year: 120
      };
      var monthCount = monthCountMap[props.mode] || 0;
      var current = new Date(year.value[partialIndex], month.value[partialIndex]);
      var next = null;

      if (trigger === "prev") {
        next = subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = addMonth(current, monthCount);
      }

      var nextYear = _toConsumableArray(year.value);

      nextYear[partialIndex] = next.getFullYear();

      var nextMonth = _toConsumableArray(month.value);

      nextMonth[partialIndex] = next.getMonth();

      if (partialIndex === 0) {
        nextYear[1] = Math.max(nextYear[0], nextYear[1]);

        if (nextYear[0] === nextYear[1]) {
          nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
        }
      }

      if (partialIndex === 1) {
        nextYear[0] = Math.min(nextYear[0], nextYear[1]);

        if (nextYear[0] === nextYear[1]) {
          nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }
      }

      if (year.value.some(function (y) {
        return !nextYear.includes(y);
      })) {
        var _props$onYearChange;

        (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
        });
      }

      if (month.value.some(function (m) {
        return !nextMonth.includes(m);
      })) {
        var _props$onMonthChange;

        (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.value.map(function (v) {
            return dayjs(v).toDate();
          }),
          trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
        });
      }

      year.value = nextYear;
      month.value = nextMonth;
    }

    function onTimePickerChange(val) {
      var _props$onTimeChange;

      var _extractTimeObj = extractTimeObj(val),
          hours = _extractTimeObj.hours,
          minutes = _extractTimeObj.minutes,
          seconds = _extractTimeObj.seconds,
          milliseconds = _extractTimeObj.milliseconds,
          meridiem = _extractTimeObj.meridiem;

      var nextInputValue = _toConsumableArray(cacheValue.value);

      var changedInputValue = cacheValue.value[activeIndex.value];
      var currentDate = !dayjs(changedInputValue, formatRef.value.format).isValid() ? dayjs().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs(changedInputValue, formatRef.value.format);
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      nextInputValue[activeIndex.value] = nextDate;

      var nextTime = _toConsumableArray(time.value);

      nextTime[activeIndex.value] = val;
      time.value = nextTime;
      isSelected.value = true;
      cacheValue.value = formatDate(nextInputValue, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
      (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
        time: val,
        date: value.value.map(function (v) {
          return dayjs(v).toDate();
        }),
        partial: activeIndex.value ? "end" : "start",
        trigger: "time-hour"
      });
    }

    function onConfirmClick(_ref3) {
      var _props$onConfirm;

      var e = _ref3.e;

      var nextValue = _toConsumableArray(cacheValue.value);

      if (nextValue.length === 2 && isFirstValueSelected.value) {
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: nextValue.map(function (v) {
            return dayjs(v);
          }),
          trigger: "confirm"
        });
        year.value = nextValue.map(function (v) {
          return dayjs(v, formatRef.value.format).year();
        });
        month.value = nextValue.map(function (v) {
          return dayjs(v, formatRef.value.format).month();
        });
        isFirstValueSelected.value = false;
      } else {
        isFirstValueSelected.value = true;
      }

      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
        date: value.value.map(function (v) {
          return dayjs(v).toDate();
        }),
        e: e
      });
    }

    function onPresetClick(preset) {
      var presetValue = preset;

      if (typeof preset === "function") {
        presetValue = preset();
      }

      if (!Array.isArray(presetValue)) {
        console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: presetValue.map(function (p) {
            return dayjs(p);
          }),
          trigger: "preset"
        });
      }
    }

    function onYearChange(nextVal, _ref4) {
      var _props$onYearChange2;

      var partial = _ref4.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (props.enableTimePicker) partialIndex = activeIndex.value;

      var nextYear = _toConsumableArray(year.value);

      nextYear[partialIndex] = nextVal;
      if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
      if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
      year.value = nextYear;
      (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
        partial: partial,
        year: nextYear[partialIndex],
        date: value.value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "year-select"
      });
    }

    function onMonthChange(nextVal, _ref5) {
      var _props$onMonthChange2;

      var partial = _ref5.partial;
      var partialIndex = partial === "start" ? 0 : 1;
      if (props.enableTimePicker) partialIndex = activeIndex.value;

      var nextMonth = _toConsumableArray(month.value);

      nextMonth[partialIndex] = nextVal;

      if (year[0] === year[1]) {
        if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
        if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }

      month.value = nextMonth;
      (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
        partial: partial,
        month: nextMonth[partialIndex],
        date: value.value.map(function (v) {
          return dayjs(v).toDate();
        }),
        trigger: "month-select"
      });
    }

    var panelProps = computed(function () {
      return {
        hoverValue: isHoverCell.value ? hoverValue.value : [],
        value: isSelected.value ? cacheValue.value : value.value,
        activeIndex: activeIndex.value,
        year: year.value,
        month: month.value,
        mode: props.mode,
        format: formatRef.value.format,
        presets: props.presets,
        time: time.value,
        disableDate: props.disableDate,
        firstDayOfWeek: props.firstDayOfWeek,
        timePickerProps: props.timePickerProps,
        enableTimePicker: props.enableTimePicker,
        presetsPlacement: props.presetsPlacement,
        panelPreselection: props.panelPreselection,
        panelClick: props.onPanelClick,
        onCellClick: onCellClick,
        onCellMouseEnter: onCellMouseEnter,
        onCellMouseLeave: onCellMouseLeave,
        onJumperClick: onJumperClick,
        onConfirmClick: onConfirmClick,
        onPresetClick: onPresetClick,
        onYearChange: onYearChange,
        onMonthChange: onMonthChange,
        onTimePickerChange: onTimePickerChange
      };
    });
    return function () {
      return createVNode(TRangePanel, panelProps.value, null);
    };
  }
});

export { _DateRangePickerPanel as default };
//# sourceMappingURL=DateRangePickerPanel.mjs.map
