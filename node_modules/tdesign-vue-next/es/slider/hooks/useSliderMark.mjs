/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-8c39d78a.mjs';
import { computed, createVNode } from 'vue';
import { c as cloneDeep_1 } from '../../_chunks/dep-ef911020.mjs';
import log from '../../_common/js/log/log.mjs';
import { getStopStyle } from '../util/common.mjs';
import TSliderMark from '../slider-mark.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-efb50e88.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-10db0930.mjs';
import '../../_chunks/dep-ad0cc3b4.mjs';
import '../../_chunks/dep-83862ee1.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';

var useSliderMark = function useSliderMark(config) {
  var name = config.value.prefixName;
  var markList = computed(function () {
    var markProps = config.value;

    if (!markProps.marks) {
      return [];
    }

    var legalMarks = [];

    if (Array.isArray(markProps.marks)) {
      var marksList = cloneDeep_1(markProps.marks).sort(function (a, b) {
        return a - b;
      });
      var maxLimit = Math.max.apply(Math, _toConsumableArray(marksList).concat([markProps.max]));
      var minLimit = Math.min.apply(Math, _toConsumableArray(marksList).concat([markProps.min]));

      if (minLimit < markProps.min) {
        log.errorOnce("TSlider", "marks min value should >= props min");
      }

      if (maxLimit > markProps.max) {
        log.errorOnce("TSlider", "marks max value should <= props max");
      }

      marksList.forEach(function (item) {
        legalMarks.push({
          point: item,
          position: (item - minLimit) / (maxLimit - minLimit) * 100,
          mark: item
        });
      });
    } else {
      Object.keys(markProps.marks).map(parseFloat).sort(function (a, b) {
        return a - b;
      }).filter(function (point) {
        return point <= markProps.max && point >= markProps.min;
      }).forEach(function (point) {
        var item = {
          point: point,
          position: (point - markProps.min) * 100 / (markProps.max - markProps.min),
          mark: markProps.marks[point]
        };
        legalMarks.push(item);
      });
    }

    return legalMarks;
  });

  var renderMask = function renderMask(onChangeFn) {
    if (markList.value.length) {
      return createVNode("div", null, [createVNode("div", null, [markList.value.map(function (item, index) {
        return createVNode("div", {
          "class": "".concat(name, "__stop ").concat(name, "__mark-stop"),
          "style": getStopStyle(item.position, config.value.vertical),
          "key": index
        }, null);
      })]), createVNode("div", {
        "class": "".concat(name, "__mark")
      }, [markList.value.map(function (item, key) {
        return createVNode(TSliderMark, {
          "mark": item.mark,
          "point": item.point,
          "key": key,
          "style": getStopStyle(item.position, config.value.vertical),
          "onClickMarkPoint": onChangeFn
        }, null);
      })])]);
    }
  };

  return renderMask;
};

export { useSliderMark };
//# sourceMappingURL=useSliderMark.mjs.map
