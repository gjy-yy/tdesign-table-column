{"version":3,"file":"hooks.mjs","sources":["../../node_modules/lodash/isEqual.js","../../src/cascader/hooks.ts"],"sourcesContent":["var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","import { Ref, reactive, computed, toRefs, watch, nextTick } from 'vue';\nimport isEqual from 'lodash/isEqual';\nimport isFunction from 'lodash/isFunction';\n\nimport TreeStore from '../_common/js/tree/tree-store';\nimport { useFormDisabled } from '../form/hooks';\nimport useVModel from '../hooks/useVModel';\nimport useDefaultValue from '../hooks/useDefaultValue';\nimport { getTreeValue, getCascaderValue, isEmptyValues, isValueInvalid } from './core/helper';\nimport { treeNodesEffect, treeStoreExpendEffect } from './core/effect';\n\nimport {\n  TreeNode,\n  TreeNodeValue,\n  TdCascaderProps,\n  TreeNodeModel,\n  CascaderChangeSource,\n  CascaderValue,\n} from './interface';\n\n// 全局状态\nexport const useContext = (\n  props: TdCascaderProps,\n  setInnerValue: TdCascaderProps['onChange'],\n  innerPopupVisible: Ref<TdCascaderProps['popupVisible']>,\n  setPopupVisible: TdCascaderProps['onPopupVisibleChange'],\n) => {\n  const statusContext = reactive({\n    treeStore: null,\n    inputVal: null,\n    scopeVal: undefined,\n    treeNodes: [],\n    expend: [],\n  });\n\n  return {\n    statusContext,\n    cascaderContext: computed(() => {\n      const {\n        size,\n        checkStrictly,\n        lazy,\n        multiple,\n        filterable,\n        clearable,\n        checkProps,\n        max,\n        disabled,\n        showAllLevels,\n        minCollapsedNum,\n        valueType,\n      } = props;\n      return {\n        value: statusContext.scopeVal,\n        size,\n        checkStrictly,\n        lazy,\n        multiple,\n        filterable,\n        clearable,\n        checkProps,\n        max,\n        disabled,\n        showAllLevels,\n        minCollapsedNum,\n        valueType,\n        visible: innerPopupVisible.value,\n        ...statusContext,\n        setTreeNodes: (nodes: TreeNode[]) => {\n          statusContext.treeNodes = nodes;\n        },\n        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => {\n          if (isEqual(val, statusContext.scopeVal)) return;\n          setInnerValue(val, { source, node });\n        },\n        setVisible: setPopupVisible,\n        setInputVal: (val: string) => {\n          statusContext.inputVal = val;\n        },\n        setExpend: (val: TreeNodeValue[]) => {\n          statusContext.expend = val;\n        },\n      };\n    }),\n  };\n};\n\n// 内聚组件核心的副作用与状态处理\nexport const useCascaderContext = (props: TdCascaderProps) => {\n  const disabled = useFormDisabled();\n  const { value, modelValue, popupVisible } = toRefs(props);\n  const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n  const [innerPopupVisible, setPopupVisible] = useDefaultValue(\n    popupVisible,\n    false,\n    props.onPopupVisibleChange,\n    'popupVisible',\n  );\n  const { cascaderContext, statusContext } = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible);\n\n  const isFilterable = computed(() => {\n    return Boolean(props.filterable || isFunction(props.filter));\n  });\n\n  // 更新treeNodes\n  const updatedTreeNodes = () => {\n    const { inputVal, treeStore, setTreeNodes } = cascaderContext.value;\n    treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);\n  };\n\n  // 更新节点展开状态\n  const updateExpend = () => {\n    const { value, treeStore } = cascaderContext.value;\n    const { expend } = statusContext;\n    treeStoreExpendEffect(treeStore, value, expend);\n    treeStore.replaceChecked(getTreeValue(value));\n  };\n\n  watch(\n    () => props.options,\n    () => {\n      const { options, keys = {}, checkStrictly, lazy, load, valueMode } = props;\n      const { treeStore } = statusContext;\n\n      if (!options.length && !treeStore) return;\n\n      if (!treeStore) {\n        const store = new TreeStore({\n          keys: {\n            ...keys,\n            children: typeof keys.children === 'string' ? keys.children : 'children',\n          },\n          checkable: true,\n          expandMutex: true,\n          expandParent: true,\n          lazy,\n          load,\n          valueMode,\n          checkStrictly,\n          onLoad: () => {\n            nextTick(() => {\n              store.refreshNodes();\n              updatedTreeNodes();\n            });\n          },\n        });\n        store.append(options);\n        statusContext.treeStore = store;\n      } else {\n        if (isEqual(treeStore.config.options, options)) return;\n        treeStore.reload(options);\n        treeStore.refreshNodes();\n      }\n      updateExpend();\n      updatedTreeNodes();\n    },\n    { immediate: true },\n  );\n\n  // tree插件配置变化\n  watch(\n    () => {\n      const { checkStrictly, lazy, load, valueMode } = props;\n      return JSON.stringify({\n        valueMode,\n        checkStrictly,\n        lazy,\n        load,\n      });\n    },\n    () => {\n      const { treeStore } = statusContext;\n      if (!treeStore) return;\n      const { checkStrictly, lazy, load, valueMode } = props;\n      const treeProps = {\n        checkStrictly,\n        disabled,\n        load,\n        lazy,\n        valueMode,\n      };\n      treeStore.setConfig(treeProps);\n    },\n    { immediate: true },\n  );\n\n  watch(\n    innerValue,\n    () => {\n      // 初始化判断 value 逻辑\n      const { setValue, multiple, valueType } = cascaderContext.value;\n\n      if (isValueInvalid(innerValue.value, cascaderContext.value)) {\n        setValue(multiple ? [] : '', 'invalid-value');\n      } else {\n        statusContext.scopeVal = multiple ? [] : '';\n      }\n\n      if (!isEmptyValues(innerValue)) {\n        statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);\n      }\n\n      if (!statusContext.treeStore) return;\n      updateExpend();\n      updatedTreeNodes();\n    },\n    { immediate: true },\n  );\n\n  watch(\n    () => innerPopupVisible.value && isFilterable.value,\n    (visible) => {\n      const { setInputVal } = cascaderContext.value;\n      if (visible) {\n        setInputVal('');\n      }\n    },\n  );\n\n  watch(\n    () => statusContext.inputVal,\n    () => {\n      updatedTreeNodes();\n    },\n  );\n\n  return {\n    cascaderContext,\n    isFilterable,\n  };\n};\n"],"names":["baseIsEqual","require$$0","isEqual","value","other","isEqual_1","useContext","props","setInnerValue","innerPopupVisible","setPopupVisible","statusContext","reactive","treeStore","inputVal","scopeVal","treeNodes","expend","cascaderContext","computed","size","checkStrictly","lazy","multiple","filterable","clearable","checkProps","max","disabled","showAllLevels","minCollapsedNum","valueType","visible","setTreeNodes","nodes","setValue","val","source","node","setVisible","setInputVal","setExpend","useCascaderContext","useFormDisabled","toRefs","modelValue","popupVisible","useVModel","defaultValue","onChange","innerValue","useDefaultValue","onPopupVisibleChange","isFilterable","Boolean","isFunction","filter","updatedTreeNodes","treeNodesEffect","updateExpend","treeStoreExpendEffect","replaceChecked","getTreeValue","watch","options","keys","load","valueMode","length","store","TreeStore","children","checkable","expandMutex","expandParent","onLoad","nextTick","refreshNodes","append","config","reload","immediate","JSON","stringify","treeProps","setConfig","isValueInvalid","isEmptyValues","getCascaderValue"],"mappings":"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"}