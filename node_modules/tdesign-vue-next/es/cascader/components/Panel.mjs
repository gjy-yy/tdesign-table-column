/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, computed, createVNode } from 'vue';
import Item from './Item.mjs';
import props from '../props.mjs';
import { usePrefixClass } from '../../hooks/useConfig.mjs';
import { useTNodeDefault } from '../../hooks/tnode.mjs';
import { getPanels } from '../core/helper.mjs';
import { expendClickEffect, valueChangeEffect } from '../core/effect.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import 'tdesign-icons-vue-next';
import '../core/className.mjs';
import '../../_chunks/dep-8c39d78a.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../_chunks/dep-dcf624da.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-baa4f9dc.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-db11154e.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-192e10f1.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../utils/set-style.mjs';
import '../../config-provider/type.mjs';
import '../../checkbox/constants.mjs';
import '../../_chunks/dep-40522c7c.mjs';
import '../../_chunks/dep-83862ee1.mjs';
import '../../_chunks/dep-8e451077.mjs';
import '../../_chunks/dep-755716aa.mjs';
import '../../_chunks/dep-82798823.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-2684fd15.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-2ca0e5ff.mjs';
import '../../_chunks/dep-c5bb3a66.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../loading/index.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-e68fd68c.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../utils/transfer-dom.mjs';
import '../../loading/props.mjs';
import '../../loading/type.mjs';
import '../../hooks/useGlobalIcon.mjs';
import '../../_chunks/dep-869cd310.mjs';
import '../../_chunks/dep-ef911020.mjs';
import '../../_chunks/dep-efb50e88.mjs';
import '../../_chunks/dep-10db0930.mjs';
import '../../_chunks/dep-ad0cc3b4.mjs';

var Panel = defineComponent({
  name: "TCascaderSubPanel",
  props: {
    empty: props.empty,
    trigger: props.trigger,
    onChange: props.onChange,
    loading: props.loading,
    loadingText: props.loadingText,
    cascaderContext: {
      type: Object
    }
  },
  setup: function setup(props) {
    var renderTNodeJSXDefault = useTNodeDefault();
    var COMPONENT_NAME = usePrefixClass("cascader");

    var _useConfig = useConfig("cascader"),
        globalConfig = _useConfig.globalConfig,
        t = _useConfig.t;

    var panels = computed(function () {
      return getPanels(props.cascaderContext.treeNodes);
    });

    var handleExpand = function handleExpand(node, trigger) {
      var propsTrigger = props.trigger,
          cascaderContext = props.cascaderContext;
      expendClickEffect(propsTrigger, trigger, node, cascaderContext);
    };

    var renderItem = function renderItem(node) {
      return createVNode(Item, {
        "key": node.value,
        "node": node,
        "cascaderContext": props.cascaderContext,
        "onClick": function onClick() {
          handleExpand(node, "click");
        },
        "onMouseenter": function onMouseenter() {
          handleExpand(node, "hover");
        },
        "onChange": function onChange() {
          valueChangeEffect(node, props.cascaderContext);
        }
      }, null);
    };

    var renderList = function renderList(treeNodes) {
      var _ref;

      var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
      return createVNode("ul", {
        "class": ["".concat(COMPONENT_NAME.value, "__menu"), "narrow-scrollbar", (_ref = {}, _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__menu--segment"), segment), _defineProperty(_ref, "".concat(COMPONENT_NAME.value, "__menu--filter"), isFilter), _ref)],
        "key": key
      }, [treeNodes.map(function (node) {
        return renderItem(node);
      })]);
    };

    var renderPanels = function renderPanels() {
      var _props$cascaderContex = props.cascaderContext,
          inputVal = _props$cascaderContex.inputVal,
          treeNodes = _props$cascaderContex.treeNodes;
      return inputVal ? renderList(treeNodes, true) : panels.value.map(function (treeNodes2, index) {
        return renderList(treeNodes2, false, index !== panels.value.length - 1, "".concat(COMPONENT_NAME.value, "__menu").concat(index));
      });
    };

    return function () {
      var content;

      if (props.loading) {
        content = renderTNodeJSXDefault("loadingText", createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
        }, [globalConfig.value.loadingText]));
      } else {
        content = panels.value.length ? renderPanels() : renderTNodeJSXDefault("empty", createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
        }, [globalConfig.value.empty]));
      }

      return createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__panel"), _defineProperty({}, "".concat(COMPONENT_NAME.value, "--normal"), panels.value.length && !props.loading)]
      }, [content]);
    };
  }
});

export { Panel as default };
//# sourceMappingURL=Panel.mjs.map
