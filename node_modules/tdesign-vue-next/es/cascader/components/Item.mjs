/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { isVNode, defineComponent, ref, computed, createVNode, mergeProps } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import { getFullPathLabel } from '../core/helper.mjs';
import { getCascaderItemClass, getCascaderItemIconClass } from '../core/className.mjs';
import { Checkbox } from '../../checkbox/index.mjs';
import { Loading } from '../../loading/index.mjs';
import { usePrefixClass, useCommonClassName } from '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import useRipple from '../../hooks/useRipple.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-40522c7c.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-83862ee1.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-8c39d78a.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../_chunks/dep-0b4c3c44.mjs';
import '../../checkbox/checkbox.mjs';
import '../../_chunks/dep-dcf624da.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../_chunks/dep-baa4f9dc.mjs';
import '../../_chunks/dep-db11154e.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-192e10f1.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../form/hooks.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-8e451077.mjs';
import '../../_chunks/dep-755716aa.mjs';
import '../../_chunks/dep-82798823.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-2684fd15.mjs';
import '../../checkbox/constants.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/useConfig.mjs';
import '../../config-provider/type.mjs';
import '../../utils/set-style.mjs';
import '../../checkbox/group.mjs';
import '../../_chunks/dep-2ca0e5ff.mjs';
import '../../_chunks/dep-c5bb3a66.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_common/js/loading/circle-adapter.mjs';
import '../../_common/js/utils/set-style.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-e68fd68c.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../../utils/transfer-dom.mjs';
import '../../loading/props.mjs';
import '../../loading/type.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var props = {
  node: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  cascaderContext: {
    type: Object
  },
  onChange: Function,
  onClick: Function,
  onMouseenter: Function
};
var Item = defineComponent({
  name: "TCascaderItem",
  props: props,
  setup: function setup(props2) {
    var liRef = ref();
    useRipple(liRef);
    var COMPONENT_NAME = usePrefixClass("cascader__item");
    var classPrefix = usePrefixClass();

    var _useGlobalIcon = useGlobalIcon({
      ChevronRightIcon: ChevronRightIcon
    }),
        ChevronRightIcon$1 = _useGlobalIcon.ChevronRightIcon;

    var _useCommonClassName = useCommonClassName(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;

    var itemClass = computed(function () {
      return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
    });
    var iconClass = computed(function () {
      return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
    });

    function RenderLabelInner(node, cascaderContext) {
      var inputVal = cascaderContext.inputVal;
      var labelText = inputVal ? getFullPathLabel(node) : node.label;

      if (inputVal) {
        var texts = labelText.split(inputVal);
        var doms = [];

        for (var index = 0; index < texts.length; index++) {
          doms.push(createVNode("span", {
            "key": index
          }, [texts[index]]));
          if (index === texts.length - 1) break;
          doms.push(createVNode("span", {
            "key": "".concat(index, "filter"),
            "class": "".concat(COMPONENT_NAME.value, "-label--filter")
          }, [inputVal]));
        }

        return doms;
      }

      return labelText;
    }

    function RenderLabelContent(node, cascaderContext) {
      var label = RenderLabelInner(node, cascaderContext);

      var labelCont = createVNode("span", {
        "title": cascaderContext.inputVal ? getFullPathLabel(node) : node.label,
        "class": ["".concat(COMPONENT_NAME.value, "-label"), "".concat(COMPONENT_NAME.value, "-label--ellipsis")],
        "role": "label"
      }, [label]);

      return labelCont;
    }

    function RenderCheckBox(node, cascaderContext) {
      var checkProps = cascaderContext.checkProps,
          value = cascaderContext.value,
          max = cascaderContext.max,
          inputVal = cascaderContext.inputVal;
      var label = RenderLabelInner(node, cascaderContext);
      return createVNode(Checkbox, mergeProps({
        "checked": node.checked,
        "indeterminate": node.indeterminate,
        "disabled": node.isDisabled() || value.length >= max && max !== 0,
        "name": String(node.value),
        "stopLabelTrigger": true,
        "title": inputVal ? getFullPathLabel(node) : node.label,
        "onChange": function onChange() {
          props2.onChange();
        }
      }, checkProps), _isSlot(label) ? label : {
        "default": function _default() {
          return [label];
        }
      });
    }

    return function () {
      var cascaderContext = props2.cascaderContext,
          node = props2.node;
      return createVNode("li", {
        "ref": liRef,
        "class": itemClass.value,
        "onClick": function onClick(e) {
          e.stopPropagation();
          props2.onClick();
        },
        "onMouseenter": function onMouseenter(e) {
          e.stopPropagation();
          props2.onMouseenter();
        }
      }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? createVNode(Loading, {
        "class": iconClass.value,
        "size": "small"
      }, null) : createVNode(ChevronRightIcon$1, {
        "class": iconClass.value
      }, null))]);
    };
  }
});

export { Item as default };
//# sourceMappingURL=Item.mjs.map
