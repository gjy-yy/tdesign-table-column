/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-8c39d78a.mjs';
import { _ as _typeof } from '../../_chunks/dep-7071345f.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-0b4c3c44.mjs';
import { _ as _slicedToArray } from '../../_chunks/dep-dcf624da.mjs';
import { toRefs, ref, computed, watch, createVNode, mergeProps } from 'vue';
import { i as intersection_1 } from '../../_chunks/dep-2ca0e5ff.mjs';
import { g as get_1 } from '../../_chunks/dep-6d14fb16.mjs';
import { i as isFunction_1 } from '../../_chunks/dep-0b4185fe.mjs';
import useDefaultValue from '../../hooks/useDefaultValue.mjs';
import { isRowSelectedDisabled } from '../../_common/js/table/utils.mjs';
import { Checkbox } from '../../checkbox/index.mjs';
import { Radio } from '../../radio/index.mjs';
import '../../_common/js/log/index.mjs';
import log from '../../_common/js/log/log.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-192e10f1.mjs';
import '../../_chunks/dep-c5bb3a66.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-0c515b62.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-baa4f9dc.mjs';
import '../../_chunks/dep-db11154e.mjs';
import '../../_chunks/dep-869cd310.mjs';
import '../../checkbox/checkbox.mjs';
import '../../checkbox/props.mjs';
import '../../hooks/useVModel.mjs';
import '../../form/hooks.mjs';
import '../../hooks/useRipple.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../hooks/useConfig.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../utils/set-style.mjs';
import '../../hooks/tnode.mjs';
import '../../_chunks/dep-40522c7c.mjs';
import '../../_chunks/dep-83862ee1.mjs';
import '../../_chunks/dep-8e451077.mjs';
import '../../_chunks/dep-755716aa.mjs';
import '../../_chunks/dep-82798823.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-2684fd15.mjs';
import '../../checkbox/constants.mjs';
import '../../checkbox/group.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import '../../hooks/slot.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../checkbox/type.mjs';
import '../../radio/radio.mjs';
import '../../utils/helper.mjs';
import '../../_chunks/dep-e68fd68c.mjs';
import '../../radio/props.mjs';
import '../../radio/constants.mjs';
import '../../radio/group.mjs';
import '../../_chunks/dep-9262ea29.mjs';
import '../../_chunks/dep-88e40e6a.mjs';
import '../../radio/radio-group-props.mjs';
import '../../radio/radio-button.mjs';
import '../../radio/type.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useRowSelect(props, tableSelectedClasses) {
  var _toRefs = toRefs(props),
      selectedRowKeys = _toRefs.selectedRowKeys,
      columns = _toRefs.columns,
      data = _toRefs.data,
      rowKey = _toRefs.rowKey;

  var selectedRowClassNames = ref();

  var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      tSelectedRowKeys = _useDefaultValue2[0],
      setTSelectedRowKeys = _useDefaultValue2[1];

  var selectedRowDataMap = ref( /* @__PURE__ */new Map());
  var selectColumn = computed(function () {
    return props.columns.find(function (_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
  });
  var canSelectedRows = computed(function () {
    return data.value.filter(function (row, rowIndex) {
      return !isDisabled(row, rowIndex);
    });
  });
  var intersectionKeys = computed(function () {
    return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
      return get_1(t, props.rowKey || "id");
    }));
  });
  watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
    var _selectColumn$value;

    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
    };

    var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys.value);

    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get_1(row, props.rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };

    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
  }, {
    immediate: true
  });

  function isDisabled(row, rowIndex) {
    return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
  }

  function getSelectedHeader() {
    return function () {
      var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
      var isChecked = intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length;
      return createVNode(Checkbox, {
        "checked": isChecked,
        "indeterminate": isIndeterminate,
        "disabled": !canSelectedRows.value.length,
        "onChange": handleSelectAll
      }, null);
    };
  }

  function renderSelectCell(p) {
    var column = p.col,
        _p$row = p.row,
        row = _p$row === void 0 ? {} : _p$row,
        rowIndex = p.rowIndex;
    var checked = tSelectedRowKeys.value.includes(get_1(row, props.rowKey || "id"));
    var disabled = typeof column.disabled === "function" ? column.disabled({
      row: row,
      rowIndex: rowIndex
    }) : column.disabled;
    var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : column.checkProps;

    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onClick: function onClick(e) {
        if (_typeof(e) === "object" && "e" in e) {
          var _e$e;

          (_e$e = e.e) === null || _e$e === void 0 ? void 0 : _e$e.stopPropagation();
        } else {
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }
      },
      onChange: function onChange() {
        return handleSelectChange(row);
      }
    });

    if (column.type === "single") return createVNode(Radio, selectBoxProps, null);

    if (column.type === "multiple") {
      var _props$indeterminateS;

      var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get_1(row, props.rowKey)) : false;
      return createVNode(Checkbox, mergeProps({
        "indeterminate": isIndeterminate
      }, selectBoxProps), null);
    }

    return null;
  }

  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);

    var reRowKey = props.rowKey || "id";
    var id = get_1(row, reRowKey);
    selectedRowDataMap.value.set(id, row);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;

    if (selectColumn.value.type === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectColumn.value.type === "single") {
      selectedRowKeys2 = !isExisted ? [id] : [];
    } else {
      log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }

    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: selectedRowKeys2.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }

  function handleSelectAll(checked) {
    var _selectedRowKeys$valu;

    var reRowKey = props.rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
      return get_1(record, reRowKey);
    });
    var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: checked ? allIds.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }) : [],
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }

  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      className: [tableSelectedClasses.checkCell, col.className],
      cell: function cell(_, p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : ""
    });
  }

  watch([data, rowKey], function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        data2 = _ref4[0],
        rowKey2 = _ref4[1];

    for (var i = 0, len = data2.length; i < len; i++) {
      selectedRowDataMap.value.set(get_1(data2[i], rowKey2 || "id"), data2[i]);
    }
  }, {
    immediate: true
  });
  return {
    selectedRowClassNames: selectedRowClassNames,
    formatToRowSelectColumn: formatToRowSelectColumn
  };
}

export { useRowSelect as default };
//# sourceMappingURL=useRowSelect.mjs.map
