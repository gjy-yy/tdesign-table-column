{"version":3,"file":"useEditableRow.mjs","sources":["../../../src/table/hooks/useEditableRow.ts"],"sourcesContent":["import { ref, computed } from 'vue';\nimport get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport { PrimaryTableProps } from '../interface';\nimport { getEditableKeysMap } from '../utils';\nimport { AllValidateResult } from '../../form/type';\nimport { validate } from '../../form/form-model';\nimport { PrimaryTableRowEditContext, TableRowData, TableErrorListMap } from '../type';\n\nexport type ErrorListObjectType = PrimaryTableRowEditContext<TableRowData> & { errorList: AllValidateResult[] };\n\nexport interface TablePromiseErrorData {\n  errors: ErrorListObjectType[];\n  errorMap: TableErrorListMap;\n}\n\nconst cellRuleMap = new Map<any, PrimaryTableRowEditContext<TableRowData>[]>();\n\nexport default function useRowEdit(props: PrimaryTableProps) {\n  // 校验不通过的错误信息，其中 key 值为 [rowValue, col.colKey].join('__')\n  const errorListMap = ref<TableErrorListMap>({});\n  // 处于编辑态的表格行\n  const editableKeysMap = computed(() => getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || 'id'));\n\n  const getErrorListMapByErrors = (errors: ErrorListObjectType[]): TableErrorListMap => {\n    const errorMap: TableErrorListMap = {};\n    errors.forEach(({ row, col, errorList }) => {\n      const rowValue = get(row, props.rowKey || 'id');\n      const key = [rowValue, col.colKey].join('__');\n      if (errorList?.length) {\n        errorMap[key] = errorList;\n      } else {\n        delete errorMap[key];\n      }\n    });\n    return errorMap;\n  };\n\n  // 校验一行的数据\n  const validateOneRowData = (rowValue: any) => {\n    const rowRules = cellRuleMap.get(rowValue);\n    if (!rowRules) return;\n    const list = rowRules.map(\n      (item) =>\n        new Promise<ErrorListObjectType>((resolve) => {\n          const { editedRow, col } = item;\n          const rules = isFunction(col.edit.rules) ? col.edit.rules(item) : col.edit.rules;\n          if (!col.edit || !rules || !rules.length) {\n            resolve({ ...item, errorList: [] });\n            return;\n          }\n          validate(editedRow[col.colKey], rules).then((r) => {\n            resolve({ ...item, errorList: r.filter((t) => !t.result) });\n          });\n        }),\n    );\n    return new Promise<TablePromiseErrorData>((resolve, reject) => {\n      Promise.all(list).then((errors) => {\n        resolve({\n          errors: errors.filter((t) => t.errorList?.length),\n          errorMap: getErrorListMapByErrors(errors),\n        });\n      }, reject);\n    });\n  };\n\n  /**\n   * 校验表格单行数据（对外开放方法，修改时需慎重）\n   * @param rowValue 行唯一标识\n   */\n  const validateRowData = (rowValue: any) =>\n    new Promise((resolve, reject) => {\n      validateOneRowData(rowValue).then(({ errors, errorMap }) => {\n        errorListMap.value = errorMap;\n        // 缺少校验文本显示\n        const tTrigger = 'parent';\n        props.onRowValidate?.({ trigger: tTrigger, result: errors });\n        resolve({ trigger: tTrigger, result: errors });\n      }, reject);\n    });\n\n  /**\n   * 校验整个表格数据（对外开放方法，修改时需慎重）\n   */\n  const validateTableData = () => {\n    const promiseList: Promise<TablePromiseErrorData>[] = [];\n    const data = props.data || [];\n    for (let i = 0, len = data.length; i < len; i++) {\n      const rowValue = get(data[i], props.rowKey || 'id');\n      promiseList.push(validateOneRowData(rowValue));\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promiseList).then((rList) => {\n        const allErrorListMap: TableErrorListMap = {};\n        rList.forEach(({ errorMap } = { errors: [], errorMap: {} }) => {\n          errorMap && Object.assign(allErrorListMap, errorMap);\n        });\n        errorListMap.value = allErrorListMap;\n        props.onValidate?.({ result: allErrorListMap });\n        resolve({ result: allErrorListMap });\n      }, reject);\n    });\n  };\n\n  const onRuleChange = (context: PrimaryTableRowEditContext<TableRowData>) => {\n    // 编辑行，预存校验信息，方便最终校验\n    if (props.editableRowKeys) {\n      const rowValue = get(context.row, props.rowKey || 'id');\n      const rules = cellRuleMap.get(rowValue);\n      if (rules) {\n        const index = rules.findIndex((t) => t.col.colKey === context.col.colKey);\n        if (index === -1) {\n          rules.push(context);\n        } else {\n          rules[index] = context;\n        }\n        cellRuleMap.set(rowValue, rules);\n      } else {\n        cellRuleMap.set(rowValue, [context]);\n      }\n    }\n  };\n\n  const clearValidateData = () => {\n    errorListMap.value = {};\n  };\n\n  return {\n    errorListMap,\n    editableKeysMap,\n    validateTableData,\n    validateRowData,\n    onRuleChange,\n    clearValidateData,\n  };\n}\n"],"names":["cellRuleMap","Map","useRowEdit","props","errorListMap","ref","editableKeysMap","computed","getEditableKeysMap","editableRowKeys","data","rowKey","getErrorListMapByErrors","errors","errorMap","forEach","row","col","errorList","rowValue","get","key","colKey","join","length","validateOneRowData","rowRules","list","map","item","Promise","resolve","editedRow","rules","isFunction","edit","validate","then","r","filter","t","result","reject","all","validateRowData","value","tTrigger","onRowValidate","trigger","validateTableData","promiseList","i","len","push","rList","allErrorListMap","Object","assign","onValidate","onRuleChange","context","index","findIndex","set","clearValidateData"],"mappings":"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"}