/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-8c39d78a.mjs';
import { _ as _defineProperty } from '../../_chunks/dep-0b4c3c44.mjs';
import { toRefs, ref, computed, watch, h, createVNode, onUnmounted } from 'vue';
import { AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-vue-next';
import { c as cloneDeep_1 } from '../../_chunks/dep-ef911020.mjs';
import { g as get_1 } from '../../_chunks/dep-6d14fb16.mjs';
import TableTreeStore from '../../_common/js/table/tree-store.mjs';
import useClassName from './useClassName.mjs';
import { renderCell } from '../tr.mjs';
import '../../hooks/useConfig.mjs';
import { useGlobalIcon } from '../../hooks/useGlobalIcon.mjs';
import '../../hooks/index.mjs';
import { useConfig } from '../../config-provider/useConfig.mjs';
import { useTNodeDefault } from '../../hooks/tnode.mjs';
import '../../_chunks/dep-556a2f2c.mjs';
import '../../_chunks/dep-a48de419.mjs';
import '../../_chunks/dep-efb50e88.mjs';
import '../../_chunks/dep-2a7dc5c7.mjs';
import '../../_chunks/dep-9311bf66.mjs';
import '../../_chunks/dep-4889eb51.mjs';
import '../../_chunks/dep-0b4185fe.mjs';
import '../../_chunks/dep-3ca5fb38.mjs';
import '../../_chunks/dep-7071345f.mjs';
import '../../_chunks/dep-d2403b2f.mjs';
import '../../_chunks/dep-7922050a.mjs';
import '../../_chunks/dep-169ea640.mjs';
import '../../_chunks/dep-f6b25712.mjs';
import '../../_chunks/dep-59545a4d.mjs';
import '../../_chunks/dep-c27b1c14.mjs';
import '../../_chunks/dep-7d96367f.mjs';
import '../../_chunks/dep-827c4600.mjs';
import '../../_chunks/dep-0820e0e2.mjs';
import '../../_chunks/dep-caad2e91.mjs';
import '../../_chunks/dep-3d4aad09.mjs';
import '../../_chunks/dep-8e38f523.mjs';
import '../../_chunks/dep-469bf54b.mjs';
import '../../_chunks/dep-10db0930.mjs';
import '../../_chunks/dep-ad0cc3b4.mjs';
import '../../_chunks/dep-83862ee1.mjs';
import '../../_chunks/dep-0c515b62.mjs';
import '../../_chunks/dep-977c5cdd.mjs';
import '../../_chunks/dep-a82b01df.mjs';
import '../../_chunks/dep-192e10f1.mjs';
import '../../_chunks/dep-84a9ab7d.mjs';
import '../../_common/js/table/utils.mjs';
import '../../_chunks/dep-869cd310.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';
import '../../_chunks/dep-bfb23a5e.mjs';
import '../../_chunks/dep-8ef9fb8e.mjs';
import '../../_chunks/dep-e769aafd.mjs';
import '../../_chunks/dep-400798c5.mjs';
import '../../_chunks/dep-361522ee.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../config-provider/type.mjs';
import '../../_chunks/dep-755716aa.mjs';
import '../../_chunks/dep-82798823.mjs';
import '../../_chunks/dep-52cbb58a.mjs';
import '../../_chunks/dep-2684fd15.mjs';
import '../../_chunks/dep-32e8a48d.mjs';
import '../../_chunks/dep-759eacca.mjs';
import '../../_chunks/dep-544fb8fd.mjs';
import '../../_chunks/dep-72359af2.mjs';
import '../utils.mjs';
import './useFixed.mjs';
import '../../_chunks/dep-dcf624da.mjs';
import '../../_chunks/dep-241fdd8c.mjs';
import '../../_chunks/dep-050b3eb2.mjs';
import '../../_common/js/utils/getScrollbarWidth.mjs';
import '../../_common/js/utils/helper.mjs';
import '../../_chunks/dep-e68fd68c.mjs';
import '../../utils/dom.mjs';
import '../../utils/easing.mjs';
import '../ellipsis.mjs';
import '../../utils/render-tnode.mjs';
import '../../_chunks/dep-40522c7c.mjs';
import '../../_chunks/dep-8e451077.mjs';
import '../../_chunks/dep-db11154e.mjs';
import '../../_chunks/dep-baa4f9dc.mjs';
import '../../tooltip/index.mjs';
import '../../tooltip/tooltip.mjs';
import '../../tooltip/props.mjs';
import '../../popup/props.mjs';
import '../../popup/index.mjs';
import '../../popup/popup.mjs';
import '@popperjs/core';
import '../../_common/js/utils/set-style.mjs';
import '../../popup/container.mjs';
import '../../hooks/useVModel.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../popup/type.mjs';
import '../../tooltip/util.mjs';
import '../../tooltip/type.mjs';
import '../base-table-props.mjs';
import './useLazyLoad.mjs';
import '../../_common/js/utils/observe.mjs';
import './useRowspanAndColspan.mjs';
import '../../hooks/icon.mjs';
import '../../hooks/slot.mjs';
import '../../hooks/useCommonClassName.mjs';
import '../../hooks/useDefaultValue.mjs';
import '../../hooks/useDestroyOnClose.mjs';
import '../../hooks/useKeepAnimation.mjs';
import '../../hooks/useRipple.mjs';
import '../../utils/set-style.mjs';
import '../../hooks/useVirtualScroll.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTreeData(props, context) {
  var _toRefs = toRefs(props),
      data = _toRefs.data,
      columns = _toRefs.columns;

  var _useConfig = useConfig("table"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;

  var _useGlobalIcon = useGlobalIcon({
    AddRectangleIcon: AddRectangleIcon,
    MinusRectangleIcon: MinusRectangleIcon
  }),
      AddRectangleIcon$1 = _useGlobalIcon.AddRectangleIcon,
      MinusRectangleIcon$1 = _useGlobalIcon.MinusRectangleIcon;

  var store = ref(new TableTreeStore());
  var treeNodeCol = ref();
  var dataSource = ref([]);

  var _useClassName = useClassName(),
      tableTreeClasses = _useClassName.tableTreeClasses;

  var renderTNode = useTNodeDefault();
  var rowDataKeys = computed(function () {
    var _props$tree;

    return {
      rowKey: props.rowKey || "id",
      childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
    };
  });
  var checkedColumn = computed(function () {
    return columns.value.find(function (col) {
      return col.colKey === "row-select";
    });
  });
  watch(checkedColumn, function (column) {
    if (!store.value) return;
    store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);
  });

  var foldIcon = function foldIcon(context2) {
    var params = _objectSpread(_objectSpread({}, context2), {}, {
      type: "fold"
    });

    var defaultFoldIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || createVNode(MinusRectangleIcon$1, null, null);

    return renderTNode("treeExpandAndFoldIcon", {
      defaultNode: defaultFoldIcon,
      params: params
    });
  };

  var expandIcon = function expandIcon(context2) {
    var params = _objectSpread(_objectSpread({}, context2), {}, {
      type: "expand"
    });

    var defaultExpandIcon = t(globalConfig.value.treeExpandAndFoldIcon, h, params) || createVNode(AddRectangleIcon$1, null, null);

    return renderTNode("treeExpandAndFoldIcon", {
      defaultNode: defaultExpandIcon,
      params: params
    });
  };

  var uniqueKeys = computed(function () {
    var _store$value, _store$value$getAllUn;

    return ((_store$value = store.value) === null || _store$value === void 0 ? void 0 : (_store$value$getAllUn = _store$value.getAllUniqueKeys(data.value, rowDataKeys.value)) === null || _store$value$getAllUn === void 0 ? void 0 : _store$value$getAllUn.join()) || "";
  });
  watch([uniqueKeys], function () {
    if (!data.value) return;

    if (!props.tree) {
      dataSource.value = data.value;
      return;
    }

    resetData(data.value);
  }, {
    immediate: true
  });
  onUnmounted(function () {
    var _store$value$treeData;

    if (!props.tree) return;
    (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 ? void 0 : _store$value$treeData.clear();
    store.value = null;
  });
  watch([columns], function () {
    treeNodeCol.value = getTreeNodeColumnCol();
  }, {
    immediate: true
  });

  function resetData(data2) {
    var _props$tree2;

    var newVal = cloneDeep_1(data2);
    store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);

    if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.defaultExpandAll) {
      newVal = store.value.expandAll(newVal, rowDataKeys.value);
    }

    dataSource.value = newVal;
  }

  function getTreeNodeStyle(level) {
    var _props$tree3, _props$tree4;

    if (level === void 0) return;
    var indent = ((_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) === void 0 ? 24 : (_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.indent;
    return indent ? {
      paddingLeft: "".concat(level * indent || 1, "px")
    } : {};
  }

  function toggleExpandData(p, trigger) {
    var _store$value2, _store$value2$treeDat, _props$onTreeExpandCh;

    dataSource.value = _toConsumableArray(store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value));
    var rowValue = get_1(p.row, rowDataKeys.value.rowKey);
    var rowState = (_store$value2 = store.value) === null || _store$value2 === void 0 ? void 0 : (_store$value2$treeDat = _store$value2.treeDataMap) === null || _store$value2$treeDat === void 0 ? void 0 : _store$value2$treeDat.get(rowValue);
    (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
      row: p.row,
      rowIndex: p.rowIndex,
      rowState: rowState,
      trigger: trigger
    });
  }

  function getTreeNodeColumnCol() {
    var _props$tree5;

    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree5 = props.tree) === null || _props$tree5 === void 0 ? void 0 : _props$tree5.treeNodeColumnIndex) || 0;

    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;

      treeNodeColumnIndex += 1;
    }

    return columns2[treeNodeColumnIndex];
  }

  function formatTreeColumn(col) {
    if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;

    var newCol = _objectSpread({}, treeNodeCol.value);

    newCol.cell = function (h2, p) {
      var cellInfo = renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol.value)
      }), context.slots, {
        cellEmptyContent: props.cellEmptyContent
      });
      var currentState = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

      var classes = _defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);

      var childrenNodes = get_1(p.row, rowDataKeys.value.childrenKey);

      if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
        var _store$value$treeData2;

        var iconNode = (_store$value$treeData2 = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData2 !== void 0 && _store$value$treeData2.expanded ? foldIcon(p) : expandIcon(p);
        return createVNode("div", {
          "class": [tableTreeClasses.col, classes],
          "style": colStyle
        }, [!!(childrenNodes.length || childrenNodes === true) && createVNode("span", {
          "class": tableTreeClasses.icon,
          "onClick": function onClick() {
            return toggleExpandData(p, "expand-fold-icon");
          }
        }, [iconNode]), cellInfo]);
      }

      return createVNode("div", {
        "style": colStyle,
        "class": classes
      }, [cellInfo]);
    };

    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (h2, p) {
        return renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol.value)
        }), context.slots);
      };
    }

    return newCol;
  }

  function setData(key, newRowData) {
    var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);

    var newData = _toConsumableArray(dataSource.value);

    newData[rowIndex] = newRowData;
    dataSource.value = newData;
  }

  function getData(key) {
    return store.value.getData(key);
  }

  function remove(key) {
    dataSource.value = _toConsumableArray(store.value.remove(key, dataSource.value, rowDataKeys.value));
  }

  function appendTo() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var newData = arguments.length > 1 ? arguments[1] : undefined;

    if (!key) {
      dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);
      return;
    }

    dataSource.value = _toConsumableArray(store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value));
  }

  function insertAfter(rowValue, newData) {
    dataSource.value = _toConsumableArray(store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value));
  }

  function insertBefore(rowValue, newData) {
    dataSource.value = _toConsumableArray(store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value));
  }

  function expandAll() {
    dataSource.value = _toConsumableArray(store.value.expandAll(dataSource.value, rowDataKeys.value));
  }

  function foldAll() {
    dataSource.value = _toConsumableArray(store.value.foldAll(dataSource.value, rowDataKeys.value));
  }

  function swapData(params) {
    var r = store.value.swapData(dataSource.value, params, rowDataKeys.value);

    if (r.result) {
      dataSource.value = _toConsumableArray(r.dataSource);
    } else {
      var _props$onAbnormalDrag;

      var params2 = {
        code: r.code,
        reason: r.reason
      };
      (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
    }
  }

  function getTreeNode() {
    return store.value.getTreeNode(dataSource.value, rowDataKeys.value);
  }

  function getTreeExpandedRow() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";
    return store.value.getTreeExpandedRow(dataSource.value, rowDataKeys.value, type);
  }

  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    swapData: swapData,
    setData: setData,
    getData: getData,
    remove: remove,
    appendTo: appendTo,
    insertAfter: insertAfter,
    insertBefore: insertBefore,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData,
    expandAll: expandAll,
    foldAll: foldAll,
    getTreeNode: getTreeNode,
    resetData: resetData,
    getTreeExpandedRow: getTreeExpandedRow
  };
}

export { useTreeData as default };
//# sourceMappingURL=useTreeData.mjs.map
