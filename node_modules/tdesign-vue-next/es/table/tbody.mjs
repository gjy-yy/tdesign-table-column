/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { defineComponent, toRefs, computed, createVNode, mergeProps } from 'vue';
import { c as camelCase_1 } from '../_chunks/dep-8e451077.mjs';
import { g as get_1 } from '../_chunks/dep-6d14fb16.mjs';
import { p as pick_1 } from '../_chunks/dep-32e8a48d.mjs';
import TrElement, { ROW_LISTENERS, TABLE_PROPS } from './tr.mjs';
import '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import useClassName from './hooks/useClassName.mjs';
import baseTableProps from './base-table-props.mjs';
import useRowspanAndColspan from './hooks/useRowspanAndColspan.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-0c515b62.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-759eacca.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-544fb8fd.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-72359af2.mjs';
import '../_chunks/dep-ad0cc3b4.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-2684fd15.mjs';
import './utils.mjs';
import './hooks/useFixed.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../_chunks/dep-241fdd8c.mjs';
import '../_chunks/dep-050b3eb2.mjs';
import '../_common/js/log/index.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/utils/getScrollbarWidth.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import './ellipsis.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import './hooks/useLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat("cell-click");
var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
var TBody = defineComponent({
  name: "TBody",
  props: _objectSpread({
    data: Array,
    columns: Array,
    rowAndColFixedPosition: Map,
    showColumnShadow: Object,
    tableElm: {},
    tableWidth: Number,
    isWidthOverflow: Boolean,
    translateY: Number,
    scrollType: String,
    isVirtual: Boolean,
    rowHeight: Number,
    trs: Map,
    bufferSize: Number,
    tableContentElm: {},
    handleRowMounted: Function,
    renderExpandedRow: Function,
    firstFullRow: [String, Function],
    lastFullRow: [String, Function]
  }, pick_1(baseTableProps, extendTableProps)),
  setup: function setup(props) {
    var renderTNode = useTNodeJSX();

    var _toRefs = toRefs(props),
        data = _toRefs.data,
        columns = _toRefs.columns,
        rowKey = _toRefs.rowKey,
        rowspanAndColspan = _toRefs.rowspanAndColspan;

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        globalConfig = _useConfig.globalConfig;

    var _useClassName = useClassName(),
        tableFullRowClasses = _useClassName.tableFullRowClasses,
        tableBaseClass = _useClassName.tableBaseClass;

    var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan),
        skipSpansMap = _useRowspanAndColspan.skipSpansMap;

    var tbodyClasses = computed(function () {
      return [tableBaseClass.body];
    });
    return {
      t: t,
      globalConfig: globalConfig,
      renderTNode: renderTNode,
      tableFullRowClasses: tableFullRowClasses,
      tbodyClasses: tbodyClasses,
      tableBaseClass: tableBaseClass,
      skipSpansMap: skipSpansMap
    };
  },
  render: function render() {
    var _this = this,
        _this$data,
        _this$data2;

    var renderEmpty = function renderEmpty(columns) {
      return createVNode("tr", {
        "class": [_this.tableBaseClass.emptyRow, _defineProperty({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
      }, [createVNode("td", {
        "colspan": columns.length
      }, [createVNode("div", {
        "class": [_this.tableBaseClass.empty, _defineProperty({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
        "style": _this.isWidthOverflow ? {
          width: "".concat(_this.tableWidth, "px")
        } : {}
      }, [_this.renderTNode("empty") || _this.t(_this.globalConfig.empty)])])]);
    };

    var getFullRow = function getFullRow(columnLength2, type) {
      var tType = camelCase_1(type);

      var fullRowNode = _this.renderTNode(tType);

      if (["", null, void 0, false].includes(fullRowNode)) return null;

      var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function (col) {
        return col.fixed === "left";
      });

      var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
      return createVNode("tr", {
        "class": classes,
        "key": "key-full-row-".concat(type)
      }, [createVNode("td", {
        "colspan": columnLength2
      }, [createVNode("div", {
        "class": _defineProperty({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
        "style": isFixedToLeft ? {
          width: "".concat(_this.tableWidth, "px")
        } : {}
      }, [createVNode("div", {
        "class": _this.tableFullRowClasses.innerFullElement
      }, [fullRowNode])])])]);
    };

    var columnLength = this.columns.length;
    var dataLength = this.data.length;
    var trNodeList = [];
    var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
    (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.forEach(function (row, rowIndex) {
      var trProps = _objectSpread(_objectSpread({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
        rowKey: _this.rowKey || "id",
        row: row,
        columns: _this.columns,
        rowIndex: rowIndex,
        dataLength: dataLength,
        skipSpansMap: _this.skipSpansMap
      }, pick_1(_this.$props, properties));

      if (_this.onCellClick) {
        trProps.onCellClick = _this.onCellClick;
      }

      var trNode = createVNode(TrElement, mergeProps({
        "key": "".concat(get_1(row, _this.rowKey || "id"), "__").concat(rowIndex)
      }, trProps, {
        "onRowMounted": _this.handleRowMounted
      }), _this.$slots);

      trNodeList.push(trNode);

      if (_this.renderExpandedRow) {
        var p = {
          row: row,
          index: rowIndex,
          columns: _this.columns,
          tableWidth: _this.tableWidth,
          isWidthOverflow: _this.isWidthOverflow
        };

        var expandedContent = _this.renderExpandedRow(p);

        expandedContent && trNodeList.push(expandedContent);
      }
    });
    var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
    var isEmpty = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading && !this.firstFullRow && !this.lastFullRow;
    var translate = "translate(0, ".concat(this.translateY, "px)");
    var posStyle = {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    };
    return createVNode("tbody", {
      "class": this.tbodyClasses,
      "style": this.isVirtual && _objectSpread({}, posStyle)
    }, [isEmpty ? renderEmpty(this.columns) : list]);
  }
});

export { ROW_AND_TD_LISTENERS, TBody as default, extendTableProps };
//# sourceMappingURL=tbody.mjs.map
