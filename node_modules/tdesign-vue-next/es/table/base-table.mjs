/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { isVNode, defineComponent, ref, computed, watch, nextTick, toRefs, provide, onMounted, createVNode, mergeProps } from 'vue';
import { p as pick_1 } from '../_chunks/dep-32e8a48d.mjs';
import baseTableProps from './base-table-props.mjs';
import useTableHeader from './hooks/useTableHeader.mjs';
import useColumnResize from './hooks/useColumnResize.mjs';
import useFixed from './hooks/useFixed.mjs';
import usePagination from './hooks/usePagination.mjs';
import useVirtualScroll from '../hooks/useVirtualScroll.mjs';
import useAffix from './hooks/useAffix.mjs';
import { Loading } from '../loading/index.mjs';
import TBody, { extendTableProps } from './tbody.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import useStyle, { formatCSSUnit } from './hooks/useStyle.mjs';
import useClassName from './hooks/useClassName.mjs';
import '../hooks/useConfig.mjs';
import { Affix } from '../affix/index.mjs';
import { ROW_LISTENERS } from './tr.mjs';
import THead from './thead.mjs';
import TFoot from './tfoot.mjs';
import { getAffixProps } from './utils.mjs';
import '../_common/js/log/index.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import log from '../_common/js/log/log.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-0c515b62.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-759eacca.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-544fb8fd.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-72359af2.mjs';
import '../_chunks/dep-ad0cc3b4.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../_chunks/dep-2684fd15.mjs';
import './hooks/useMultiHeader.mjs';
import './ellipsis.mjs';
import '../_chunks/dep-241fdd8c.mjs';
import '../_chunks/dep-050b3eb2.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../_common/js/utils/set-style.mjs';
import '../popup/container.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../hooks/useVModel.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../popup/type.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/type.mjs';
import '../tooltip/util.mjs';
import '../tooltip/type.mjs';
import '../_chunks/dep-869cd310.mjs';
import '../_common/js/table/set-column-width-by-drag.mjs';
import '../_common/js/table/utils.mjs';
import '../_common/js/table/recalculate-column-width.mjs';
import '../_chunks/dep-6d14fb16.mjs';
import '../_common/js/utils/getScrollbarWidth.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-e68fd68c.mjs';
import '../pagination/index.mjs';
import '../pagination/pagination.mjs';
import 'tdesign-icons-vue-next';
import '../hooks/useGlobalIcon.mjs';
import '../input-number/index.mjs';
import '../input-number/input-number.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../form/hooks.mjs';
import '../loading/directive.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../utils/transfer-dom.mjs';
import '../loading/props.mjs';
import '../loading/type.mjs';
import '../button/type.mjs';
import '../input/index.mjs';
import '../input/input.mjs';
import '../input/props.mjs';
import '../input/useInput.mjs';
import '../utils/helper.mjs';
import '../form/const.mjs';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../input/useInputEventHandler.mjs';
import '../input/useInputWidth.mjs';
import '../input/input-group.mjs';
import '../input/type.mjs';
import '../input-number/props.mjs';
import '../input-number/useInputNumber.mjs';
import '../_common/js/input-number/number.mjs';
import '../_common/js/input-number/large-number.mjs';
import '../input-number/type.mjs';
import '../select/index.mjs';
import '../select/select.mjs';
import '../_chunks/dep-ef911020.mjs';
import '../_chunks/dep-efb50e88.mjs';
import '../_chunks/dep-10db0930.mjs';
import 'lodash';
import '../common-components/fake-arrow.mjs';
import '../select-input/index.mjs';
import '../select-input/select-input.mjs';
import '../select-input/props.mjs';
import '../select-input/useSingle.mjs';
import '../select-input/useMultiple.mjs';
import '../tag-input/index.mjs';
import '../tag-input/tag-input.mjs';
import '../tag-input/props.mjs';
import '../tag-input/hooks/useTagScroll.mjs';
import '../tag-input/useTagList.mjs';
import '../tag/index.mjs';
import '../tag/tag.mjs';
import '../tag/props.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../tag/type.mjs';
import '../tag-input/hooks/useHover.mjs';
import '../tag-input/hooks/useDragSorter.mjs';
import '../tag-input/type.mjs';
import '../select-input/useOverlayInnerStyle.mjs';
import '../select-input/type.mjs';
import '../select/select-panel.mjs';
import '../_chunks/dep-f1423dd2.mjs';
import '../select/option.mjs';
import '../select/option-props.mjs';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-2ca0e5ff.mjs';
import '../_chunks/dep-c5bb3a66.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/type.mjs';
import '../select/helper.mjs';
import '../select/optionGroup.mjs';
import '../select/option-group-props.mjs';
import '../select/props.mjs';
import '../select/hooks/usePanelVirtualScroll.mjs';
import '../select/hooks/useSelectOptions.mjs';
import '../select/type.mjs';
import '../input-adornment/index.mjs';
import '../input-adornment/input-adornment.mjs';
import '../input-adornment/props.mjs';
import '../input-adornment/type.mjs';
import '../pagination/props.mjs';
import '../pagination/usePaginationClasses.mjs';
import '../pagination/useMoreAction.mjs';
import '../pagination/type.mjs';
import './hooks/useRowspanAndColspan.mjs';
import '../affix/affix.mjs';
import '../_chunks/dep-9262ea29.mjs';
import '../affix/props.mjs';
import '../affix/type.mjs';
import './hooks/useLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var BASE_TABLE_EVENTS = ["page-change", "cell-click", "scroll", "scrollX", "scrollY"];
var BASE_TABLE_ALL_EVENTS = ROW_LISTENERS.map(function (t) {
  return "row-".concat(t);
}).concat(BASE_TABLE_EVENTS);
var _BaseTable = defineComponent({
  name: "TBaseTable",
  props: _objectSpread(_objectSpread({}, baseTableProps), {}, {
    renderExpandedRow: Function,
    onLeafColumnsChange: Function
  }),
  setup: function setup(props2, context) {
    var _props2$scroll2;

    var renderTNode = useTNodeJSX();
    var tableRef = ref();
    var tableElmRef = ref();
    var tableBodyRef = ref();
    var tableFootHeight = ref(0);

    var _useClassName = useClassName(),
        virtualScrollClasses = _useClassName.virtualScrollClasses,
        tableLayoutClasses = _useClassName.tableLayoutClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableColFixedClasses = _useClassName.tableColFixedClasses;

    var _useStyle = useStyle(props2),
        tableClasses = _useStyle.tableClasses,
        tableContentStyles = _useStyle.tableContentStyles,
        tableElementStyles = _useStyle.tableElementStyles;

    var _useConfig = useConfig("table"),
        globalConfig = _useConfig.globalConfig;

    var _useTableHeader = useTableHeader(props2),
        isMultipleHeader = _useTableHeader.isMultipleHeader,
        spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
        thList = _useTableHeader.thList;

    var finalColumns = computed(function () {
      var _spansAndLeafNodes$va;

      return ((_spansAndLeafNodes$va = spansAndLeafNodes.value) === null || _spansAndLeafNodes$va === void 0 ? void 0 : _spansAndLeafNodes$va.leafColumns) || props2.columns;
    });

    var _useFixed = useFixed(props2, context, finalColumns),
        scrollbarWidth = _useFixed.scrollbarWidth,
        virtualScrollHeaderPos = _useFixed.virtualScrollHeaderPos,
        tableWidth = _useFixed.tableWidth,
        tableElmWidth = _useFixed.tableElmWidth,
        tableContentRef = _useFixed.tableContentRef,
        isFixedHeader = _useFixed.isFixedHeader,
        isWidthOverflow = _useFixed.isWidthOverflow,
        isFixedColumn = _useFixed.isFixedColumn,
        thWidthList = _useFixed.thWidthList,
        showColumnShadow = _useFixed.showColumnShadow,
        rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
        setData = _useFixed.setData,
        refreshTable = _useFixed.refreshTable,
        emitScrollEvent = _useFixed.emitScrollEvent,
        setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
        updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
        getThWidthList = _useFixed.getThWidthList,
        updateThWidthList = _useFixed.updateThWidthList,
        setRecalculateColWidthFuncRef = _useFixed.setRecalculateColWidthFuncRef,
        addTableResizeObserver = _useFixed.addTableResizeObserver;

    var _useAffix = useAffix(props2),
        affixHeaderRef = _useAffix.affixHeaderRef,
        affixFooterRef = _useAffix.affixFooterRef,
        horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
        paginationRef = _useAffix.paginationRef,
        showAffixHeader = _useAffix.showAffixHeader,
        showAffixFooter = _useAffix.showAffixFooter,
        showAffixPagination = _useAffix.showAffixPagination,
        onHorizontalScroll = _useAffix.onHorizontalScroll,
        setTableContentRef = _useAffix.setTableContentRef,
        updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter;

    var _usePagination = usePagination(props2),
        dataSource = _usePagination.dataSource,
        isPaginateData = _usePagination.isPaginateData,
        renderPagination = _usePagination.renderPagination;

    var columnResizeParams = useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList);
    var resizeLineRef = columnResizeParams.resizeLineRef,
        resizeLineStyle = columnResizeParams.resizeLineStyle,
        recalculateColWidth = columnResizeParams.recalculateColWidth,
        setEffectColMap = columnResizeParams.setEffectColMap;
    setRecalculateColWidthFuncRef(recalculateColWidth);
    var dynamicBaseTableClasses = computed(function () {
      var _ref;

      return [tableClasses.value, (_ref = {}, _defineProperty(_ref, tableBaseClass.headerFixed, isFixedHeader.value), _defineProperty(_ref, tableBaseClass.columnFixed, isFixedColumn.value), _defineProperty(_ref, tableBaseClass.widthOverflow, isWidthOverflow.value), _defineProperty(_ref, tableBaseClass.multipleHeader, isMultipleHeader.value), _defineProperty(_ref, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty(_ref, tableColFixedClasses.rightShadow, showColumnShadow.right), _defineProperty(_ref, tableBaseClass.columnResizableTable, props2.resizable), _ref)];
    });
    var tableElmClasses = computed(function () {
      return [[tableLayoutClasses[props2.tableLayout]], _defineProperty({}, tableBaseClass.fullHeight, props2.height)];
    });
    var isVirtual = computed(function () {
      var _props2$data, _props2$scroll;

      return type === "virtual" && ((_props2$data = props2.data) === null || _props2$data === void 0 ? void 0 : _props2$data.length) > (((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.threshold) || 100);
    });
    var showRightDivider = computed(function () {
      return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
    });
    watch(tableElmRef, function () {
      setUseFixedTableElmRef(tableElmRef.value);
    });
    watch(function () {
      return [props2.data, dataSource];
    }, function () {
      setData(isPaginateData.value ? dataSource.value : props2.data);
    });
    watch(spansAndLeafNodes, function () {
      var _props2$onLeafColumns;

      (_props2$onLeafColumns = props2.onLeafColumnsChange) === null || _props2$onLeafColumns === void 0 ? void 0 : _props2$onLeafColumns.call(props2, spansAndLeafNodes.value.leafColumns);
    }, {
      immediate: true
    });
    watch(thList, function () {
      setEffectColMap(thList.value[0], null);
    }, {
      immediate: true
    });

    var onFixedChange = function onFixedChange() {
      nextTick(function () {
        onHorizontalScroll();
        updateAffixHeaderOrFooter();
      });
    };

    var _ref3 = props2.scroll || {},
        type = _ref3.type,
        rowHeight = _ref3.rowHeight,
        _ref3$bufferSize = _ref3.bufferSize,
        bufferSize = _ref3$bufferSize === void 0 ? 20 : _ref3$bufferSize,
        _ref3$isFixedRowHeigh = _ref3.isFixedRowHeight,
        isFixedRowHeight = _ref3$isFixedRowHeigh === void 0 ? false : _ref3$isFixedRowHeigh;

    var _toRefs = toRefs(props2),
        data = _toRefs.data;

    var _ref4 = type === "virtual" ? useVirtualScroll({
      container: tableContentRef,
      data: data,
      fixedHeight: isFixedRowHeight,
      lineHeight: rowHeight,
      bufferSize: bufferSize,
      threshold: (_props2$scroll2 = props2.scroll) === null || _props2$scroll2 === void 0 ? void 0 : _props2$scroll2.threshold
    }) : {},
        _ref4$trs = _ref4.trs,
        trs = _ref4$trs === void 0 ? null : _ref4$trs,
        _ref4$scrollHeight = _ref4.scrollHeight,
        scrollHeight = _ref4$scrollHeight === void 0 ? null : _ref4$scrollHeight,
        _ref4$visibleData = _ref4.visibleData,
        visibleData = _ref4$visibleData === void 0 ? null : _ref4$visibleData,
        _ref4$translateY = _ref4.translateY,
        translateY = _ref4$translateY === void 0 ? null : _ref4$translateY,
        _ref4$handleScroll = _ref4.handleScroll,
        handleVirtualScroll = _ref4$handleScroll === void 0 ? null : _ref4$handleScroll,
        _ref4$handleRowMounte = _ref4.handleRowMounted,
        handleRowMounted = _ref4$handleRowMounte === void 0 ? null : _ref4$handleRowMounte;

    provide("tableContentRef", tableContentRef);
    provide("rowHeightRef", ref(rowHeight));
    var lastScrollY = 0;

    var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
      var target = e.target || e.srcElement;
      var top = target.scrollTop;

      if (lastScrollY !== top) {
        isVirtual.value && handleVirtualScroll();
      } else {
        lastScrollY = 0;
        updateColumnFixedShadow(target);
      }

      lastScrollY = top;
      emitScrollEvent(e);
    };

    var getTFootHeight = function getTFootHeight() {
      var _tableElmRef$value$qu;

      if (!tableElmRef.value) return;
      tableFootHeight.value = (_tableElmRef$value$qu = tableElmRef.value.querySelector("tfoot")) === null || _tableElmRef$value$qu === void 0 ? void 0 : _tableElmRef$value$qu.getBoundingClientRect().height;
    };

    watch(tableContentRef, function () {
      setTableContentRef(tableContentRef.value);
    });
    watch(tableElmRef, getTFootHeight);
    watch(tableRef, function (tableRef2) {
      addTableResizeObserver(tableRef2);
    });
    onMounted(function () {
      getTFootHeight();
      setTableContentRef(tableContentRef.value);
      addTableResizeObserver(tableRef.value);
    });
    return {
      thList: thList,
      isVirtual: isVirtual,
      globalConfig: globalConfig,
      tableFootHeight: tableFootHeight,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      tableWidth: tableWidth,
      tableElmWidth: tableElmWidth,
      tableRef: tableRef,
      tableElmRef: tableElmRef,
      tableBaseClass: tableBaseClass,
      spansAndLeafNodes: spansAndLeafNodes,
      dynamicBaseTableClasses: dynamicBaseTableClasses,
      tableContentStyles: tableContentStyles,
      tableElementStyles: tableElementStyles,
      virtualScrollClasses: virtualScrollClasses,
      tableLayoutClasses: tableLayoutClasses,
      tableElmClasses: tableElmClasses,
      tableContentRef: tableContentRef,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      isFixedColumn: isFixedColumn,
      rowAndColFixedPosition: rowAndColFixedPosition,
      showColumnShadow: showColumnShadow,
      thWidthList: thWidthList,
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      scrollType: type,
      rowHeight: rowHeight,
      trs: trs,
      bufferSize: bufferSize,
      scrollHeight: scrollHeight,
      visibleData: visibleData,
      translateY: translateY,
      affixHeaderRef: affixHeaderRef,
      affixFooterRef: affixFooterRef,
      paginationRef: paginationRef,
      showAffixHeader: showAffixHeader,
      showAffixFooter: showAffixFooter,
      scrollbarWidth: scrollbarWidth,
      isMultipleHeader: isMultipleHeader,
      showRightDivider: showRightDivider,
      resizeLineRef: resizeLineRef,
      resizeLineStyle: resizeLineStyle,
      columnResizeParams: columnResizeParams,
      horizontalScrollbarRef: horizontalScrollbarRef,
      tableBodyRef: tableBodyRef,
      showAffixPagination: showAffixPagination,
      renderPagination: renderPagination,
      renderTNode: renderTNode,
      handleRowMounted: handleRowMounted,
      onFixedChange: onFixedChange,
      onHorizontalScroll: onHorizontalScroll,
      updateAffixHeaderOrFooter: updateAffixHeaderOrFooter,
      refreshTable: refreshTable,
      onInnerVirtualScroll: onInnerVirtualScroll
    };
  },
  render: function render() {
    var _this$spansAndLeafNod,
        _navigator,
        _this$affixHeaderRef,
        _this = this,
        _this$footData,
        _this$tableContentRef;

    var rowAndColFixedPosition = this.rowAndColFixedPosition;
    var data = this.isPaginateData ? this.dataSource : this.data;
    var columns = ((_this$spansAndLeafNod = this.spansAndLeafNodes) === null || _this$spansAndLeafNod === void 0 ? void 0 : _this$spansAndLeafNod.leafColumns) || this.columns;
    var columnResizable = this.allowResizeColumnWidth === void 0 ? this.resizable : this.allowResizeColumnWidth;

    if (columnResizable && this.tableLayout === "auto") {
      log.warn("Table", "table-layout can not be `auto` for resizable column table, set `table-layout: fixed` please.");
    }

    var defaultColWidth = this.tableLayout === "fixed" && this.isWidthOverflow ? "100px" : void 0;
    var onlyVirtualScrollBordered = !!(this.isVirtual && !this.headerAffixedTop && this.bordered) && /Chrome/.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent);
    var borderWidth = this.bordered && onlyVirtualScrollBordered ? 1 : 0;
    var affixHeaderWrapHeight = (((_this$affixHeaderRef = this.affixHeaderRef) === null || _this$affixHeaderRef === void 0 ? void 0 : _this$affixHeaderRef.getBoundingClientRect().height) || 0) - this.scrollbarWidth - borderWidth;
    var headerOpacity = baseTableProps.headerAffixedTop ? Number(this.showAffixHeader) : 1;
    var affixHeaderWrapHeightStyle = {
      width: "".concat(this.tableWidth, "px"),
      height: "".concat(affixHeaderWrapHeight, "px"),
      opacity: headerOpacity,
      marginTop: onlyVirtualScrollBordered ? "".concat(borderWidth, "px") : 0
    };
    var affixedLeftBorder = this.bordered ? 1 : 0;

    var affixedHeader = Boolean((this.headerAffixedTop || this.isVirtual) && this.tableWidth) && createVNode("div", {
      "ref": "affixHeaderRef",
      "style": {
        width: "".concat(this.tableWidth - affixedLeftBorder, "px"),
        opacity: Number(this.showAffixHeader)
      },
      "class": ["scrollbar", _defineProperty({}, this.tableBaseClass.affixedHeaderElm, this.headerAffixedTop || this.isVirtual)]
    }, [createVNode("table", {
      "class": this.tableElmClasses,
      "style": _objectSpread(_objectSpread({}, this.tableElementStyles), {}, {
        width: "".concat(this.tableElmWidth, "px")
      })
    }, [createVNode("colgroup", null, [columns.map(function (col) {
      var style = {
        width: formatCSSUnit(_this.thWidthList[col.colKey] || col.width) || defaultColWidth
      };

      if (col.minWidth) {
        style.minWidth = formatCSSUnit(col.minWidth);
      }

      return createVNode("col", {
        "key": col.colKey,
        "style": style
      }, null);
    })]), createVNode(THead, {
      "isFixedHeader": this.isFixedHeader,
      "rowAndColFixedPosition": this.rowAndColFixedPosition,
      "isMultipleHeader": this.isMultipleHeader,
      "bordered": this.bordered,
      "spansAndLeafNodes": this.spansAndLeafNodes,
      "thList": this.thList,
      "thWidthList": this.thWidthList,
      "resizable": this.resizable,
      "columnResizeParams": this.columnResizeParams
    }, this.$slots)])]);

    var affixHeaderWithWrap = createVNode("div", {
      "class": this.tableBaseClass.affixedHeaderWrap,
      "style": affixHeaderWrapHeightStyle
    }, [affixedHeader]);

    var marginScrollbarWidth = this.isWidthOverflow ? this.scrollbarWidth : 0;

    if (this.bordered) {
      marginScrollbarWidth += 1;
    }

    var affixedFooter = Boolean(this.footerAffixedBottom && ((_this$footData = this.footData) === null || _this$footData === void 0 ? void 0 : _this$footData.length) && this.tableWidth) && createVNode(Affix, mergeProps({
      "class": this.tableBaseClass.affixedFooterWrap,
      "onFixedChange": this.onFixedChange,
      "offsetBottom": marginScrollbarWidth || 0
    }, getAffixProps(this.footerAffixedBottom), {
      "style": {
        marginTop: "".concat(-1 * (this.tableFootHeight + marginScrollbarWidth), "px")
      }
    }), {
      "default": function _default() {
        return [createVNode("div", {
          "ref": "affixFooterRef",
          "style": {
            width: "".concat(_this.tableWidth - affixedLeftBorder, "px"),
            opacity: Number(_this.showAffixFooter)
          },
          "class": ["scrollbar", _defineProperty({}, _this.tableBaseClass.affixedFooterElm, _this.footerAffixedBottom || _this.isVirtual)]
        }, [createVNode("table", {
          "class": _this.tableElmClasses,
          "style": _objectSpread(_objectSpread({}, _this.tableElementStyles), {}, {
            width: "".concat(_this.tableElmWidth, "px")
          })
        }, [createVNode("colgroup", null, [columns.map(function (col) {
          var style = {
            width: formatCSSUnit(_this.thWidthList[col.colKey] || col.width) || defaultColWidth
          };

          if (col.minWidth) {
            style.minWidth = formatCSSUnit(col.minWidth);
          }

          return createVNode("col", {
            "key": col.colKey,
            "style": style
          }, null);
        })]), createVNode(TFoot, {
          "rowKey": _this.rowKey,
          "isFixedHeader": _this.isFixedHeader,
          "rowAndColFixedPosition": rowAndColFixedPosition,
          "footData": _this.footData,
          "columns": columns,
          "rowAttributes": _this.rowAttributes,
          "rowClassName": _this.rowClassName,
          "thWidthList": _this.thWidthList,
          "footerSummary": _this.footerSummary,
          "rowspanAndColspanInFooter": _this.rowspanAndColspanInFooter
        }, _this.$slots)])])];
      }
    });

    var translate = "translate(0, ".concat(this.scrollHeight, "px)");
    var virtualStyle = {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    };

    var tableBodyProps = _objectSpread({
      rowAndColFixedPosition: rowAndColFixedPosition,
      showColumnShadow: this.showColumnShadow,
      data: this.isVirtual ? this.visibleData : data,
      columns: this.spansAndLeafNodes.leafColumns,
      tableElm: this.tableRef,
      tableWidth: this.tableWidth,
      isWidthOverflow: this.isWidthOverflow,
      isVirtual: this.isVirtual,
      translateY: this.translateY,
      scrollType: this.scrollType,
      rowHeight: this.rowHeight,
      trs: this.trs,
      bufferSize: this.bufferSize,
      scroll: this.scroll,
      cellEmptyContent: this.cellEmptyContent,
      tableContentElm: this.tableContentRef,
      handleRowMounted: this.handleRowMounted,
      renderExpandedRow: this.renderExpandedRow
    }, pick_1(this.$props, extendTableProps));

    var tableContent = createVNode("div", {
      "ref": "tableContentRef",
      "class": this.tableBaseClass.content,
      "style": this.tableContentStyles,
      "onScroll": this.onInnerVirtualScroll
    }, [this.isVirtual && createVNode("div", {
      "class": this.virtualScrollClasses.cursor,
      "style": virtualStyle
    }, null), createVNode("table", {
      "ref": "tableElmRef",
      "class": this.tableElmClasses,
      "style": this.tableElementStyles
    }, [createVNode("colgroup", null, [columns.map(function (col) {
      var style = {
        width: formatCSSUnit(_this.thWidthList[col.colKey] || col.width) || defaultColWidth
      };

      if (col.minWidth) {
        style.minWidth = formatCSSUnit(col.minWidth);
      }

      return createVNode("col", {
        "key": col.colKey,
        "style": style
      }, null);
    })]), createVNode(THead, {
      "isFixedHeader": this.isFixedHeader,
      "rowAndColFixedPosition": this.rowAndColFixedPosition,
      "isMultipleHeader": this.isMultipleHeader,
      "bordered": this.bordered,
      "spansAndLeafNodes": this.spansAndLeafNodes,
      "thList": this.thList,
      "thWidthList": this.thWidthList,
      "resizable": this.resizable,
      "columnResizeParams": this.columnResizeParams
    }, this.$slots), createVNode(TBody, tableBodyProps, this.$slots), createVNode(TFoot, {
      "rowKey": this.rowKey,
      "isFixedHeader": this.isFixedHeader,
      "rowAndColFixedPosition": rowAndColFixedPosition,
      "footData": this.footData,
      "columns": columns,
      "rowAttributes": this.rowAttributes,
      "rowClassName": this.rowClassName,
      "footerSummary": this.footerSummary,
      "rowspanAndColspanInFooter": this.rowspanAndColspanInFooter
    }, this.$slots)])]);

    var customLoadingText = this.renderTNode("loading");

    var loadingContent = this.loading !== void 0 && createVNode(Loading, mergeProps({
      "loading": !!this.loading,
      "text": customLoadingText ? function () {
        return customLoadingText;
      } : void 0,
      "attach": this.tableRef ? function () {
        return _this.tableRef;
      } : void 0,
      "showOverlay": true,
      "size": "small"
    }, this.loadingProps), null);

    var topContent = this.renderTNode("topContent");
    var bottomContent = this.renderTNode("bottomContent");

    var pagination = createVNode("div", {
      "ref": "paginationRef",
      "class": this.tableBaseClass.paginationWrap,
      "style": {
        opacity: Number(this.showAffixPagination)
      }
    }, [this.renderPagination()]);

    var bottom = !!bottomContent && createVNode("div", {
      "class": this.tableBaseClass.bottomContent
    }, [bottomContent]);

    return createVNode("div", {
      "ref": "tableRef",
      "class": this.dynamicBaseTableClasses,
      "style": "position: relative"
    }, [!!topContent && createVNode("div", {
      "class": this.tableBaseClass.topContent
    }, [topContent]), !!(this.isVirtual || this.headerAffixedTop) && (this.headerAffixedTop ? createVNode(Affix, mergeProps({
      "offsetTop": 0
    }, getAffixProps(this.headerAffixedTop), {
      "onFixedChange": this.onFixedChange
    }), _isSlot(affixHeaderWithWrap) ? affixHeaderWithWrap : {
      "default": function _default() {
        return [affixHeaderWithWrap];
      }
    }) : this.isFixedHeader && affixHeaderWithWrap), tableContent, affixedFooter, loadingContent, this.showRightDivider && createVNode("div", {
      "class": this.tableBaseClass.scrollbarDivider,
      "style": {
        right: "".concat(this.scrollbarWidth, "px"),
        height: "".concat((_this$tableContentRef = this.tableContentRef) === null || _this$tableContentRef === void 0 ? void 0 : _this$tableContentRef.getBoundingClientRect().height, "px")
      }
    }, null), bottom, this.horizontalScrollAffixedBottom && createVNode(Affix, mergeProps({
      "offsetBottom": 0
    }, getAffixProps(this.horizontalScrollAffixedBottom), {
      "style": {
        marginTop: "-".concat(this.scrollbarWidth * 2, "px")
      }
    }), {
      "default": function _default() {
        return [createVNode("div", {
          "ref": "horizontalScrollbarRef",
          "class": ["scrollbar", _this.tableBaseClass.obviousScrollbar],
          "style": {
            width: "".concat(_this.tableWidth, "px"),
            overflow: "auto",
            opacity: Number(_this.showAffixFooter)
          }
        }, [createVNode("div", {
          "style": {
            width: "".concat(_this.tableElmWidth, "px"),
            height: "5px"
          }
        }, null)])];
      }
    }), this.paginationAffixedBottom ? createVNode(Affix, mergeProps({
      "offsetBottom": 0
    }, getAffixProps(this.paginationAffixedBottom)), _isSlot(pagination) ? pagination : {
      "default": function _default() {
        return [pagination];
      }
    }) : pagination, createVNode("div", {
      "ref": "resizeLineRef",
      "class": this.tableBaseClass.resizeLine,
      "style": this.resizeLineStyle
    }, null)]);
  }
});

export { BASE_TABLE_ALL_EVENTS, BASE_TABLE_EVENTS, _BaseTable as default };
//# sourceMappingURL=base-table.mjs.map
