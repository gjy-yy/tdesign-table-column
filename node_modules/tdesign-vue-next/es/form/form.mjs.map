{"version":3,"file":"form.mjs","sources":["../../src/form/form.tsx"],"sourcesContent":["import { computed, defineComponent, provide, reactive, ref, toRefs } from 'vue';\nimport isEmpty from 'lodash/isEmpty';\nimport isBoolean from 'lodash/isBoolean';\nimport isArray from 'lodash/isArray';\nimport isFunction from 'lodash/isFunction';\nimport { requestSubmit } from '../utils/dom';\nimport { FormItemValidateResult } from './form-item';\nimport {\n  Data,\n  FormResetParams,\n  FormValidateMessage,\n  FormValidateParams,\n  FormValidateResult,\n  TdFormProps,\n  ValidateResultList,\n} from './type';\nimport props from './props';\nimport { FormInjectionKey, FormItemContext, useCLASSNAMES } from './const';\nimport { FormResetEvent, FormSubmitEvent } from '../common';\n\nimport { FormDisabledProvider } from './hooks';\nimport { usePrefixClass, useTNodeJSX } from '../hooks';\n\ntype Result = FormValidateResult<TdFormProps['data']>;\n\nexport default defineComponent({\n  name: 'TForm',\n\n  props: { ...props },\n\n  setup(props, { expose }) {\n    const renderContent = useTNodeJSX();\n    const { disabled } = toRefs(props);\n    provide<FormDisabledProvider>('formDisabled', {\n      disabled,\n    });\n\n    const formRef = ref<HTMLFormElement>(null);\n    const children = ref<FormItemContext[]>([]);\n\n    const { showErrorMessage, labelWidth, labelAlign, data, colon, requiredMark, rules, errorMessage, resetType } =\n      toRefs(props);\n    provide(\n      FormInjectionKey,\n      reactive({\n        showErrorMessage,\n        labelWidth,\n        labelAlign,\n        data,\n        colon,\n        requiredMark,\n        rules,\n        errorMessage,\n        resetType,\n        children,\n        renderContent,\n      }),\n    );\n\n    const COMPONENT_NAME = usePrefixClass('form');\n    const CLASS_NAMES = useCLASSNAMES();\n    const formClass = computed(() => [\n      CLASS_NAMES.value.form,\n      { [`${COMPONENT_NAME.value}-inline`]: props.layout === 'inline' },\n    ]);\n\n    const FORM_ITEM_CLASS_PREFIX = usePrefixClass('form-item__');\n\n    const getFirstError = (result: Result) => {\n      if (isBoolean(result)) return '';\n      const [firstKey] = Object.keys(result);\n      if (props.scrollToFirstError) {\n        scrollTo(`.${FORM_ITEM_CLASS_PREFIX.value + firstKey}`);\n      }\n      const resArr = result[firstKey] as ValidateResultList;\n      if (!isArray(resArr)) return '';\n      return resArr.filter((item) => !item.result)[0].message;\n    };\n    // 校验不通过时，滚动到第一个错误表单\n    const scrollTo = (selector: string) => {\n      const dom = formRef.value?.querySelector(selector);\n      const behavior = props.scrollToFirstError;\n      if (behavior) {\n        dom && dom.scrollIntoView({ behavior });\n      }\n    };\n\n    const needValidate = (name: string | number, fields: string[] | undefined) => {\n      if (!fields || !Array.isArray(fields)) return true;\n      return fields.indexOf(`${name}`) !== -1;\n    };\n    const formatValidateResult = <T extends Data>(validateResultList: FormItemValidateResult<T>[]) => {\n      const result = validateResultList.reduce((r, err) => Object.assign(r || {}, err), {});\n      Object.keys(result).forEach((key) => {\n        if (result[key] === true) {\n          delete result[key];\n        }\n      });\n      return isEmpty(result) ? true : result;\n    };\n    const validate = async (param?: FormValidateParams): Promise<Result> => {\n      const { fields, trigger = 'all', showErrorMessage } = param || {};\n      const list = children.value\n        .filter((child) => isFunction(child.validate) && needValidate(String(child.name), fields))\n        .map((child) => child.validate(trigger, showErrorMessage));\n      const arr = await Promise.all(list);\n      const result = formatValidateResult(arr);\n      const firstError = getFirstError(result);\n      props.onValidate?.({\n        validateResult: result,\n        firstError,\n      });\n      return result;\n    };\n    const validateOnly = async (params?: Omit<FormValidateParams, 'showErrorMessage'>) => {\n      const { fields, trigger = 'all' } = params || {};\n      const list = children.value\n        .filter((child) => isFunction(child.validateOnly) && needValidate(String(child.name), fields))\n        .map((child) => child.validateOnly(trigger));\n      const arr = await Promise.all(list);\n      return formatValidateResult(arr);\n    };\n    const submitParams = ref<Pick<FormValidateParams, 'showErrorMessage'>>();\n    const onSubmit = (e?: FormSubmitEvent) => {\n      if (props.preventSubmitDefault && e) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      validate(submitParams.value).then((r) => {\n        props.onSubmit?.({ validateResult: r, firstError: getFirstError(r), e });\n      });\n      submitParams.value = undefined;\n    };\n    const submit = async <T extends Data>(params?: Pick<FormValidateParams, 'showErrorMessage'>) => {\n      submitParams.value = params;\n      requestSubmit(formRef.value);\n    };\n\n    const resetParams = ref<FormResetParams<Data>>();\n    const onReset = (e?: FormResetEvent) => {\n      if (props.preventSubmitDefault && e) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      children.value\n        .filter((child) => isFunction(child.resetField) && needValidate(String(child.name), resetParams.value?.fields))\n        .forEach((child) => child.resetField(resetParams.value?.type));\n      resetParams.value = undefined;\n      props.onReset?.({ e });\n    };\n    const reset = <FormData extends Data>(params?: FormResetParams<FormData>) => {\n      (resetParams.value as any) = params;\n      formRef.value.reset();\n    };\n\n    const clearValidate = (fields?: Array<string>) => {\n      children.value.forEach((child) => {\n        if (isFunction(child.resetHandler) && needValidate(String(child.name), fields)) {\n          child.resetHandler();\n        }\n      });\n    };\n    const setValidateMessage = (validateMessage: FormValidateMessage<FormData>) => {\n      const keys = Object.keys(validateMessage);\n      if (!keys.length) return;\n      const list = children.value\n        .filter((child) => isFunction(child.setValidateMessage) && keys.includes(`${child.name}`))\n        .map((child) => child.setValidateMessage(validateMessage[child.name]));\n      Promise.all(list);\n    };\n\n    expose({ validate, submit, reset, clearValidate, setValidateMessage, validateOnly });\n\n    return () => (\n      <form ref={formRef} class={formClass.value} onSubmit={(e) => onSubmit(e)} onReset={(e) => onReset(e)}>\n        {renderContent('default')}\n      </form>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","setup","expose","renderContent","useTNodeJSX","toRefs","disabled","provide","formRef","ref","children","showErrorMessage","labelWidth","labelAlign","data","colon","requiredMark","rules","errorMessage","resetType","FormInjectionKey","reactive","COMPONENT_NAME","usePrefixClass","CLASS_NAMES","useCLASSNAMES","formClass","computed","value","form","layout","FORM_ITEM_CLASS_PREFIX","getFirstError","result","isBoolean","Object","keys","firstKey","scrollToFirstError","scrollTo","resArr","isArray","filter","item","message","selector","dom","querySelector","behavior","scrollIntoView","needValidate","fields","Array","indexOf","formatValidateResult","validateResultList","reduce","r","err","assign","forEach","key","isEmpty","validate","_regeneratorRuntime","param","trigger","list","child","isFunction","String","map","Promise","all","arr","firstError","onValidate","validateResult","validateOnly","params","submitParams","onSubmit","e","preventSubmitDefault","preventDefault","stopPropagation","then","submit","requestSubmit","resetParams","onReset","resetField","type","reset","clearValidate","resetHandler","setValidateMessage","validateMessage","length","includes","_createVNode"],"mappings":"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"}