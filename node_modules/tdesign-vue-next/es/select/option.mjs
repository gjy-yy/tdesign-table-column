/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { isVNode, defineComponent, inject, ref, computed, onMounted, onBeforeUnmount, createVNode } from 'vue';
import props from './option-props.mjs';
import { Checkbox } from '../checkbox/index.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import useRipple from '../hooks/useRipple.mjs';
import { useContent } from '../hooks/tnode.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { selectInjectKey, getNewMultipleValue } from './helper.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-dcf624da.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../checkbox/props.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-7071345f.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../checkbox/constants.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/useConfig.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-2684fd15.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-8c39d78a.mjs';
import '../_chunks/dep-2ca0e5ff.mjs';
import '../_chunks/dep-c5bb3a66.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';
import '../_chunks/dep-ef911020.mjs';
import '../_chunks/dep-efb50e88.mjs';
import '../_chunks/dep-10db0930.mjs';
import '../_chunks/dep-ad0cc3b4.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var _Option = defineComponent({
  name: "TOption",
  props: _objectSpread(_objectSpread({}, props), {}, {
    createAble: Boolean,
    multiple: Boolean,
    index: Number,
    rowIndex: Number,
    trs: Map,
    scrollType: String,
    isVirtual: Boolean,
    bufferSize: Number,
    checkAll: Boolean
  }),
  emits: ["row-mounted"],
  setup: function setup(props2, context) {
    var selectProvider = inject(selectInjectKey);
    var formDisabled = useFormDisabled();
    var optionNode = ref(null);
    var disabled = computed(function () {
      return formDisabled.value || props2.multiple && selectProvider.value.max <= selectProvider.value.selectValue.length && selectProvider.value.max !== 0;
    });
    var renderContent = useContent();
    var selectName = usePrefixClass("select");

    var _useCommonClassName = useCommonClassName(),
        STATUS = _useCommonClassName.STATUS,
        SIZE = _useCommonClassName.SIZE;

    var liRef = ref();
    var isHover = ref(false);
    var isSelected = computed(function () {
      if (selectProvider.value.isCheckAll && !props2.disabled) return true;
      return !props2.multiple ? selectProvider.value.selectValue === props2.value : selectProvider.value.selectValue.includes(props2.value);
    });
    var isIndeterminate = computed(function () {
      if (!props2.checkAll) return false;
      return selectProvider.value.indeterminate;
    });
    var classes = computed(function () {
      var _ref;

      return ["".concat(selectName.value, "-option"), [SIZE.value[selectProvider.value.size]], (_ref = {}, _defineProperty(_ref, STATUS.value.disabled, disabled.value), _defineProperty(_ref, STATUS.value.selected, isSelected.value), _defineProperty(_ref, "".concat(selectName.value, "-option__hover"), (isHover.value || selectProvider.value.hoverIndex === props2.index) && !disabled.value && !isSelected.value), _ref)];
    });
    var labelText = computed(function () {
      return props2.label || props2.value;
    });

    var handleClick = function handleClick(e) {
      if (props2.multiple || props2.disabled) return;
      e.stopPropagation();

      if (props2.createAble) {
        var _selectProvider$value, _selectProvider$value2;

        (_selectProvider$value = (_selectProvider$value2 = selectProvider.value).handleCreate) === null || _selectProvider$value === void 0 ? void 0 : _selectProvider$value.call(_selectProvider$value2, props2.value);

        if (selectProvider.value.multiple) {
          selectProvider.value.selectValue.push(props2.value);
          selectProvider.value.handleValueChange(selectProvider.value.selectValue, {
            selectedOptions: selectProvider.value.getSelectedOptions(),
            trigger: "check",
            e: e
          });
          return;
        }
      }

      selectProvider.value.handleValueChange(props2.value, {
        selectedOptions: selectProvider.value.getSelectedOptions(props2.value),
        trigger: "check",
        e: e
      });
      selectProvider.value.handlePopupVisibleChange(false, {
        e: e
      });
    };

    var handleCheckboxClick = function handleCheckboxClick(val, context2) {
      if (props2.checkAll) {
        selectProvider.value.onCheckAllChange(val);
        return;
      }

      var newValue = getNewMultipleValue(selectProvider.value.selectValue, props2.value);
      selectProvider.value.handleValueChange(newValue.value, {
        selectedOptions: selectProvider.value.getSelectedOptions(newValue.value),
        trigger: val ? "check" : "uncheck",
        e: context2.e
      });

      if (!selectProvider.value.reserveKeyword) {
        selectProvider.value.handlerInputChange("");
      }
    };

    onMounted(function () {
      var trs = props2.trs,
          rowIndex = props2.rowIndex,
          isVirtual = props2.isVirtual;

      if (isVirtual) {
        trs.set(rowIndex, liRef.value);
        context.emit("row-mounted");
      }
    });
    onBeforeUnmount(function () {
      if (props2.isVirtual) {
        var trs = props2.trs,
            rowIndex = props2.rowIndex;
        trs["delete"](rowIndex);
      }
    });
    useRipple(liRef);
    return function () {
      var optionChild = renderContent("default", "content") || labelText.value;
      return createVNode("li", {
        "ref": liRef,
        "class": classes.value,
        "title": "".concat(labelText.value),
        "onMouseenter": function onMouseenter() {
          return isHover.value = true;
        },
        "onMouseleave": function onMouseleave() {
          return isHover.value = false;
        },
        "onClick": handleClick
      }, [selectProvider && props2.multiple ? createVNode(Checkbox, {
        "checked": isSelected.value,
        "disabled": disabled.value && !isSelected.value,
        "onChange": handleCheckboxClick,
        "indeterminate": isIndeterminate.value
      }, _isSlot(optionChild) ? optionChild : {
        "default": function _default() {
          return [optionChild];
        }
      }) : createVNode("span", null, [optionChild])]);
    };
  }
});

export { _Option as default };
//# sourceMappingURL=option.mjs.map
