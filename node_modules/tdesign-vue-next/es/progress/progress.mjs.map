{"version":3,"file":"progress.mjs","sources":["../../src/progress/progress.tsx"],"sourcesContent":["import { defineComponent, VNode, computed, CSSProperties } from 'vue';\nimport {\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n  CloseIcon as TdCloseIcon,\n  CheckIcon as TdCheckIcon,\n  ErrorIcon as TdErrorIcon,\n} from 'tdesign-icons-vue-next';\n\nimport { getBackgroundColor } from '../utils/helper';\nimport { PRO_THEME, CIRCLE_SIZE, CIRCLE_SIZE_PX, STATUS_ICON, CIRCLE_FONT_SIZE_RATIO } from './constants';\nimport props from './props';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nexport default defineComponent({\n  name: 'TProgress',\n  props,\n  setup(props) {\n    const renderTNodeJSX = useTNodeJSX();\n    const COMPONENT_NAME = usePrefixClass('progress');\n    const { CloseCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseIcon, CheckIcon, ErrorIcon } =\n      useGlobalIcon({\n        CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n        CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n        ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n        CloseIcon: TdCloseIcon,\n        CheckIcon: TdCheckIcon,\n        ErrorIcon: TdErrorIcon,\n      });\n\n    const statusStyle = computed(() => {\n      if (props.percentage >= 100) {\n        return 'success';\n      }\n      return props.status || 'default';\n    });\n\n    const trackBgStyle = computed(() => {\n      const style: CSSProperties = {};\n      if (props.strokeWidth) {\n        const height = typeof props.strokeWidth === 'string' ? props.strokeWidth : `${props.strokeWidth}px`;\n        style.height = height;\n        style.borderRadius = height;\n      }\n      if (props.trackColor) {\n        style.backgroundColor = props.trackColor;\n      }\n      return style;\n    });\n\n    const barStyle = computed(() => {\n      return {\n        width: `${props.percentage}%`,\n        background: props.color && getBackgroundColor(props.color),\n      };\n    });\n\n    const circlePathStyle = computed(() => {\n      const strokeColor = typeof props.color === 'object' ? '' : props.color;\n      return {\n        stroke: strokeColor,\n      };\n    });\n\n    // theme=circle 获取直径\n    const diameter = computed(() => {\n      let diameter = CIRCLE_SIZE_PX.MEDIUM;\n      if (!props.size) {\n        return diameter;\n      }\n      const { SMALL, LARGE, MEDIUM } = CIRCLE_SIZE;\n      switch (props.size) {\n        case SMALL:\n          diameter = CIRCLE_SIZE_PX.SMALL;\n          break;\n        case MEDIUM:\n          diameter = CIRCLE_SIZE_PX.MEDIUM;\n          break;\n        case LARGE:\n          diameter = CIRCLE_SIZE_PX.LARGE;\n          break;\n        default:\n          diameter = Number(props.size);\n          break;\n      }\n      return diameter;\n    });\n\n    const rPoints = computed(() => {\n      return diameter.value / 2;\n    });\n\n    const radius = computed(() => {\n      return rPoints.value - circleStrokeWidth.value / 2;\n    });\n\n    const circleStyle = computed(() => {\n      if (props.theme !== PRO_THEME.CIRCLE) {\n        return {};\n      }\n\n      let fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;\n      if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {\n        fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;\n      } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {\n        fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;\n      }\n\n      return {\n        width: `${diameter.value}px`,\n        height: `${diameter.value}px`,\n        fontSize: `${fontSize}px`,\n      };\n    });\n\n    const circleStrokeWidth = computed(() => {\n      const defaultWidth = props.size === CIRCLE_SIZE.SMALL ? 4 : 6;\n      return props.strokeWidth ? Number(props.strokeWidth) : defaultWidth;\n    });\n\n    const strokeDashArr = computed(() => {\n      const radius = (diameter.value - circleStrokeWidth.value) / 2;\n      const perimeter = Math.PI * 2 * radius;\n      const percent = props.percentage / 100;\n      return `${perimeter * percent}  ${perimeter * (1 - percent)}`;\n    });\n\n    const getIconMap = () => {\n      const CIRCLE_ICONS = {\n        success: CheckIcon,\n        warning: ErrorIcon,\n        error: CloseIcon,\n      };\n      const NORMAL_ICONS = {\n        success: CheckCircleFilledIcon,\n        warning: ErrorCircleFilledIcon,\n        error: CloseCircleFilledIcon,\n      };\n      return props.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;\n    };\n    const getLabelContent = () => {\n      let labelContent: string | VNode = `${props.percentage}%`;\n      const status = props.status || '';\n      if (STATUS_ICON.includes(status) && props.theme !== PRO_THEME.PLUMP) {\n        const components = getIconMap();\n        const component = components[status];\n        if (component) {\n          labelContent = <component class={[`${COMPONENT_NAME.value}__icon`]}></component>;\n        }\n      }\n      return labelContent;\n    };\n\n    return () => {\n      const labelContent = (\n        <div class={`${COMPONENT_NAME.value}__info`}>{renderTNodeJSX('label', getLabelContent())}</div>\n      );\n      // 进度大于 10 ，进度百分比显示在内部；进度百分比小于 10 进度显示在外部\n      const PLUMP_SEPARATE = 10;\n      const separateClasses =\n        props.percentage > PLUMP_SEPARATE ? `${COMPONENT_NAME.value}--over-ten` : `${COMPONENT_NAME.value}--under-ten`;\n      return (\n        <div class={COMPONENT_NAME.value}>\n          {props.theme === PRO_THEME.LINE && (\n            <div class={`${COMPONENT_NAME.value}--thin ${COMPONENT_NAME.value}--status--${statusStyle.value}`}>\n              <div class={`${COMPONENT_NAME.value}__bar`} style={trackBgStyle.value}>\n                <div class={`${COMPONENT_NAME.value}__inner`} style={barStyle.value}></div>\n              </div>\n              {labelContent}\n            </div>\n          )}\n\n          {props.theme === PRO_THEME.PLUMP && (\n            <div\n              class={[\n                `${COMPONENT_NAME.value}__bar ${COMPONENT_NAME.value}--plump ${separateClasses}`,\n                { [`${COMPONENT_NAME.value}--status--${statusStyle.value}`]: statusStyle.value },\n              ]}\n              style={trackBgStyle.value}\n            >\n              <div class={`${COMPONENT_NAME.value}__inner`} style={barStyle.value}>\n                {props.percentage > PLUMP_SEPARATE && labelContent}\n              </div>\n              {props.percentage <= PLUMP_SEPARATE && labelContent}\n            </div>\n          )}\n\n          {props.theme === PRO_THEME.CIRCLE && (\n            <div\n              class={`${COMPONENT_NAME.value}--circle ${COMPONENT_NAME.value}--status--${statusStyle.value}`}\n              style={circleStyle.value}\n            >\n              {labelContent}\n              <svg width={diameter.value} height={diameter.value} viewBox={`0 0 ${diameter.value} ${diameter.value}`}>\n                <circle\n                  cx={rPoints.value}\n                  cy={rPoints.value}\n                  r={radius.value}\n                  stroke-width={circleStrokeWidth.value}\n                  stroke={props.trackColor}\n                  fill=\"none\"\n                  class={[`${COMPONENT_NAME.value}__circle-outer`]}\n                />\n                {props.percentage > 0 && (\n                  <circle\n                    cx={rPoints.value}\n                    cy={rPoints.value}\n                    r={radius.value}\n                    stroke-width={circleStrokeWidth.value}\n                    fill=\"none\"\n                    stroke-linecap=\"round\"\n                    class={[`${COMPONENT_NAME.value}__circle-inner`]}\n                    transform={`matrix(0,-1,1,0,0,${diameter.value})`}\n                    stroke-dasharray={strokeDashArr.value}\n                    style={circlePathStyle.value}\n                  />\n                )}\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","setup","renderTNodeJSX","useTNodeJSX","COMPONENT_NAME","usePrefixClass","useGlobalIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","CloseIcon","TdCloseIcon","CheckIcon","TdCheckIcon","ErrorIcon","TdErrorIcon","statusStyle","computed","percentage","status","trackBgStyle","style","strokeWidth","height","borderRadius","trackColor","backgroundColor","barStyle","width","background","color","getBackgroundColor","circlePathStyle","strokeColor","stroke","diameter","CIRCLE_SIZE_PX","MEDIUM","size","SMALL","CIRCLE_SIZE","LARGE","Number","rPoints","value","radius","circleStrokeWidth","circleStyle","theme","PRO_THEME","CIRCLE","fontSize","CIRCLE_FONT_SIZE_RATIO","defaultWidth","strokeDashArr","perimeter","Math","PI","percent","getIconMap","CIRCLE_ICONS","success","warning","error","NORMAL_ICONS","getLabelContent","labelContent","STATUS_ICON","includes","PLUMP","components","component","_createVNode","PLUMP_SEPARATE","separateClasses","LINE"],"mappings":"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"}