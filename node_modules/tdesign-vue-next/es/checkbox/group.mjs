/**
 * tdesign v0.21.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-8c39d78a.mjs';
import { _ as _defineProperty } from '../_chunks/dep-0b4c3c44.mjs';
import { _ as _typeof } from '../_chunks/dep-7071345f.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-dcf624da.mjs';
import { isVNode, defineComponent, toRefs, computed, ref, watchEffect, h, provide, reactive, createVNode, mergeProps } from 'vue';
import { i as intersection_1 } from '../_chunks/dep-2ca0e5ff.mjs';
import _Checkbox from './checkbox.mjs';
import props from './checkbox-group-props.mjs';
import { CheckboxGroupInjectionKey } from './constants.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { useChildComponentSlots } from '../hooks/slot.mjs';
import '../_chunks/dep-556a2f2c.mjs';
import '../_chunks/dep-a48de419.mjs';
import '../_chunks/dep-192e10f1.mjs';
import '../_chunks/dep-c5bb3a66.mjs';
import '../_chunks/dep-9311bf66.mjs';
import '../_chunks/dep-4889eb51.mjs';
import '../_chunks/dep-0b4185fe.mjs';
import '../_chunks/dep-3ca5fb38.mjs';
import '../_chunks/dep-d2403b2f.mjs';
import '../_chunks/dep-7922050a.mjs';
import '../_chunks/dep-169ea640.mjs';
import '../_chunks/dep-7d96367f.mjs';
import '../_chunks/dep-8ef9fb8e.mjs';
import '../_chunks/dep-469bf54b.mjs';
import '../_chunks/dep-59545a4d.mjs';
import '../_chunks/dep-c27b1c14.mjs';
import '../_chunks/dep-e769aafd.mjs';
import '../_chunks/dep-0820e0e2.mjs';
import './props.mjs';
import '../form/hooks.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-bfb23a5e.mjs';
import '../_chunks/dep-2a7dc5c7.mjs';
import '../_chunks/dep-f6b25712.mjs';
import '../_chunks/dep-827c4600.mjs';
import '../_chunks/dep-caad2e91.mjs';
import '../_chunks/dep-3d4aad09.mjs';
import '../_chunks/dep-8e38f523.mjs';
import '../_chunks/dep-400798c5.mjs';
import '../_chunks/dep-361522ee.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../config-provider/useConfig.mjs';
import '../config-provider/type.mjs';
import '../utils/set-style.mjs';
import '../_chunks/dep-baa4f9dc.mjs';
import '../_chunks/dep-db11154e.mjs';
import '../_chunks/dep-a82b01df.mjs';
import '../_chunks/dep-977c5cdd.mjs';
import '../_chunks/dep-40522c7c.mjs';
import '../_chunks/dep-83862ee1.mjs';
import '../_chunks/dep-8e451077.mjs';
import '../_chunks/dep-755716aa.mjs';
import '../_chunks/dep-82798823.mjs';
import '../_chunks/dep-52cbb58a.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-2684fd15.mjs';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var _Group = defineComponent({
  name: "TCheckboxGroup",
  props: props,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("checkbox-group");
    var renderTNodeJSX = useTNodeJSX();
    var isArray = Array.isArray;

    var _toRefs = toRefs(props2),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;

    var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];

    var checkedMap = computed(function () {
      var map = {};

      if (isArray(innerValue.value)) {
        innerValue.value.forEach(function (item) {
          map[item] = true;
        });
      }

      return map;
    });
    var optionList = ref([]);
    var intersectionLen = computed(function () {
      if (!isArray(innerValue.value)) return 0;
      var values = optionList.value.map(function (item) {
        return item.value;
      });
      var n = intersection_1(innerValue.value, values);
      return n.length;
    });
    var isCheckAll = computed(function () {
      var excludeCount = optionList.value.filter(function (item) {
        return item.disabled || item.checkAll;
      }).length;
      if (isArray(innerValue.value) && innerValue.value.length !== optionList.value.length - excludeCount) return false;
      return intersectionLen.value === optionList.value.length - excludeCount;
    });
    var indeterminate = computed(function () {
      return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
    });
    var maxExceeded = computed(function () {
      return props2.max !== void 0 && innerValue.value.length === props2.max;
    });
    watchEffect(function () {
      if (!props2.options) return [];
      optionList.value = props2.options.map(function (item) {
        var r = {};

        if (_typeof(item) !== "object") {
          r = {
            label: String(item),
            value: item
          };
        } else {
          r = _objectSpread({}, item);
          r.disabled = r.disabled === void 0 ? props2.disabled : r.disabled;
        }

        return r;
      });
    });

    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();

      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.disabled) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }

      return _toConsumableArray(val);
    };

    var onCheckAllChange = function onCheckAllChange(checked, context) {
      var value2 = checked ? getAllCheckboxValue() : [];
      setInnerValue(value2, {
        e: context.e,
        type: checked ? "check" : "uncheck",
        current: void 0,
        option: void 0
      });
    };

    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;

      if (isArray(innerValue.value)) {
        var val = _toConsumableArray(innerValue.value);

        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }

        setInnerValue(val, {
          e: data.e,
          current: data.option.value,
          option: data.option,
          type: data.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof(innerValue.value)));
      }
    };

    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
          checkAll = p.checkAll,
          e = p.e;

      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };

    var getChildComponentSlots = useChildComponentSlots();

    var getOptionListBySlots = function getOptionListBySlots() {
      var nodes = getChildComponentSlots("Checkbox");
      var arr = [];
      nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
        var option = node.props;

        if ((option === null || option === void 0 ? void 0 : option["check-all"]) === "" || (option === null || option === void 0 ? void 0 : option["check-all"]) === true) {
          option.checkAll = true;
        }

        option && arr.push(option);
      });
      return arr;
    };

    var renderLabel = function renderLabel(option) {
      if (typeof option.label === "function") {
        return option.label(h);
      }

      return option.label;
    };

    var _toRefs2 = toRefs(props2),
        name = _toRefs2.name,
        disabled = _toRefs2.disabled;

    provide(CheckboxGroupInjectionKey, reactive({
      name: name,
      isCheckAll: isCheckAll,
      checkedMap: checkedMap,
      maxExceeded: maxExceeded,
      disabled: disabled,
      indeterminate: indeterminate,
      handleCheckboxChange: handleCheckboxChange,
      onCheckedChange: onCheckedChange
    }));
    return function () {
      var _props2$options;

      var children = null;

      if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
        var _optionList$value;

        children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function (option, index) {
          var _slot;

          return createVNode(_Checkbox, mergeProps({
            "key": "".concat(option.value).concat(index)
          }, option, {
            "checked": checkedMap.value[option.value]
          }), _isSlot(_slot = renderLabel(option)) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        });
      } else {
        var nodes = renderTNodeJSX("default");
        optionList.value = getOptionListBySlots();
        children = nodes;
      }

      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [children]);
    };
  }
});

export { _Group as default };
//# sourceMappingURL=group.mjs.map
